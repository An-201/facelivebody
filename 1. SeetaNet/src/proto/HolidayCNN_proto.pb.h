// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HolidayCNN_proto.proto

#ifndef PROTOBUF_HolidayCNN_5fproto_2eproto__INCLUDED
#define PROTOBUF_HolidayCNN_5fproto_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_HolidayCNN_5fproto_2eproto();
void protobuf_AssignDesc_HolidayCNN_5fproto_2eproto();
void protobuf_ShutdownFile_HolidayCNN_5fproto_2eproto();

class Holiday_BlobShape;
class Holiday_BlobProto;
class Holiday_PreluParameter;
class Holiday_CropParameter;
class Holiday_ConvolutionParameter;
class Holiday_BatchNormliseParameter;
class Holiday_ScaleParameter;
class Holiday_ConcatParameter;
class Holiday_EltwiseParameter;
class Holiday_ExpParameter;
class Holiday_MemoryDataParameterProcess;
class Holiday_TransformationParameter;
class Holiday_InnerProductParameter;
class Holiday_LRNParameter;
class Holiday_PoolingParameter;
class Holiday_PowerParameter;
class Holiday_ReLUParameter;
class Holiday_SoftmaxParameter;
class Holiday_SliceParameter;
class Holiday_SigmoidParameter;
class Holiday_SpaceToBatchNDLayer;
class Holiday_BatchToSpaceNDLayer;
class Holiday_ReshapeLayer;
class Holiday_RealMulLayer;
class Holiday_LayerParameter;

enum Holiday_EltwiseParameter_EltwiseOp {
  Holiday_EltwiseParameter_EltwiseOp_PROD = 0,
  Holiday_EltwiseParameter_EltwiseOp_SUM = 1,
  Holiday_EltwiseParameter_EltwiseOp_MAX = 2
};
bool Holiday_EltwiseParameter_EltwiseOp_IsValid(int value);
const Holiday_EltwiseParameter_EltwiseOp Holiday_EltwiseParameter_EltwiseOp_EltwiseOp_MIN = Holiday_EltwiseParameter_EltwiseOp_PROD;
const Holiday_EltwiseParameter_EltwiseOp Holiday_EltwiseParameter_EltwiseOp_EltwiseOp_MAX = Holiday_EltwiseParameter_EltwiseOp_MAX;
const int Holiday_EltwiseParameter_EltwiseOp_EltwiseOp_ARRAYSIZE = Holiday_EltwiseParameter_EltwiseOp_EltwiseOp_MAX + 1;

const ::google::protobuf::EnumDescriptor* Holiday_EltwiseParameter_EltwiseOp_descriptor();
inline const ::std::string& Holiday_EltwiseParameter_EltwiseOp_Name(Holiday_EltwiseParameter_EltwiseOp value) {
  return ::google::protobuf::internal::NameOfEnum(
    Holiday_EltwiseParameter_EltwiseOp_descriptor(), value);
}
inline bool Holiday_EltwiseParameter_EltwiseOp_Parse(
    const ::std::string& name, Holiday_EltwiseParameter_EltwiseOp* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Holiday_EltwiseParameter_EltwiseOp>(
    Holiday_EltwiseParameter_EltwiseOp_descriptor(), name, value);
}
enum Holiday_LRNParameter_NormRegion {
  Holiday_LRNParameter_NormRegion_ACROSS_CHANNELS = 0,
  Holiday_LRNParameter_NormRegion_WITHIN_CHANNEL = 1
};
bool Holiday_LRNParameter_NormRegion_IsValid(int value);
const Holiday_LRNParameter_NormRegion Holiday_LRNParameter_NormRegion_NormRegion_MIN = Holiday_LRNParameter_NormRegion_ACROSS_CHANNELS;
const Holiday_LRNParameter_NormRegion Holiday_LRNParameter_NormRegion_NormRegion_MAX = Holiday_LRNParameter_NormRegion_WITHIN_CHANNEL;
const int Holiday_LRNParameter_NormRegion_NormRegion_ARRAYSIZE = Holiday_LRNParameter_NormRegion_NormRegion_MAX + 1;

const ::google::protobuf::EnumDescriptor* Holiday_LRNParameter_NormRegion_descriptor();
inline const ::std::string& Holiday_LRNParameter_NormRegion_Name(Holiday_LRNParameter_NormRegion value) {
  return ::google::protobuf::internal::NameOfEnum(
    Holiday_LRNParameter_NormRegion_descriptor(), value);
}
inline bool Holiday_LRNParameter_NormRegion_Parse(
    const ::std::string& name, Holiday_LRNParameter_NormRegion* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Holiday_LRNParameter_NormRegion>(
    Holiday_LRNParameter_NormRegion_descriptor(), name, value);
}
enum Holiday_PoolingParameter_PoolMethod {
  Holiday_PoolingParameter_PoolMethod_MAX = 0,
  Holiday_PoolingParameter_PoolMethod_AVE = 1,
  Holiday_PoolingParameter_PoolMethod_STOCHASTIC = 2
};
bool Holiday_PoolingParameter_PoolMethod_IsValid(int value);
const Holiday_PoolingParameter_PoolMethod Holiday_PoolingParameter_PoolMethod_PoolMethod_MIN = Holiday_PoolingParameter_PoolMethod_MAX;
const Holiday_PoolingParameter_PoolMethod Holiday_PoolingParameter_PoolMethod_PoolMethod_MAX = Holiday_PoolingParameter_PoolMethod_STOCHASTIC;
const int Holiday_PoolingParameter_PoolMethod_PoolMethod_ARRAYSIZE = Holiday_PoolingParameter_PoolMethod_PoolMethod_MAX + 1;

const ::google::protobuf::EnumDescriptor* Holiday_PoolingParameter_PoolMethod_descriptor();
inline const ::std::string& Holiday_PoolingParameter_PoolMethod_Name(Holiday_PoolingParameter_PoolMethod value) {
  return ::google::protobuf::internal::NameOfEnum(
    Holiday_PoolingParameter_PoolMethod_descriptor(), value);
}
inline bool Holiday_PoolingParameter_PoolMethod_Parse(
    const ::std::string& name, Holiday_PoolingParameter_PoolMethod* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Holiday_PoolingParameter_PoolMethod>(
    Holiday_PoolingParameter_PoolMethod_descriptor(), name, value);
}
// ===================================================================

class Holiday_BlobShape : public ::google::protobuf::Message {
 public:
  Holiday_BlobShape();
  virtual ~Holiday_BlobShape();

  Holiday_BlobShape(const Holiday_BlobShape& from);

  inline Holiday_BlobShape& operator=(const Holiday_BlobShape& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Holiday_BlobShape& default_instance();

  void Swap(Holiday_BlobShape* other);

  // implements Message ----------------------------------------------

  Holiday_BlobShape* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Holiday_BlobShape& from);
  void MergeFrom(const Holiday_BlobShape& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 dim = 1;
  inline int dim_size() const;
  inline void clear_dim();
  static const int kDimFieldNumber = 1;
  inline ::google::protobuf::int64 dim(int index) const;
  inline void set_dim(int index, ::google::protobuf::int64 value);
  inline void add_dim(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      dim() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_dim();

  // @@protoc_insertion_point(class_scope:Holiday_BlobShape)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > dim_;
  friend void  protobuf_AddDesc_HolidayCNN_5fproto_2eproto();
  friend void protobuf_AssignDesc_HolidayCNN_5fproto_2eproto();
  friend void protobuf_ShutdownFile_HolidayCNN_5fproto_2eproto();

  void InitAsDefaultInstance();
  static Holiday_BlobShape* default_instance_;
};
// -------------------------------------------------------------------

class Holiday_BlobProto : public ::google::protobuf::Message {
 public:
  Holiday_BlobProto();
  virtual ~Holiday_BlobProto();

  Holiday_BlobProto(const Holiday_BlobProto& from);

  inline Holiday_BlobProto& operator=(const Holiday_BlobProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Holiday_BlobProto& default_instance();

  void Swap(Holiday_BlobProto* other);

  // implements Message ----------------------------------------------

  Holiday_BlobProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Holiday_BlobProto& from);
  void MergeFrom(const Holiday_BlobProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Holiday_BlobShape shape = 1;
  inline bool has_shape() const;
  inline void clear_shape();
  static const int kShapeFieldNumber = 1;
  inline const ::Holiday_BlobShape& shape() const;
  inline ::Holiday_BlobShape* mutable_shape();
  inline ::Holiday_BlobShape* release_shape();
  inline void set_allocated_shape(::Holiday_BlobShape* shape);

  // repeated float data = 2;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline float data(int index) const;
  inline void set_data(int index, float value);
  inline void add_data(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      data() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:Holiday_BlobProto)
 private:
  inline void set_has_shape();
  inline void clear_has_shape();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Holiday_BlobShape* shape_;
  ::google::protobuf::RepeatedField< float > data_;
  friend void  protobuf_AddDesc_HolidayCNN_5fproto_2eproto();
  friend void protobuf_AssignDesc_HolidayCNN_5fproto_2eproto();
  friend void protobuf_ShutdownFile_HolidayCNN_5fproto_2eproto();

  void InitAsDefaultInstance();
  static Holiday_BlobProto* default_instance_;
};
// -------------------------------------------------------------------

class Holiday_PreluParameter : public ::google::protobuf::Message {
 public:
  Holiday_PreluParameter();
  virtual ~Holiday_PreluParameter();

  Holiday_PreluParameter(const Holiday_PreluParameter& from);

  inline Holiday_PreluParameter& operator=(const Holiday_PreluParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Holiday_PreluParameter& default_instance();

  void Swap(Holiday_PreluParameter* other);

  // implements Message ----------------------------------------------

  Holiday_PreluParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Holiday_PreluParameter& from);
  void MergeFrom(const Holiday_PreluParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Holiday_BlobProto param = 1;
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 1;
  inline const ::Holiday_BlobProto& param() const;
  inline ::Holiday_BlobProto* mutable_param();
  inline ::Holiday_BlobProto* release_param();
  inline void set_allocated_param(::Holiday_BlobProto* param);

  // @@protoc_insertion_point(class_scope:Holiday_PreluParameter)
 private:
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Holiday_BlobProto* param_;
  friend void  protobuf_AddDesc_HolidayCNN_5fproto_2eproto();
  friend void protobuf_AssignDesc_HolidayCNN_5fproto_2eproto();
  friend void protobuf_ShutdownFile_HolidayCNN_5fproto_2eproto();

  void InitAsDefaultInstance();
  static Holiday_PreluParameter* default_instance_;
};
// -------------------------------------------------------------------

class Holiday_CropParameter : public ::google::protobuf::Message {
 public:
  Holiday_CropParameter();
  virtual ~Holiday_CropParameter();

  Holiday_CropParameter(const Holiday_CropParameter& from);

  inline Holiday_CropParameter& operator=(const Holiday_CropParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Holiday_CropParameter& default_instance();

  void Swap(Holiday_CropParameter* other);

  // implements Message ----------------------------------------------

  Holiday_CropParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Holiday_CropParameter& from);
  void MergeFrom(const Holiday_CropParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 axis = 1 [default = 2];
  inline bool has_axis() const;
  inline void clear_axis();
  static const int kAxisFieldNumber = 1;
  inline ::google::protobuf::int32 axis() const;
  inline void set_axis(::google::protobuf::int32 value);

  // repeated uint32 offset = 2;
  inline int offset_size() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 2;
  inline ::google::protobuf::uint32 offset(int index) const;
  inline void set_offset(int index, ::google::protobuf::uint32 value);
  inline void add_offset(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      offset() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_offset();

  // @@protoc_insertion_point(class_scope:Holiday_CropParameter)
 private:
  inline void set_has_axis();
  inline void clear_has_axis();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > offset_;
  ::google::protobuf::int32 axis_;
  friend void  protobuf_AddDesc_HolidayCNN_5fproto_2eproto();
  friend void protobuf_AssignDesc_HolidayCNN_5fproto_2eproto();
  friend void protobuf_ShutdownFile_HolidayCNN_5fproto_2eproto();

  void InitAsDefaultInstance();
  static Holiday_CropParameter* default_instance_;
};
// -------------------------------------------------------------------

class Holiday_ConvolutionParameter : public ::google::protobuf::Message {
 public:
  Holiday_ConvolutionParameter();
  virtual ~Holiday_ConvolutionParameter();

  Holiday_ConvolutionParameter(const Holiday_ConvolutionParameter& from);

  inline Holiday_ConvolutionParameter& operator=(const Holiday_ConvolutionParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Holiday_ConvolutionParameter& default_instance();

  void Swap(Holiday_ConvolutionParameter* other);

  // implements Message ----------------------------------------------

  Holiday_ConvolutionParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Holiday_ConvolutionParameter& from);
  void MergeFrom(const Holiday_ConvolutionParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Holiday_BlobProto bias_param = 1;
  inline bool has_bias_param() const;
  inline void clear_bias_param();
  static const int kBiasParamFieldNumber = 1;
  inline const ::Holiday_BlobProto& bias_param() const;
  inline ::Holiday_BlobProto* mutable_bias_param();
  inline ::Holiday_BlobProto* release_bias_param();
  inline void set_allocated_bias_param(::Holiday_BlobProto* bias_param);

  // optional .Holiday_BlobProto kernel_param = 2;
  inline bool has_kernel_param() const;
  inline void clear_kernel_param();
  static const int kKernelParamFieldNumber = 2;
  inline const ::Holiday_BlobProto& kernel_param() const;
  inline ::Holiday_BlobProto* mutable_kernel_param();
  inline ::Holiday_BlobProto* release_kernel_param();
  inline void set_allocated_kernel_param(::Holiday_BlobProto* kernel_param);

  // optional uint32 dilation_height = 3;
  inline bool has_dilation_height() const;
  inline void clear_dilation_height();
  static const int kDilationHeightFieldNumber = 3;
  inline ::google::protobuf::uint32 dilation_height() const;
  inline void set_dilation_height(::google::protobuf::uint32 value);

  // optional uint32 dilation_width = 4;
  inline bool has_dilation_width() const;
  inline void clear_dilation_width();
  static const int kDilationWidthFieldNumber = 4;
  inline ::google::protobuf::uint32 dilation_width() const;
  inline void set_dilation_width(::google::protobuf::uint32 value);

  // optional uint32 num_output = 5;
  inline bool has_num_output() const;
  inline void clear_num_output();
  static const int kNumOutputFieldNumber = 5;
  inline ::google::protobuf::uint32 num_output() const;
  inline void set_num_output(::google::protobuf::uint32 value);

  // optional uint32 pad_height = 6 [default = 0];
  inline bool has_pad_height() const;
  inline void clear_pad_height();
  static const int kPadHeightFieldNumber = 6;
  inline ::google::protobuf::uint32 pad_height() const;
  inline void set_pad_height(::google::protobuf::uint32 value);

  // optional uint32 pad_width = 7 [default = 0];
  inline bool has_pad_width() const;
  inline void clear_pad_width();
  static const int kPadWidthFieldNumber = 7;
  inline ::google::protobuf::uint32 pad_width() const;
  inline void set_pad_width(::google::protobuf::uint32 value);

  // optional uint32 kernel_height = 8;
  inline bool has_kernel_height() const;
  inline void clear_kernel_height();
  static const int kKernelHeightFieldNumber = 8;
  inline ::google::protobuf::uint32 kernel_height() const;
  inline void set_kernel_height(::google::protobuf::uint32 value);

  // optional uint32 kernel_width = 9;
  inline bool has_kernel_width() const;
  inline void clear_kernel_width();
  static const int kKernelWidthFieldNumber = 9;
  inline ::google::protobuf::uint32 kernel_width() const;
  inline void set_kernel_width(::google::protobuf::uint32 value);

  // optional uint32 stride_height = 10;
  inline bool has_stride_height() const;
  inline void clear_stride_height();
  static const int kStrideHeightFieldNumber = 10;
  inline ::google::protobuf::uint32 stride_height() const;
  inline void set_stride_height(::google::protobuf::uint32 value);

  // optional uint32 stride_width = 11;
  inline bool has_stride_width() const;
  inline void clear_stride_width();
  static const int kStrideWidthFieldNumber = 11;
  inline ::google::protobuf::uint32 stride_width() const;
  inline void set_stride_width(::google::protobuf::uint32 value);

  // optional uint32 group = 12 [default = 1];
  inline bool has_group() const;
  inline void clear_group();
  static const int kGroupFieldNumber = 12;
  inline ::google::protobuf::uint32 group() const;
  inline void set_group(::google::protobuf::uint32 value);

  // optional int32 axis = 13 [default = 1];
  inline bool has_axis() const;
  inline void clear_axis();
  static const int kAxisFieldNumber = 13;
  inline ::google::protobuf::int32 axis() const;
  inline void set_axis(::google::protobuf::int32 value);

  // optional bool force_nd_im2col = 14 [default = false];
  inline bool has_force_nd_im2col() const;
  inline void clear_force_nd_im2col();
  static const int kForceNdIm2ColFieldNumber = 14;
  inline bool force_nd_im2col() const;
  inline void set_force_nd_im2col(bool value);

  // optional string tf_padding = 15;
  inline bool has_tf_padding() const;
  inline void clear_tf_padding();
  static const int kTfPaddingFieldNumber = 15;
  inline const ::std::string& tf_padding() const;
  inline void set_tf_padding(const ::std::string& value);
  inline void set_tf_padding(const char* value);
  inline void set_tf_padding(const char* value, size_t size);
  inline ::std::string* mutable_tf_padding();
  inline ::std::string* release_tf_padding();
  inline void set_allocated_tf_padding(::std::string* tf_padding);

  // @@protoc_insertion_point(class_scope:Holiday_ConvolutionParameter)
 private:
  inline void set_has_bias_param();
  inline void clear_has_bias_param();
  inline void set_has_kernel_param();
  inline void clear_has_kernel_param();
  inline void set_has_dilation_height();
  inline void clear_has_dilation_height();
  inline void set_has_dilation_width();
  inline void clear_has_dilation_width();
  inline void set_has_num_output();
  inline void clear_has_num_output();
  inline void set_has_pad_height();
  inline void clear_has_pad_height();
  inline void set_has_pad_width();
  inline void clear_has_pad_width();
  inline void set_has_kernel_height();
  inline void clear_has_kernel_height();
  inline void set_has_kernel_width();
  inline void clear_has_kernel_width();
  inline void set_has_stride_height();
  inline void clear_has_stride_height();
  inline void set_has_stride_width();
  inline void clear_has_stride_width();
  inline void set_has_group();
  inline void clear_has_group();
  inline void set_has_axis();
  inline void clear_has_axis();
  inline void set_has_force_nd_im2col();
  inline void clear_has_force_nd_im2col();
  inline void set_has_tf_padding();
  inline void clear_has_tf_padding();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Holiday_BlobProto* bias_param_;
  ::Holiday_BlobProto* kernel_param_;
  ::google::protobuf::uint32 dilation_height_;
  ::google::protobuf::uint32 dilation_width_;
  ::google::protobuf::uint32 num_output_;
  ::google::protobuf::uint32 pad_height_;
  ::google::protobuf::uint32 pad_width_;
  ::google::protobuf::uint32 kernel_height_;
  ::google::protobuf::uint32 kernel_width_;
  ::google::protobuf::uint32 stride_height_;
  ::google::protobuf::uint32 stride_width_;
  ::google::protobuf::uint32 group_;
  ::google::protobuf::int32 axis_;
  bool force_nd_im2col_;
  ::std::string* tf_padding_;
  friend void  protobuf_AddDesc_HolidayCNN_5fproto_2eproto();
  friend void protobuf_AssignDesc_HolidayCNN_5fproto_2eproto();
  friend void protobuf_ShutdownFile_HolidayCNN_5fproto_2eproto();

  void InitAsDefaultInstance();
  static Holiday_ConvolutionParameter* default_instance_;
};
// -------------------------------------------------------------------

class Holiday_BatchNormliseParameter : public ::google::protobuf::Message {
 public:
  Holiday_BatchNormliseParameter();
  virtual ~Holiday_BatchNormliseParameter();

  Holiday_BatchNormliseParameter(const Holiday_BatchNormliseParameter& from);

  inline Holiday_BatchNormliseParameter& operator=(const Holiday_BatchNormliseParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Holiday_BatchNormliseParameter& default_instance();

  void Swap(Holiday_BatchNormliseParameter* other);

  // implements Message ----------------------------------------------

  Holiday_BatchNormliseParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Holiday_BatchNormliseParameter& from);
  void MergeFrom(const Holiday_BatchNormliseParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Holiday_BlobProto mean_param = 1;
  inline bool has_mean_param() const;
  inline void clear_mean_param();
  static const int kMeanParamFieldNumber = 1;
  inline const ::Holiday_BlobProto& mean_param() const;
  inline ::Holiday_BlobProto* mutable_mean_param();
  inline ::Holiday_BlobProto* release_mean_param();
  inline void set_allocated_mean_param(::Holiday_BlobProto* mean_param);

  // optional .Holiday_BlobProto covariance_param = 2;
  inline bool has_covariance_param() const;
  inline void clear_covariance_param();
  static const int kCovarianceParamFieldNumber = 2;
  inline const ::Holiday_BlobProto& covariance_param() const;
  inline ::Holiday_BlobProto* mutable_covariance_param();
  inline ::Holiday_BlobProto* release_covariance_param();
  inline void set_allocated_covariance_param(::Holiday_BlobProto* covariance_param);

  // @@protoc_insertion_point(class_scope:Holiday_BatchNormliseParameter)
 private:
  inline void set_has_mean_param();
  inline void clear_has_mean_param();
  inline void set_has_covariance_param();
  inline void clear_has_covariance_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Holiday_BlobProto* mean_param_;
  ::Holiday_BlobProto* covariance_param_;
  friend void  protobuf_AddDesc_HolidayCNN_5fproto_2eproto();
  friend void protobuf_AssignDesc_HolidayCNN_5fproto_2eproto();
  friend void protobuf_ShutdownFile_HolidayCNN_5fproto_2eproto();

  void InitAsDefaultInstance();
  static Holiday_BatchNormliseParameter* default_instance_;
};
// -------------------------------------------------------------------

class Holiday_ScaleParameter : public ::google::protobuf::Message {
 public:
  Holiday_ScaleParameter();
  virtual ~Holiday_ScaleParameter();

  Holiday_ScaleParameter(const Holiday_ScaleParameter& from);

  inline Holiday_ScaleParameter& operator=(const Holiday_ScaleParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Holiday_ScaleParameter& default_instance();

  void Swap(Holiday_ScaleParameter* other);

  // implements Message ----------------------------------------------

  Holiday_ScaleParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Holiday_ScaleParameter& from);
  void MergeFrom(const Holiday_ScaleParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Holiday_BlobProto scale_param = 1;
  inline bool has_scale_param() const;
  inline void clear_scale_param();
  static const int kScaleParamFieldNumber = 1;
  inline const ::Holiday_BlobProto& scale_param() const;
  inline ::Holiday_BlobProto* mutable_scale_param();
  inline ::Holiday_BlobProto* release_scale_param();
  inline void set_allocated_scale_param(::Holiday_BlobProto* scale_param);

  // optional .Holiday_BlobProto bias_param = 2;
  inline bool has_bias_param() const;
  inline void clear_bias_param();
  static const int kBiasParamFieldNumber = 2;
  inline const ::Holiday_BlobProto& bias_param() const;
  inline ::Holiday_BlobProto* mutable_bias_param();
  inline ::Holiday_BlobProto* release_bias_param();
  inline void set_allocated_bias_param(::Holiday_BlobProto* bias_param);

  // @@protoc_insertion_point(class_scope:Holiday_ScaleParameter)
 private:
  inline void set_has_scale_param();
  inline void clear_has_scale_param();
  inline void set_has_bias_param();
  inline void clear_has_bias_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Holiday_BlobProto* scale_param_;
  ::Holiday_BlobProto* bias_param_;
  friend void  protobuf_AddDesc_HolidayCNN_5fproto_2eproto();
  friend void protobuf_AssignDesc_HolidayCNN_5fproto_2eproto();
  friend void protobuf_ShutdownFile_HolidayCNN_5fproto_2eproto();

  void InitAsDefaultInstance();
  static Holiday_ScaleParameter* default_instance_;
};
// -------------------------------------------------------------------

class Holiday_ConcatParameter : public ::google::protobuf::Message {
 public:
  Holiday_ConcatParameter();
  virtual ~Holiday_ConcatParameter();

  Holiday_ConcatParameter(const Holiday_ConcatParameter& from);

  inline Holiday_ConcatParameter& operator=(const Holiday_ConcatParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Holiday_ConcatParameter& default_instance();

  void Swap(Holiday_ConcatParameter* other);

  // implements Message ----------------------------------------------

  Holiday_ConcatParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Holiday_ConcatParameter& from);
  void MergeFrom(const Holiday_ConcatParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 concat_dim = 1 [default = 1];
  inline bool has_concat_dim() const;
  inline void clear_concat_dim();
  static const int kConcatDimFieldNumber = 1;
  inline ::google::protobuf::uint32 concat_dim() const;
  inline void set_concat_dim(::google::protobuf::uint32 value);

  // optional int32 axis = 2 [default = 1];
  inline bool has_axis() const;
  inline void clear_axis();
  static const int kAxisFieldNumber = 2;
  inline ::google::protobuf::int32 axis() const;
  inline void set_axis(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Holiday_ConcatParameter)
 private:
  inline void set_has_concat_dim();
  inline void clear_has_concat_dim();
  inline void set_has_axis();
  inline void clear_has_axis();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 concat_dim_;
  ::google::protobuf::int32 axis_;
  friend void  protobuf_AddDesc_HolidayCNN_5fproto_2eproto();
  friend void protobuf_AssignDesc_HolidayCNN_5fproto_2eproto();
  friend void protobuf_ShutdownFile_HolidayCNN_5fproto_2eproto();

  void InitAsDefaultInstance();
  static Holiday_ConcatParameter* default_instance_;
};
// -------------------------------------------------------------------

class Holiday_EltwiseParameter : public ::google::protobuf::Message {
 public:
  Holiday_EltwiseParameter();
  virtual ~Holiday_EltwiseParameter();

  Holiday_EltwiseParameter(const Holiday_EltwiseParameter& from);

  inline Holiday_EltwiseParameter& operator=(const Holiday_EltwiseParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Holiday_EltwiseParameter& default_instance();

  void Swap(Holiday_EltwiseParameter* other);

  // implements Message ----------------------------------------------

  Holiday_EltwiseParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Holiday_EltwiseParameter& from);
  void MergeFrom(const Holiday_EltwiseParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Holiday_EltwiseParameter_EltwiseOp EltwiseOp;
  static const EltwiseOp PROD = Holiday_EltwiseParameter_EltwiseOp_PROD;
  static const EltwiseOp SUM = Holiday_EltwiseParameter_EltwiseOp_SUM;
  static const EltwiseOp MAX = Holiday_EltwiseParameter_EltwiseOp_MAX;
  static inline bool EltwiseOp_IsValid(int value) {
    return Holiday_EltwiseParameter_EltwiseOp_IsValid(value);
  }
  static const EltwiseOp EltwiseOp_MIN =
    Holiday_EltwiseParameter_EltwiseOp_EltwiseOp_MIN;
  static const EltwiseOp EltwiseOp_MAX =
    Holiday_EltwiseParameter_EltwiseOp_EltwiseOp_MAX;
  static const int EltwiseOp_ARRAYSIZE =
    Holiday_EltwiseParameter_EltwiseOp_EltwiseOp_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EltwiseOp_descriptor() {
    return Holiday_EltwiseParameter_EltwiseOp_descriptor();
  }
  static inline const ::std::string& EltwiseOp_Name(EltwiseOp value) {
    return Holiday_EltwiseParameter_EltwiseOp_Name(value);
  }
  static inline bool EltwiseOp_Parse(const ::std::string& name,
      EltwiseOp* value) {
    return Holiday_EltwiseParameter_EltwiseOp_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Holiday_EltwiseParameter.EltwiseOp operation = 1 [default = SUM];
  inline bool has_operation() const;
  inline void clear_operation();
  static const int kOperationFieldNumber = 1;
  inline ::Holiday_EltwiseParameter_EltwiseOp operation() const;
  inline void set_operation(::Holiday_EltwiseParameter_EltwiseOp value);

  // repeated float coeff = 2;
  inline int coeff_size() const;
  inline void clear_coeff();
  static const int kCoeffFieldNumber = 2;
  inline float coeff(int index) const;
  inline void set_coeff(int index, float value);
  inline void add_coeff(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      coeff() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_coeff();

  // optional bool stable_prod_grad = 3 [default = true];
  inline bool has_stable_prod_grad() const;
  inline void clear_stable_prod_grad();
  static const int kStableProdGradFieldNumber = 3;
  inline bool stable_prod_grad() const;
  inline void set_stable_prod_grad(bool value);

  // @@protoc_insertion_point(class_scope:Holiday_EltwiseParameter)
 private:
  inline void set_has_operation();
  inline void clear_has_operation();
  inline void set_has_stable_prod_grad();
  inline void clear_has_stable_prod_grad();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > coeff_;
  int operation_;
  bool stable_prod_grad_;
  friend void  protobuf_AddDesc_HolidayCNN_5fproto_2eproto();
  friend void protobuf_AssignDesc_HolidayCNN_5fproto_2eproto();
  friend void protobuf_ShutdownFile_HolidayCNN_5fproto_2eproto();

  void InitAsDefaultInstance();
  static Holiday_EltwiseParameter* default_instance_;
};
// -------------------------------------------------------------------

class Holiday_ExpParameter : public ::google::protobuf::Message {
 public:
  Holiday_ExpParameter();
  virtual ~Holiday_ExpParameter();

  Holiday_ExpParameter(const Holiday_ExpParameter& from);

  inline Holiday_ExpParameter& operator=(const Holiday_ExpParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Holiday_ExpParameter& default_instance();

  void Swap(Holiday_ExpParameter* other);

  // implements Message ----------------------------------------------

  Holiday_ExpParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Holiday_ExpParameter& from);
  void MergeFrom(const Holiday_ExpParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float base = 1 [default = -1];
  inline bool has_base() const;
  inline void clear_base();
  static const int kBaseFieldNumber = 1;
  inline float base() const;
  inline void set_base(float value);

  // optional float scale = 2 [default = 1];
  inline bool has_scale() const;
  inline void clear_scale();
  static const int kScaleFieldNumber = 2;
  inline float scale() const;
  inline void set_scale(float value);

  // optional float shift = 3 [default = 0];
  inline bool has_shift() const;
  inline void clear_shift();
  static const int kShiftFieldNumber = 3;
  inline float shift() const;
  inline void set_shift(float value);

  // @@protoc_insertion_point(class_scope:Holiday_ExpParameter)
 private:
  inline void set_has_base();
  inline void clear_has_base();
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_shift();
  inline void clear_has_shift();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float base_;
  float scale_;
  float shift_;
  friend void  protobuf_AddDesc_HolidayCNN_5fproto_2eproto();
  friend void protobuf_AssignDesc_HolidayCNN_5fproto_2eproto();
  friend void protobuf_ShutdownFile_HolidayCNN_5fproto_2eproto();

  void InitAsDefaultInstance();
  static Holiday_ExpParameter* default_instance_;
};
// -------------------------------------------------------------------

class Holiday_MemoryDataParameterProcess : public ::google::protobuf::Message {
 public:
  Holiday_MemoryDataParameterProcess();
  virtual ~Holiday_MemoryDataParameterProcess();

  Holiday_MemoryDataParameterProcess(const Holiday_MemoryDataParameterProcess& from);

  inline Holiday_MemoryDataParameterProcess& operator=(const Holiday_MemoryDataParameterProcess& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Holiday_MemoryDataParameterProcess& default_instance();

  void Swap(Holiday_MemoryDataParameterProcess* other);

  // implements Message ----------------------------------------------

  Holiday_MemoryDataParameterProcess* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Holiday_MemoryDataParameterProcess& from);
  void MergeFrom(const Holiday_MemoryDataParameterProcess& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 batch_size = 1;
  inline bool has_batch_size() const;
  inline void clear_batch_size();
  static const int kBatchSizeFieldNumber = 1;
  inline ::google::protobuf::uint32 batch_size() const;
  inline void set_batch_size(::google::protobuf::uint32 value);

  // optional uint32 channels = 2;
  inline bool has_channels() const;
  inline void clear_channels();
  static const int kChannelsFieldNumber = 2;
  inline ::google::protobuf::uint32 channels() const;
  inline void set_channels(::google::protobuf::uint32 value);

  // optional uint32 height = 3;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 3;
  inline ::google::protobuf::uint32 height() const;
  inline void set_height(::google::protobuf::uint32 value);

  // optional uint32 width = 4;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 4;
  inline ::google::protobuf::uint32 width() const;
  inline void set_width(::google::protobuf::uint32 value);

  // optional uint32 new_height = 5 [default = 0];
  inline bool has_new_height() const;
  inline void clear_new_height();
  static const int kNewHeightFieldNumber = 5;
  inline ::google::protobuf::uint32 new_height() const;
  inline void set_new_height(::google::protobuf::uint32 value);

  // optional uint32 new_width = 6 [default = 0];
  inline bool has_new_width() const;
  inline void clear_new_width();
  static const int kNewWidthFieldNumber = 6;
  inline ::google::protobuf::uint32 new_width() const;
  inline void set_new_width(::google::protobuf::uint32 value);

  // optional float scale = 7 [default = 1];
  inline bool has_scale() const;
  inline void clear_scale();
  static const int kScaleFieldNumber = 7;
  inline float scale() const;
  inline void set_scale(float value);

  // optional .Holiday_BlobProto mean_file = 8;
  inline bool has_mean_file() const;
  inline void clear_mean_file();
  static const int kMeanFileFieldNumber = 8;
  inline const ::Holiday_BlobProto& mean_file() const;
  inline ::Holiday_BlobProto* mutable_mean_file();
  inline ::Holiday_BlobProto* release_mean_file();
  inline void set_allocated_mean_file(::Holiday_BlobProto* mean_file);

  // repeated float mean_value = 9;
  inline int mean_value_size() const;
  inline void clear_mean_value();
  static const int kMeanValueFieldNumber = 9;
  inline float mean_value(int index) const;
  inline void set_mean_value(int index, float value);
  inline void add_mean_value(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      mean_value() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_mean_value();

  // optional uint32 crop_size_height = 10 [default = 0];
  inline bool has_crop_size_height() const;
  inline void clear_crop_size_height();
  static const int kCropSizeHeightFieldNumber = 10;
  inline ::google::protobuf::uint32 crop_size_height() const;
  inline void set_crop_size_height(::google::protobuf::uint32 value);

  // optional uint32 crop_size_width = 11 [default = 0];
  inline bool has_crop_size_width() const;
  inline void clear_crop_size_width();
  static const int kCropSizeWidthFieldNumber = 11;
  inline ::google::protobuf::uint32 crop_size_width() const;
  inline void set_crop_size_width(::google::protobuf::uint32 value);

  // repeated uint32 channel_swaps = 12;
  inline int channel_swaps_size() const;
  inline void clear_channel_swaps();
  static const int kChannelSwapsFieldNumber = 12;
  inline ::google::protobuf::uint32 channel_swaps(int index) const;
  inline void set_channel_swaps(int index, ::google::protobuf::uint32 value);
  inline void add_channel_swaps(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      channel_swaps() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_channel_swaps();

  // optional bool prewhiten = 13 [default = false];
  inline bool has_prewhiten() const;
  inline void clear_prewhiten();
  static const int kPrewhitenFieldNumber = 13;
  inline bool prewhiten() const;
  inline void set_prewhiten(bool value);

  // @@protoc_insertion_point(class_scope:Holiday_MemoryDataParameterProcess)
 private:
  inline void set_has_batch_size();
  inline void clear_has_batch_size();
  inline void set_has_channels();
  inline void clear_has_channels();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_new_height();
  inline void clear_has_new_height();
  inline void set_has_new_width();
  inline void clear_has_new_width();
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_mean_file();
  inline void clear_has_mean_file();
  inline void set_has_crop_size_height();
  inline void clear_has_crop_size_height();
  inline void set_has_crop_size_width();
  inline void clear_has_crop_size_width();
  inline void set_has_prewhiten();
  inline void clear_has_prewhiten();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 batch_size_;
  ::google::protobuf::uint32 channels_;
  ::google::protobuf::uint32 height_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 new_height_;
  ::google::protobuf::uint32 new_width_;
  ::Holiday_BlobProto* mean_file_;
  float scale_;
  ::google::protobuf::uint32 crop_size_height_;
  ::google::protobuf::RepeatedField< float > mean_value_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > channel_swaps_;
  ::google::protobuf::uint32 crop_size_width_;
  bool prewhiten_;
  friend void  protobuf_AddDesc_HolidayCNN_5fproto_2eproto();
  friend void protobuf_AssignDesc_HolidayCNN_5fproto_2eproto();
  friend void protobuf_ShutdownFile_HolidayCNN_5fproto_2eproto();

  void InitAsDefaultInstance();
  static Holiday_MemoryDataParameterProcess* default_instance_;
};
// -------------------------------------------------------------------

class Holiday_TransformationParameter : public ::google::protobuf::Message {
 public:
  Holiday_TransformationParameter();
  virtual ~Holiday_TransformationParameter();

  Holiday_TransformationParameter(const Holiday_TransformationParameter& from);

  inline Holiday_TransformationParameter& operator=(const Holiday_TransformationParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Holiday_TransformationParameter& default_instance();

  void Swap(Holiday_TransformationParameter* other);

  // implements Message ----------------------------------------------

  Holiday_TransformationParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Holiday_TransformationParameter& from);
  void MergeFrom(const Holiday_TransformationParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float scale = 1 [default = 1];
  inline bool has_scale() const;
  inline void clear_scale();
  static const int kScaleFieldNumber = 1;
  inline float scale() const;
  inline void set_scale(float value);

  // optional bool mirror = 2 [default = false];
  inline bool has_mirror() const;
  inline void clear_mirror();
  static const int kMirrorFieldNumber = 2;
  inline bool mirror() const;
  inline void set_mirror(bool value);

  // optional uint32 crop_height = 3 [default = 0];
  inline bool has_crop_height() const;
  inline void clear_crop_height();
  static const int kCropHeightFieldNumber = 3;
  inline ::google::protobuf::uint32 crop_height() const;
  inline void set_crop_height(::google::protobuf::uint32 value);

  // optional uint32 crop_width = 4 [default = 0];
  inline bool has_crop_width() const;
  inline void clear_crop_width();
  static const int kCropWidthFieldNumber = 4;
  inline ::google::protobuf::uint32 crop_width() const;
  inline void set_crop_width(::google::protobuf::uint32 value);

  // optional string mean_file = 5;
  inline bool has_mean_file() const;
  inline void clear_mean_file();
  static const int kMeanFileFieldNumber = 5;
  inline const ::std::string& mean_file() const;
  inline void set_mean_file(const ::std::string& value);
  inline void set_mean_file(const char* value);
  inline void set_mean_file(const char* value, size_t size);
  inline ::std::string* mutable_mean_file();
  inline ::std::string* release_mean_file();
  inline void set_allocated_mean_file(::std::string* mean_file);

  // repeated float mean_value = 6;
  inline int mean_value_size() const;
  inline void clear_mean_value();
  static const int kMeanValueFieldNumber = 6;
  inline float mean_value(int index) const;
  inline void set_mean_value(int index, float value);
  inline void add_mean_value(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      mean_value() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_mean_value();

  // optional bool force_color = 7 [default = false];
  inline bool has_force_color() const;
  inline void clear_force_color();
  static const int kForceColorFieldNumber = 7;
  inline bool force_color() const;
  inline void set_force_color(bool value);

  // optional bool force_gray = 8 [default = false];
  inline bool has_force_gray() const;
  inline void clear_force_gray();
  static const int kForceGrayFieldNumber = 8;
  inline bool force_gray() const;
  inline void set_force_gray(bool value);

  // @@protoc_insertion_point(class_scope:Holiday_TransformationParameter)
 private:
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_mirror();
  inline void clear_has_mirror();
  inline void set_has_crop_height();
  inline void clear_has_crop_height();
  inline void set_has_crop_width();
  inline void clear_has_crop_width();
  inline void set_has_mean_file();
  inline void clear_has_mean_file();
  inline void set_has_force_color();
  inline void clear_has_force_color();
  inline void set_has_force_gray();
  inline void clear_has_force_gray();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float scale_;
  ::google::protobuf::uint32 crop_height_;
  ::std::string* mean_file_;
  ::google::protobuf::uint32 crop_width_;
  bool mirror_;
  bool force_color_;
  bool force_gray_;
  ::google::protobuf::RepeatedField< float > mean_value_;
  friend void  protobuf_AddDesc_HolidayCNN_5fproto_2eproto();
  friend void protobuf_AssignDesc_HolidayCNN_5fproto_2eproto();
  friend void protobuf_ShutdownFile_HolidayCNN_5fproto_2eproto();

  void InitAsDefaultInstance();
  static Holiday_TransformationParameter* default_instance_;
};
// -------------------------------------------------------------------

class Holiday_InnerProductParameter : public ::google::protobuf::Message {
 public:
  Holiday_InnerProductParameter();
  virtual ~Holiday_InnerProductParameter();

  Holiday_InnerProductParameter(const Holiday_InnerProductParameter& from);

  inline Holiday_InnerProductParameter& operator=(const Holiday_InnerProductParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Holiday_InnerProductParameter& default_instance();

  void Swap(Holiday_InnerProductParameter* other);

  // implements Message ----------------------------------------------

  Holiday_InnerProductParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Holiday_InnerProductParameter& from);
  void MergeFrom(const Holiday_InnerProductParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 num_output = 1;
  inline bool has_num_output() const;
  inline void clear_num_output();
  static const int kNumOutputFieldNumber = 1;
  inline ::google::protobuf::uint32 num_output() const;
  inline void set_num_output(::google::protobuf::uint32 value);

  // optional int32 axis = 2 [default = 1];
  inline bool has_axis() const;
  inline void clear_axis();
  static const int kAxisFieldNumber = 2;
  inline ::google::protobuf::int32 axis() const;
  inline void set_axis(::google::protobuf::int32 value);

  // optional bool transpose = 3 [default = false];
  inline bool has_transpose() const;
  inline void clear_transpose();
  static const int kTransposeFieldNumber = 3;
  inline bool transpose() const;
  inline void set_transpose(bool value);

  // optional .Holiday_BlobProto bias_param = 4;
  inline bool has_bias_param() const;
  inline void clear_bias_param();
  static const int kBiasParamFieldNumber = 4;
  inline const ::Holiday_BlobProto& bias_param() const;
  inline ::Holiday_BlobProto* mutable_bias_param();
  inline ::Holiday_BlobProto* release_bias_param();
  inline void set_allocated_bias_param(::Holiday_BlobProto* bias_param);

  // optional .Holiday_BlobProto Inner_param = 5;
  inline bool has_inner_param() const;
  inline void clear_inner_param();
  static const int kInnerParamFieldNumber = 5;
  inline const ::Holiday_BlobProto& inner_param() const;
  inline ::Holiday_BlobProto* mutable_inner_param();
  inline ::Holiday_BlobProto* release_inner_param();
  inline void set_allocated_inner_param(::Holiday_BlobProto* inner_param);

  // @@protoc_insertion_point(class_scope:Holiday_InnerProductParameter)
 private:
  inline void set_has_num_output();
  inline void clear_has_num_output();
  inline void set_has_axis();
  inline void clear_has_axis();
  inline void set_has_transpose();
  inline void clear_has_transpose();
  inline void set_has_bias_param();
  inline void clear_has_bias_param();
  inline void set_has_inner_param();
  inline void clear_has_inner_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 num_output_;
  ::google::protobuf::int32 axis_;
  ::Holiday_BlobProto* bias_param_;
  ::Holiday_BlobProto* inner_param_;
  bool transpose_;
  friend void  protobuf_AddDesc_HolidayCNN_5fproto_2eproto();
  friend void protobuf_AssignDesc_HolidayCNN_5fproto_2eproto();
  friend void protobuf_ShutdownFile_HolidayCNN_5fproto_2eproto();

  void InitAsDefaultInstance();
  static Holiday_InnerProductParameter* default_instance_;
};
// -------------------------------------------------------------------

class Holiday_LRNParameter : public ::google::protobuf::Message {
 public:
  Holiday_LRNParameter();
  virtual ~Holiday_LRNParameter();

  Holiday_LRNParameter(const Holiday_LRNParameter& from);

  inline Holiday_LRNParameter& operator=(const Holiday_LRNParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Holiday_LRNParameter& default_instance();

  void Swap(Holiday_LRNParameter* other);

  // implements Message ----------------------------------------------

  Holiday_LRNParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Holiday_LRNParameter& from);
  void MergeFrom(const Holiday_LRNParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Holiday_LRNParameter_NormRegion NormRegion;
  static const NormRegion ACROSS_CHANNELS = Holiday_LRNParameter_NormRegion_ACROSS_CHANNELS;
  static const NormRegion WITHIN_CHANNEL = Holiday_LRNParameter_NormRegion_WITHIN_CHANNEL;
  static inline bool NormRegion_IsValid(int value) {
    return Holiday_LRNParameter_NormRegion_IsValid(value);
  }
  static const NormRegion NormRegion_MIN =
    Holiday_LRNParameter_NormRegion_NormRegion_MIN;
  static const NormRegion NormRegion_MAX =
    Holiday_LRNParameter_NormRegion_NormRegion_MAX;
  static const int NormRegion_ARRAYSIZE =
    Holiday_LRNParameter_NormRegion_NormRegion_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  NormRegion_descriptor() {
    return Holiday_LRNParameter_NormRegion_descriptor();
  }
  static inline const ::std::string& NormRegion_Name(NormRegion value) {
    return Holiday_LRNParameter_NormRegion_Name(value);
  }
  static inline bool NormRegion_Parse(const ::std::string& name,
      NormRegion* value) {
    return Holiday_LRNParameter_NormRegion_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 local_size = 1 [default = 5];
  inline bool has_local_size() const;
  inline void clear_local_size();
  static const int kLocalSizeFieldNumber = 1;
  inline ::google::protobuf::uint32 local_size() const;
  inline void set_local_size(::google::protobuf::uint32 value);

  // optional float alpha = 2 [default = 1];
  inline bool has_alpha() const;
  inline void clear_alpha();
  static const int kAlphaFieldNumber = 2;
  inline float alpha() const;
  inline void set_alpha(float value);

  // optional float beta = 3 [default = 0.75];
  inline bool has_beta() const;
  inline void clear_beta();
  static const int kBetaFieldNumber = 3;
  inline float beta() const;
  inline void set_beta(float value);

  // optional .Holiday_LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];
  inline bool has_norm_region() const;
  inline void clear_norm_region();
  static const int kNormRegionFieldNumber = 4;
  inline ::Holiday_LRNParameter_NormRegion norm_region() const;
  inline void set_norm_region(::Holiday_LRNParameter_NormRegion value);

  // optional float k = 5 [default = 1];
  inline bool has_k() const;
  inline void clear_k();
  static const int kKFieldNumber = 5;
  inline float k() const;
  inline void set_k(float value);

  // @@protoc_insertion_point(class_scope:Holiday_LRNParameter)
 private:
  inline void set_has_local_size();
  inline void clear_has_local_size();
  inline void set_has_alpha();
  inline void clear_has_alpha();
  inline void set_has_beta();
  inline void clear_has_beta();
  inline void set_has_norm_region();
  inline void clear_has_norm_region();
  inline void set_has_k();
  inline void clear_has_k();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 local_size_;
  float alpha_;
  float beta_;
  int norm_region_;
  float k_;
  friend void  protobuf_AddDesc_HolidayCNN_5fproto_2eproto();
  friend void protobuf_AssignDesc_HolidayCNN_5fproto_2eproto();
  friend void protobuf_ShutdownFile_HolidayCNN_5fproto_2eproto();

  void InitAsDefaultInstance();
  static Holiday_LRNParameter* default_instance_;
};
// -------------------------------------------------------------------

class Holiday_PoolingParameter : public ::google::protobuf::Message {
 public:
  Holiday_PoolingParameter();
  virtual ~Holiday_PoolingParameter();

  Holiday_PoolingParameter(const Holiday_PoolingParameter& from);

  inline Holiday_PoolingParameter& operator=(const Holiday_PoolingParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Holiday_PoolingParameter& default_instance();

  void Swap(Holiday_PoolingParameter* other);

  // implements Message ----------------------------------------------

  Holiday_PoolingParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Holiday_PoolingParameter& from);
  void MergeFrom(const Holiday_PoolingParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Holiday_PoolingParameter_PoolMethod PoolMethod;
  static const PoolMethod MAX = Holiday_PoolingParameter_PoolMethod_MAX;
  static const PoolMethod AVE = Holiday_PoolingParameter_PoolMethod_AVE;
  static const PoolMethod STOCHASTIC = Holiday_PoolingParameter_PoolMethod_STOCHASTIC;
  static inline bool PoolMethod_IsValid(int value) {
    return Holiday_PoolingParameter_PoolMethod_IsValid(value);
  }
  static const PoolMethod PoolMethod_MIN =
    Holiday_PoolingParameter_PoolMethod_PoolMethod_MIN;
  static const PoolMethod PoolMethod_MAX =
    Holiday_PoolingParameter_PoolMethod_PoolMethod_MAX;
  static const int PoolMethod_ARRAYSIZE =
    Holiday_PoolingParameter_PoolMethod_PoolMethod_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PoolMethod_descriptor() {
    return Holiday_PoolingParameter_PoolMethod_descriptor();
  }
  static inline const ::std::string& PoolMethod_Name(PoolMethod value) {
    return Holiday_PoolingParameter_PoolMethod_Name(value);
  }
  static inline bool PoolMethod_Parse(const ::std::string& name,
      PoolMethod* value) {
    return Holiday_PoolingParameter_PoolMethod_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Holiday_PoolingParameter.PoolMethod pool = 1 [default = MAX];
  inline bool has_pool() const;
  inline void clear_pool();
  static const int kPoolFieldNumber = 1;
  inline ::Holiday_PoolingParameter_PoolMethod pool() const;
  inline void set_pool(::Holiday_PoolingParameter_PoolMethod value);

  // optional uint32 pad_height = 2 [default = 0];
  inline bool has_pad_height() const;
  inline void clear_pad_height();
  static const int kPadHeightFieldNumber = 2;
  inline ::google::protobuf::uint32 pad_height() const;
  inline void set_pad_height(::google::protobuf::uint32 value);

  // optional uint32 pad_width = 3 [default = 0];
  inline bool has_pad_width() const;
  inline void clear_pad_width();
  static const int kPadWidthFieldNumber = 3;
  inline ::google::protobuf::uint32 pad_width() const;
  inline void set_pad_width(::google::protobuf::uint32 value);

  // optional uint32 kernel_height = 4;
  inline bool has_kernel_height() const;
  inline void clear_kernel_height();
  static const int kKernelHeightFieldNumber = 4;
  inline ::google::protobuf::uint32 kernel_height() const;
  inline void set_kernel_height(::google::protobuf::uint32 value);

  // optional uint32 kernel_width = 5;
  inline bool has_kernel_width() const;
  inline void clear_kernel_width();
  static const int kKernelWidthFieldNumber = 5;
  inline ::google::protobuf::uint32 kernel_width() const;
  inline void set_kernel_width(::google::protobuf::uint32 value);

  // optional uint32 stride_height = 6;
  inline bool has_stride_height() const;
  inline void clear_stride_height();
  static const int kStrideHeightFieldNumber = 6;
  inline ::google::protobuf::uint32 stride_height() const;
  inline void set_stride_height(::google::protobuf::uint32 value);

  // optional uint32 stride_width = 7;
  inline bool has_stride_width() const;
  inline void clear_stride_width();
  static const int kStrideWidthFieldNumber = 7;
  inline ::google::protobuf::uint32 stride_width() const;
  inline void set_stride_width(::google::protobuf::uint32 value);

  // optional bool global_pooling = 8 [default = false];
  inline bool has_global_pooling() const;
  inline void clear_global_pooling();
  static const int kGlobalPoolingFieldNumber = 8;
  inline bool global_pooling() const;
  inline void set_global_pooling(bool value);

  // optional bool valid = 9 [default = false];
  inline bool has_valid() const;
  inline void clear_valid();
  static const int kValidFieldNumber = 9;
  inline bool valid() const;
  inline void set_valid(bool value);

  // optional string tf_padding = 10;
  inline bool has_tf_padding() const;
  inline void clear_tf_padding();
  static const int kTfPaddingFieldNumber = 10;
  inline const ::std::string& tf_padding() const;
  inline void set_tf_padding(const ::std::string& value);
  inline void set_tf_padding(const char* value);
  inline void set_tf_padding(const char* value, size_t size);
  inline ::std::string* mutable_tf_padding();
  inline ::std::string* release_tf_padding();
  inline void set_allocated_tf_padding(::std::string* tf_padding);

  // @@protoc_insertion_point(class_scope:Holiday_PoolingParameter)
 private:
  inline void set_has_pool();
  inline void clear_has_pool();
  inline void set_has_pad_height();
  inline void clear_has_pad_height();
  inline void set_has_pad_width();
  inline void clear_has_pad_width();
  inline void set_has_kernel_height();
  inline void clear_has_kernel_height();
  inline void set_has_kernel_width();
  inline void clear_has_kernel_width();
  inline void set_has_stride_height();
  inline void clear_has_stride_height();
  inline void set_has_stride_width();
  inline void clear_has_stride_width();
  inline void set_has_global_pooling();
  inline void clear_has_global_pooling();
  inline void set_has_valid();
  inline void clear_has_valid();
  inline void set_has_tf_padding();
  inline void clear_has_tf_padding();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int pool_;
  ::google::protobuf::uint32 pad_height_;
  ::google::protobuf::uint32 pad_width_;
  ::google::protobuf::uint32 kernel_height_;
  ::google::protobuf::uint32 kernel_width_;
  ::google::protobuf::uint32 stride_height_;
  ::google::protobuf::uint32 stride_width_;
  bool global_pooling_;
  bool valid_;
  ::std::string* tf_padding_;
  friend void  protobuf_AddDesc_HolidayCNN_5fproto_2eproto();
  friend void protobuf_AssignDesc_HolidayCNN_5fproto_2eproto();
  friend void protobuf_ShutdownFile_HolidayCNN_5fproto_2eproto();

  void InitAsDefaultInstance();
  static Holiday_PoolingParameter* default_instance_;
};
// -------------------------------------------------------------------

class Holiday_PowerParameter : public ::google::protobuf::Message {
 public:
  Holiday_PowerParameter();
  virtual ~Holiday_PowerParameter();

  Holiday_PowerParameter(const Holiday_PowerParameter& from);

  inline Holiday_PowerParameter& operator=(const Holiday_PowerParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Holiday_PowerParameter& default_instance();

  void Swap(Holiday_PowerParameter* other);

  // implements Message ----------------------------------------------

  Holiday_PowerParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Holiday_PowerParameter& from);
  void MergeFrom(const Holiday_PowerParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float power = 1 [default = 1];
  inline bool has_power() const;
  inline void clear_power();
  static const int kPowerFieldNumber = 1;
  inline float power() const;
  inline void set_power(float value);

  // optional float scale = 2 [default = 1];
  inline bool has_scale() const;
  inline void clear_scale();
  static const int kScaleFieldNumber = 2;
  inline float scale() const;
  inline void set_scale(float value);

  // optional float shift = 3 [default = 0];
  inline bool has_shift() const;
  inline void clear_shift();
  static const int kShiftFieldNumber = 3;
  inline float shift() const;
  inline void set_shift(float value);

  // @@protoc_insertion_point(class_scope:Holiday_PowerParameter)
 private:
  inline void set_has_power();
  inline void clear_has_power();
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_shift();
  inline void clear_has_shift();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float power_;
  float scale_;
  float shift_;
  friend void  protobuf_AddDesc_HolidayCNN_5fproto_2eproto();
  friend void protobuf_AssignDesc_HolidayCNN_5fproto_2eproto();
  friend void protobuf_ShutdownFile_HolidayCNN_5fproto_2eproto();

  void InitAsDefaultInstance();
  static Holiday_PowerParameter* default_instance_;
};
// -------------------------------------------------------------------

class Holiday_ReLUParameter : public ::google::protobuf::Message {
 public:
  Holiday_ReLUParameter();
  virtual ~Holiday_ReLUParameter();

  Holiday_ReLUParameter(const Holiday_ReLUParameter& from);

  inline Holiday_ReLUParameter& operator=(const Holiday_ReLUParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Holiday_ReLUParameter& default_instance();

  void Swap(Holiday_ReLUParameter* other);

  // implements Message ----------------------------------------------

  Holiday_ReLUParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Holiday_ReLUParameter& from);
  void MergeFrom(const Holiday_ReLUParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float negative_slope = 1 [default = 0];
  inline bool has_negative_slope() const;
  inline void clear_negative_slope();
  static const int kNegativeSlopeFieldNumber = 1;
  inline float negative_slope() const;
  inline void set_negative_slope(float value);

  // optional float max = 2;
  inline bool has_max() const;
  inline void clear_max();
  static const int kMaxFieldNumber = 2;
  inline float max() const;
  inline void set_max(float value);

  // @@protoc_insertion_point(class_scope:Holiday_ReLUParameter)
 private:
  inline void set_has_negative_slope();
  inline void clear_has_negative_slope();
  inline void set_has_max();
  inline void clear_has_max();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float negative_slope_;
  float max_;
  friend void  protobuf_AddDesc_HolidayCNN_5fproto_2eproto();
  friend void protobuf_AssignDesc_HolidayCNN_5fproto_2eproto();
  friend void protobuf_ShutdownFile_HolidayCNN_5fproto_2eproto();

  void InitAsDefaultInstance();
  static Holiday_ReLUParameter* default_instance_;
};
// -------------------------------------------------------------------

class Holiday_SoftmaxParameter : public ::google::protobuf::Message {
 public:
  Holiday_SoftmaxParameter();
  virtual ~Holiday_SoftmaxParameter();

  Holiday_SoftmaxParameter(const Holiday_SoftmaxParameter& from);

  inline Holiday_SoftmaxParameter& operator=(const Holiday_SoftmaxParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Holiday_SoftmaxParameter& default_instance();

  void Swap(Holiday_SoftmaxParameter* other);

  // implements Message ----------------------------------------------

  Holiday_SoftmaxParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Holiday_SoftmaxParameter& from);
  void MergeFrom(const Holiday_SoftmaxParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 axis = 1 [default = 1];
  inline bool has_axis() const;
  inline void clear_axis();
  static const int kAxisFieldNumber = 1;
  inline ::google::protobuf::int32 axis() const;
  inline void set_axis(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Holiday_SoftmaxParameter)
 private:
  inline void set_has_axis();
  inline void clear_has_axis();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 axis_;
  friend void  protobuf_AddDesc_HolidayCNN_5fproto_2eproto();
  friend void protobuf_AssignDesc_HolidayCNN_5fproto_2eproto();
  friend void protobuf_ShutdownFile_HolidayCNN_5fproto_2eproto();

  void InitAsDefaultInstance();
  static Holiday_SoftmaxParameter* default_instance_;
};
// -------------------------------------------------------------------

class Holiday_SliceParameter : public ::google::protobuf::Message {
 public:
  Holiday_SliceParameter();
  virtual ~Holiday_SliceParameter();

  Holiday_SliceParameter(const Holiday_SliceParameter& from);

  inline Holiday_SliceParameter& operator=(const Holiday_SliceParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Holiday_SliceParameter& default_instance();

  void Swap(Holiday_SliceParameter* other);

  // implements Message ----------------------------------------------

  Holiday_SliceParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Holiday_SliceParameter& from);
  void MergeFrom(const Holiday_SliceParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 axis = 1 [default = 1];
  inline bool has_axis() const;
  inline void clear_axis();
  static const int kAxisFieldNumber = 1;
  inline ::google::protobuf::int32 axis() const;
  inline void set_axis(::google::protobuf::int32 value);

  // repeated uint32 slice_point = 2;
  inline int slice_point_size() const;
  inline void clear_slice_point();
  static const int kSlicePointFieldNumber = 2;
  inline ::google::protobuf::uint32 slice_point(int index) const;
  inline void set_slice_point(int index, ::google::protobuf::uint32 value);
  inline void add_slice_point(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      slice_point() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_slice_point();

  // optional uint32 slice_dim = 3 [default = 1];
  inline bool has_slice_dim() const;
  inline void clear_slice_dim();
  static const int kSliceDimFieldNumber = 3;
  inline ::google::protobuf::uint32 slice_dim() const;
  inline void set_slice_dim(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Holiday_SliceParameter)
 private:
  inline void set_has_axis();
  inline void clear_has_axis();
  inline void set_has_slice_dim();
  inline void clear_has_slice_dim();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > slice_point_;
  ::google::protobuf::int32 axis_;
  ::google::protobuf::uint32 slice_dim_;
  friend void  protobuf_AddDesc_HolidayCNN_5fproto_2eproto();
  friend void protobuf_AssignDesc_HolidayCNN_5fproto_2eproto();
  friend void protobuf_ShutdownFile_HolidayCNN_5fproto_2eproto();

  void InitAsDefaultInstance();
  static Holiday_SliceParameter* default_instance_;
};
// -------------------------------------------------------------------

class Holiday_SigmoidParameter : public ::google::protobuf::Message {
 public:
  Holiday_SigmoidParameter();
  virtual ~Holiday_SigmoidParameter();

  Holiday_SigmoidParameter(const Holiday_SigmoidParameter& from);

  inline Holiday_SigmoidParameter& operator=(const Holiday_SigmoidParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Holiday_SigmoidParameter& default_instance();

  void Swap(Holiday_SigmoidParameter* other);

  // implements Message ----------------------------------------------

  Holiday_SigmoidParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Holiday_SigmoidParameter& from);
  void MergeFrom(const Holiday_SigmoidParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Holiday_SigmoidParameter)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_HolidayCNN_5fproto_2eproto();
  friend void protobuf_AssignDesc_HolidayCNN_5fproto_2eproto();
  friend void protobuf_ShutdownFile_HolidayCNN_5fproto_2eproto();

  void InitAsDefaultInstance();
  static Holiday_SigmoidParameter* default_instance_;
};
// -------------------------------------------------------------------

class Holiday_SpaceToBatchNDLayer : public ::google::protobuf::Message {
 public:
  Holiday_SpaceToBatchNDLayer();
  virtual ~Holiday_SpaceToBatchNDLayer();

  Holiday_SpaceToBatchNDLayer(const Holiday_SpaceToBatchNDLayer& from);

  inline Holiday_SpaceToBatchNDLayer& operator=(const Holiday_SpaceToBatchNDLayer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Holiday_SpaceToBatchNDLayer& default_instance();

  void Swap(Holiday_SpaceToBatchNDLayer* other);

  // implements Message ----------------------------------------------

  Holiday_SpaceToBatchNDLayer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Holiday_SpaceToBatchNDLayer& from);
  void MergeFrom(const Holiday_SpaceToBatchNDLayer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 block_shape = 1;
  inline int block_shape_size() const;
  inline void clear_block_shape();
  static const int kBlockShapeFieldNumber = 1;
  inline ::google::protobuf::int32 block_shape(int index) const;
  inline void set_block_shape(int index, ::google::protobuf::int32 value);
  inline void add_block_shape(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      block_shape() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_block_shape();

  // repeated int32 paddings = 2;
  inline int paddings_size() const;
  inline void clear_paddings();
  static const int kPaddingsFieldNumber = 2;
  inline ::google::protobuf::int32 paddings(int index) const;
  inline void set_paddings(int index, ::google::protobuf::int32 value);
  inline void add_paddings(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      paddings() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_paddings();

  // @@protoc_insertion_point(class_scope:Holiday_SpaceToBatchNDLayer)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > block_shape_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > paddings_;
  friend void  protobuf_AddDesc_HolidayCNN_5fproto_2eproto();
  friend void protobuf_AssignDesc_HolidayCNN_5fproto_2eproto();
  friend void protobuf_ShutdownFile_HolidayCNN_5fproto_2eproto();

  void InitAsDefaultInstance();
  static Holiday_SpaceToBatchNDLayer* default_instance_;
};
// -------------------------------------------------------------------

class Holiday_BatchToSpaceNDLayer : public ::google::protobuf::Message {
 public:
  Holiday_BatchToSpaceNDLayer();
  virtual ~Holiday_BatchToSpaceNDLayer();

  Holiday_BatchToSpaceNDLayer(const Holiday_BatchToSpaceNDLayer& from);

  inline Holiday_BatchToSpaceNDLayer& operator=(const Holiday_BatchToSpaceNDLayer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Holiday_BatchToSpaceNDLayer& default_instance();

  void Swap(Holiday_BatchToSpaceNDLayer* other);

  // implements Message ----------------------------------------------

  Holiday_BatchToSpaceNDLayer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Holiday_BatchToSpaceNDLayer& from);
  void MergeFrom(const Holiday_BatchToSpaceNDLayer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 block_shape = 1;
  inline int block_shape_size() const;
  inline void clear_block_shape();
  static const int kBlockShapeFieldNumber = 1;
  inline ::google::protobuf::int32 block_shape(int index) const;
  inline void set_block_shape(int index, ::google::protobuf::int32 value);
  inline void add_block_shape(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      block_shape() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_block_shape();

  // repeated int32 crops = 2;
  inline int crops_size() const;
  inline void clear_crops();
  static const int kCropsFieldNumber = 2;
  inline ::google::protobuf::int32 crops(int index) const;
  inline void set_crops(int index, ::google::protobuf::int32 value);
  inline void add_crops(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      crops() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_crops();

  // @@protoc_insertion_point(class_scope:Holiday_BatchToSpaceNDLayer)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > block_shape_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > crops_;
  friend void  protobuf_AddDesc_HolidayCNN_5fproto_2eproto();
  friend void protobuf_AssignDesc_HolidayCNN_5fproto_2eproto();
  friend void protobuf_ShutdownFile_HolidayCNN_5fproto_2eproto();

  void InitAsDefaultInstance();
  static Holiday_BatchToSpaceNDLayer* default_instance_;
};
// -------------------------------------------------------------------

class Holiday_ReshapeLayer : public ::google::protobuf::Message {
 public:
  Holiday_ReshapeLayer();
  virtual ~Holiday_ReshapeLayer();

  Holiday_ReshapeLayer(const Holiday_ReshapeLayer& from);

  inline Holiday_ReshapeLayer& operator=(const Holiday_ReshapeLayer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Holiday_ReshapeLayer& default_instance();

  void Swap(Holiday_ReshapeLayer* other);

  // implements Message ----------------------------------------------

  Holiday_ReshapeLayer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Holiday_ReshapeLayer& from);
  void MergeFrom(const Holiday_ReshapeLayer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 shape = 1;
  inline int shape_size() const;
  inline void clear_shape();
  static const int kShapeFieldNumber = 1;
  inline ::google::protobuf::int32 shape(int index) const;
  inline void set_shape(int index, ::google::protobuf::int32 value);
  inline void add_shape(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      shape() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_shape();

  // repeated int32 permute = 2;
  inline int permute_size() const;
  inline void clear_permute();
  static const int kPermuteFieldNumber = 2;
  inline ::google::protobuf::int32 permute(int index) const;
  inline void set_permute(int index, ::google::protobuf::int32 value);
  inline void add_permute(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      permute() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_permute();

  // @@protoc_insertion_point(class_scope:Holiday_ReshapeLayer)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > shape_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > permute_;
  friend void  protobuf_AddDesc_HolidayCNN_5fproto_2eproto();
  friend void protobuf_AssignDesc_HolidayCNN_5fproto_2eproto();
  friend void protobuf_ShutdownFile_HolidayCNN_5fproto_2eproto();

  void InitAsDefaultInstance();
  static Holiday_ReshapeLayer* default_instance_;
};
// -------------------------------------------------------------------

class Holiday_RealMulLayer : public ::google::protobuf::Message {
 public:
  Holiday_RealMulLayer();
  virtual ~Holiday_RealMulLayer();

  Holiday_RealMulLayer(const Holiday_RealMulLayer& from);

  inline Holiday_RealMulLayer& operator=(const Holiday_RealMulLayer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Holiday_RealMulLayer& default_instance();

  void Swap(Holiday_RealMulLayer* other);

  // implements Message ----------------------------------------------

  Holiday_RealMulLayer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Holiday_RealMulLayer& from);
  void MergeFrom(const Holiday_RealMulLayer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Holiday_BlobProto y = 1;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 1;
  inline const ::Holiday_BlobProto& y() const;
  inline ::Holiday_BlobProto* mutable_y();
  inline ::Holiday_BlobProto* release_y();
  inline void set_allocated_y(::Holiday_BlobProto* y);

  // @@protoc_insertion_point(class_scope:Holiday_RealMulLayer)
 private:
  inline void set_has_y();
  inline void clear_has_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Holiday_BlobProto* y_;
  friend void  protobuf_AddDesc_HolidayCNN_5fproto_2eproto();
  friend void protobuf_AssignDesc_HolidayCNN_5fproto_2eproto();
  friend void protobuf_ShutdownFile_HolidayCNN_5fproto_2eproto();

  void InitAsDefaultInstance();
  static Holiday_RealMulLayer* default_instance_;
};
// -------------------------------------------------------------------

class Holiday_LayerParameter : public ::google::protobuf::Message {
 public:
  Holiday_LayerParameter();
  virtual ~Holiday_LayerParameter();

  Holiday_LayerParameter(const Holiday_LayerParameter& from);

  inline Holiday_LayerParameter& operator=(const Holiday_LayerParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Holiday_LayerParameter& default_instance();

  void Swap(Holiday_LayerParameter* other);

  // implements Message ----------------------------------------------

  Holiday_LayerParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Holiday_LayerParameter& from);
  void MergeFrom(const Holiday_LayerParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string bottom = 1;
  inline int bottom_size() const;
  inline void clear_bottom();
  static const int kBottomFieldNumber = 1;
  inline const ::std::string& bottom(int index) const;
  inline ::std::string* mutable_bottom(int index);
  inline void set_bottom(int index, const ::std::string& value);
  inline void set_bottom(int index, const char* value);
  inline void set_bottom(int index, const char* value, size_t size);
  inline ::std::string* add_bottom();
  inline void add_bottom(const ::std::string& value);
  inline void add_bottom(const char* value);
  inline void add_bottom(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& bottom() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_bottom();

  // repeated string top = 2;
  inline int top_size() const;
  inline void clear_top();
  static const int kTopFieldNumber = 2;
  inline const ::std::string& top(int index) const;
  inline ::std::string* mutable_top(int index);
  inline void set_top(int index, const ::std::string& value);
  inline void set_top(int index, const char* value);
  inline void set_top(int index, const char* value, size_t size);
  inline ::std::string* add_top();
  inline void add_top(const ::std::string& value);
  inline void add_top(const char* value);
  inline void add_top(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& top() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_top();

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // repeated uint32 top_index = 5;
  inline int top_index_size() const;
  inline void clear_top_index();
  static const int kTopIndexFieldNumber = 5;
  inline ::google::protobuf::uint32 top_index(int index) const;
  inline void set_top_index(int index, ::google::protobuf::uint32 value);
  inline void add_top_index(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      top_index() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_top_index();

  // repeated uint32 bottom_index = 6;
  inline int bottom_index_size() const;
  inline void clear_bottom_index();
  static const int kBottomIndexFieldNumber = 6;
  inline ::google::protobuf::uint32 bottom_index(int index) const;
  inline void set_bottom_index(int index, ::google::protobuf::uint32 value);
  inline void add_bottom_index(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      bottom_index() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_bottom_index();

  // optional .Holiday_ConcatParameter concat_param = 7;
  inline bool has_concat_param() const;
  inline void clear_concat_param();
  static const int kConcatParamFieldNumber = 7;
  inline const ::Holiday_ConcatParameter& concat_param() const;
  inline ::Holiday_ConcatParameter* mutable_concat_param();
  inline ::Holiday_ConcatParameter* release_concat_param();
  inline void set_allocated_concat_param(::Holiday_ConcatParameter* concat_param);

  // optional .Holiday_ConvolutionParameter convolution_param = 8;
  inline bool has_convolution_param() const;
  inline void clear_convolution_param();
  static const int kConvolutionParamFieldNumber = 8;
  inline const ::Holiday_ConvolutionParameter& convolution_param() const;
  inline ::Holiday_ConvolutionParameter* mutable_convolution_param();
  inline ::Holiday_ConvolutionParameter* release_convolution_param();
  inline void set_allocated_convolution_param(::Holiday_ConvolutionParameter* convolution_param);

  // optional .Holiday_EltwiseParameter eltwise_param = 9;
  inline bool has_eltwise_param() const;
  inline void clear_eltwise_param();
  static const int kEltwiseParamFieldNumber = 9;
  inline const ::Holiday_EltwiseParameter& eltwise_param() const;
  inline ::Holiday_EltwiseParameter* mutable_eltwise_param();
  inline ::Holiday_EltwiseParameter* release_eltwise_param();
  inline void set_allocated_eltwise_param(::Holiday_EltwiseParameter* eltwise_param);

  // optional .Holiday_ExpParameter exp_param = 10;
  inline bool has_exp_param() const;
  inline void clear_exp_param();
  static const int kExpParamFieldNumber = 10;
  inline const ::Holiday_ExpParameter& exp_param() const;
  inline ::Holiday_ExpParameter* mutable_exp_param();
  inline ::Holiday_ExpParameter* release_exp_param();
  inline void set_allocated_exp_param(::Holiday_ExpParameter* exp_param);

  // optional .Holiday_InnerProductParameter inner_product_param = 11;
  inline bool has_inner_product_param() const;
  inline void clear_inner_product_param();
  static const int kInnerProductParamFieldNumber = 11;
  inline const ::Holiday_InnerProductParameter& inner_product_param() const;
  inline ::Holiday_InnerProductParameter* mutable_inner_product_param();
  inline ::Holiday_InnerProductParameter* release_inner_product_param();
  inline void set_allocated_inner_product_param(::Holiday_InnerProductParameter* inner_product_param);

  // optional .Holiday_LRNParameter lrn_param = 12;
  inline bool has_lrn_param() const;
  inline void clear_lrn_param();
  static const int kLrnParamFieldNumber = 12;
  inline const ::Holiday_LRNParameter& lrn_param() const;
  inline ::Holiday_LRNParameter* mutable_lrn_param();
  inline ::Holiday_LRNParameter* release_lrn_param();
  inline void set_allocated_lrn_param(::Holiday_LRNParameter* lrn_param);

  // optional .Holiday_MemoryDataParameterProcess memory_data_param = 13;
  inline bool has_memory_data_param() const;
  inline void clear_memory_data_param();
  static const int kMemoryDataParamFieldNumber = 13;
  inline const ::Holiday_MemoryDataParameterProcess& memory_data_param() const;
  inline ::Holiday_MemoryDataParameterProcess* mutable_memory_data_param();
  inline ::Holiday_MemoryDataParameterProcess* release_memory_data_param();
  inline void set_allocated_memory_data_param(::Holiday_MemoryDataParameterProcess* memory_data_param);

  // optional .Holiday_PoolingParameter pooling_param = 14;
  inline bool has_pooling_param() const;
  inline void clear_pooling_param();
  static const int kPoolingParamFieldNumber = 14;
  inline const ::Holiday_PoolingParameter& pooling_param() const;
  inline ::Holiday_PoolingParameter* mutable_pooling_param();
  inline ::Holiday_PoolingParameter* release_pooling_param();
  inline void set_allocated_pooling_param(::Holiday_PoolingParameter* pooling_param);

  // optional .Holiday_PowerParameter power_param = 15;
  inline bool has_power_param() const;
  inline void clear_power_param();
  static const int kPowerParamFieldNumber = 15;
  inline const ::Holiday_PowerParameter& power_param() const;
  inline ::Holiday_PowerParameter* mutable_power_param();
  inline ::Holiday_PowerParameter* release_power_param();
  inline void set_allocated_power_param(::Holiday_PowerParameter* power_param);

  // optional .Holiday_ReLUParameter relu_param = 16;
  inline bool has_relu_param() const;
  inline void clear_relu_param();
  static const int kReluParamFieldNumber = 16;
  inline const ::Holiday_ReLUParameter& relu_param() const;
  inline ::Holiday_ReLUParameter* mutable_relu_param();
  inline ::Holiday_ReLUParameter* release_relu_param();
  inline void set_allocated_relu_param(::Holiday_ReLUParameter* relu_param);

  // optional .Holiday_SoftmaxParameter softmax_param = 17;
  inline bool has_softmax_param() const;
  inline void clear_softmax_param();
  static const int kSoftmaxParamFieldNumber = 17;
  inline const ::Holiday_SoftmaxParameter& softmax_param() const;
  inline ::Holiday_SoftmaxParameter* mutable_softmax_param();
  inline ::Holiday_SoftmaxParameter* release_softmax_param();
  inline void set_allocated_softmax_param(::Holiday_SoftmaxParameter* softmax_param);

  // optional .Holiday_SliceParameter slice_param = 18;
  inline bool has_slice_param() const;
  inline void clear_slice_param();
  static const int kSliceParamFieldNumber = 18;
  inline const ::Holiday_SliceParameter& slice_param() const;
  inline ::Holiday_SliceParameter* mutable_slice_param();
  inline ::Holiday_SliceParameter* release_slice_param();
  inline void set_allocated_slice_param(::Holiday_SliceParameter* slice_param);

  // optional .Holiday_TransformationParameter transform_param = 19;
  inline bool has_transform_param() const;
  inline void clear_transform_param();
  static const int kTransformParamFieldNumber = 19;
  inline const ::Holiday_TransformationParameter& transform_param() const;
  inline ::Holiday_TransformationParameter* mutable_transform_param();
  inline ::Holiday_TransformationParameter* release_transform_param();
  inline void set_allocated_transform_param(::Holiday_TransformationParameter* transform_param);

  // optional .Holiday_BatchNormliseParameter batchNormlise_param = 20;
  inline bool has_batchnormlise_param() const;
  inline void clear_batchnormlise_param();
  static const int kBatchNormliseParamFieldNumber = 20;
  inline const ::Holiday_BatchNormliseParameter& batchnormlise_param() const;
  inline ::Holiday_BatchNormliseParameter* mutable_batchnormlise_param();
  inline ::Holiday_BatchNormliseParameter* release_batchnormlise_param();
  inline void set_allocated_batchnormlise_param(::Holiday_BatchNormliseParameter* batchnormlise_param);

  // optional .Holiday_ScaleParameter scale_param = 21;
  inline bool has_scale_param() const;
  inline void clear_scale_param();
  static const int kScaleParamFieldNumber = 21;
  inline const ::Holiday_ScaleParameter& scale_param() const;
  inline ::Holiday_ScaleParameter* mutable_scale_param();
  inline ::Holiday_ScaleParameter* release_scale_param();
  inline void set_allocated_scale_param(::Holiday_ScaleParameter* scale_param);

  // optional .Holiday_PreluParameter prelu_param = 22;
  inline bool has_prelu_param() const;
  inline void clear_prelu_param();
  static const int kPreluParamFieldNumber = 22;
  inline const ::Holiday_PreluParameter& prelu_param() const;
  inline ::Holiday_PreluParameter* mutable_prelu_param();
  inline ::Holiday_PreluParameter* release_prelu_param();
  inline void set_allocated_prelu_param(::Holiday_PreluParameter* prelu_param);

  // optional .Holiday_CropParameter crop_parameter = 23;
  inline bool has_crop_parameter() const;
  inline void clear_crop_parameter();
  static const int kCropParameterFieldNumber = 23;
  inline const ::Holiday_CropParameter& crop_parameter() const;
  inline ::Holiday_CropParameter* mutable_crop_parameter();
  inline ::Holiday_CropParameter* release_crop_parameter();
  inline void set_allocated_crop_parameter(::Holiday_CropParameter* crop_parameter);

  // optional .Holiday_SigmoidParameter sigmoid_param = 24;
  inline bool has_sigmoid_param() const;
  inline void clear_sigmoid_param();
  static const int kSigmoidParamFieldNumber = 24;
  inline const ::Holiday_SigmoidParameter& sigmoid_param() const;
  inline ::Holiday_SigmoidParameter* mutable_sigmoid_param();
  inline ::Holiday_SigmoidParameter* release_sigmoid_param();
  inline void set_allocated_sigmoid_param(::Holiday_SigmoidParameter* sigmoid_param);

  // optional .Holiday_SpaceToBatchNDLayer spaceToBatchND_param = 25;
  inline bool has_spacetobatchnd_param() const;
  inline void clear_spacetobatchnd_param();
  static const int kSpaceToBatchNDParamFieldNumber = 25;
  inline const ::Holiday_SpaceToBatchNDLayer& spacetobatchnd_param() const;
  inline ::Holiday_SpaceToBatchNDLayer* mutable_spacetobatchnd_param();
  inline ::Holiday_SpaceToBatchNDLayer* release_spacetobatchnd_param();
  inline void set_allocated_spacetobatchnd_param(::Holiday_SpaceToBatchNDLayer* spacetobatchnd_param);

  // optional .Holiday_BatchToSpaceNDLayer batchToSpaceND_param = 26;
  inline bool has_batchtospacend_param() const;
  inline void clear_batchtospacend_param();
  static const int kBatchToSpaceNDParamFieldNumber = 26;
  inline const ::Holiday_BatchToSpaceNDLayer& batchtospacend_param() const;
  inline ::Holiday_BatchToSpaceNDLayer* mutable_batchtospacend_param();
  inline ::Holiday_BatchToSpaceNDLayer* release_batchtospacend_param();
  inline void set_allocated_batchtospacend_param(::Holiday_BatchToSpaceNDLayer* batchtospacend_param);

  // optional .Holiday_ReshapeLayer reshape_param = 27;
  inline bool has_reshape_param() const;
  inline void clear_reshape_param();
  static const int kReshapeParamFieldNumber = 27;
  inline const ::Holiday_ReshapeLayer& reshape_param() const;
  inline ::Holiday_ReshapeLayer* mutable_reshape_param();
  inline ::Holiday_ReshapeLayer* release_reshape_param();
  inline void set_allocated_reshape_param(::Holiday_ReshapeLayer* reshape_param);

  // optional .Holiday_RealMulLayer real_mul_param = 28;
  inline bool has_real_mul_param() const;
  inline void clear_real_mul_param();
  static const int kRealMulParamFieldNumber = 28;
  inline const ::Holiday_RealMulLayer& real_mul_param() const;
  inline ::Holiday_RealMulLayer* mutable_real_mul_param();
  inline ::Holiday_RealMulLayer* release_real_mul_param();
  inline void set_allocated_real_mul_param(::Holiday_RealMulLayer* real_mul_param);

  // optional uint32 layer_index = 30;
  inline bool has_layer_index() const;
  inline void clear_layer_index();
  static const int kLayerIndexFieldNumber = 30;
  inline ::google::protobuf::uint32 layer_index() const;
  inline void set_layer_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Holiday_LayerParameter)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_concat_param();
  inline void clear_has_concat_param();
  inline void set_has_convolution_param();
  inline void clear_has_convolution_param();
  inline void set_has_eltwise_param();
  inline void clear_has_eltwise_param();
  inline void set_has_exp_param();
  inline void clear_has_exp_param();
  inline void set_has_inner_product_param();
  inline void clear_has_inner_product_param();
  inline void set_has_lrn_param();
  inline void clear_has_lrn_param();
  inline void set_has_memory_data_param();
  inline void clear_has_memory_data_param();
  inline void set_has_pooling_param();
  inline void clear_has_pooling_param();
  inline void set_has_power_param();
  inline void clear_has_power_param();
  inline void set_has_relu_param();
  inline void clear_has_relu_param();
  inline void set_has_softmax_param();
  inline void clear_has_softmax_param();
  inline void set_has_slice_param();
  inline void clear_has_slice_param();
  inline void set_has_transform_param();
  inline void clear_has_transform_param();
  inline void set_has_batchnormlise_param();
  inline void clear_has_batchnormlise_param();
  inline void set_has_scale_param();
  inline void clear_has_scale_param();
  inline void set_has_prelu_param();
  inline void clear_has_prelu_param();
  inline void set_has_crop_parameter();
  inline void clear_has_crop_parameter();
  inline void set_has_sigmoid_param();
  inline void clear_has_sigmoid_param();
  inline void set_has_spacetobatchnd_param();
  inline void clear_has_spacetobatchnd_param();
  inline void set_has_batchtospacend_param();
  inline void clear_has_batchtospacend_param();
  inline void set_has_reshape_param();
  inline void clear_has_reshape_param();
  inline void set_has_real_mul_param();
  inline void clear_has_real_mul_param();
  inline void set_has_layer_index();
  inline void clear_has_layer_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> bottom_;
  ::google::protobuf::RepeatedPtrField< ::std::string> top_;
  ::std::string* name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > top_index_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > bottom_index_;
  ::Holiday_ConcatParameter* concat_param_;
  ::Holiday_ConvolutionParameter* convolution_param_;
  ::Holiday_EltwiseParameter* eltwise_param_;
  ::Holiday_ExpParameter* exp_param_;
  ::Holiday_InnerProductParameter* inner_product_param_;
  ::Holiday_LRNParameter* lrn_param_;
  ::Holiday_MemoryDataParameterProcess* memory_data_param_;
  ::Holiday_PoolingParameter* pooling_param_;
  ::Holiday_PowerParameter* power_param_;
  ::Holiday_ReLUParameter* relu_param_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 layer_index_;
  ::Holiday_SoftmaxParameter* softmax_param_;
  ::Holiday_SliceParameter* slice_param_;
  ::Holiday_TransformationParameter* transform_param_;
  ::Holiday_BatchNormliseParameter* batchnormlise_param_;
  ::Holiday_ScaleParameter* scale_param_;
  ::Holiday_PreluParameter* prelu_param_;
  ::Holiday_CropParameter* crop_parameter_;
  ::Holiday_SigmoidParameter* sigmoid_param_;
  ::Holiday_SpaceToBatchNDLayer* spacetobatchnd_param_;
  ::Holiday_BatchToSpaceNDLayer* batchtospacend_param_;
  ::Holiday_ReshapeLayer* reshape_param_;
  ::Holiday_RealMulLayer* real_mul_param_;
  friend void  protobuf_AddDesc_HolidayCNN_5fproto_2eproto();
  friend void protobuf_AssignDesc_HolidayCNN_5fproto_2eproto();
  friend void protobuf_ShutdownFile_HolidayCNN_5fproto_2eproto();

  void InitAsDefaultInstance();
  static Holiday_LayerParameter* default_instance_;
};
// ===================================================================


// ===================================================================

// Holiday_BlobShape

// repeated int64 dim = 1;
inline int Holiday_BlobShape::dim_size() const {
  return dim_.size();
}
inline void Holiday_BlobShape::clear_dim() {
  dim_.Clear();
}
inline ::google::protobuf::int64 Holiday_BlobShape::dim(int index) const {
  // @@protoc_insertion_point(field_get:Holiday_BlobShape.dim)
  return dim_.Get(index);
}
inline void Holiday_BlobShape::set_dim(int index, ::google::protobuf::int64 value) {
  dim_.Set(index, value);
  // @@protoc_insertion_point(field_set:Holiday_BlobShape.dim)
}
inline void Holiday_BlobShape::add_dim(::google::protobuf::int64 value) {
  dim_.Add(value);
  // @@protoc_insertion_point(field_add:Holiday_BlobShape.dim)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
Holiday_BlobShape::dim() const {
  // @@protoc_insertion_point(field_list:Holiday_BlobShape.dim)
  return dim_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
Holiday_BlobShape::mutable_dim() {
  // @@protoc_insertion_point(field_mutable_list:Holiday_BlobShape.dim)
  return &dim_;
}

// -------------------------------------------------------------------

// Holiday_BlobProto

// optional .Holiday_BlobShape shape = 1;
inline bool Holiday_BlobProto::has_shape() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Holiday_BlobProto::set_has_shape() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Holiday_BlobProto::clear_has_shape() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Holiday_BlobProto::clear_shape() {
  if (shape_ != NULL) shape_->::Holiday_BlobShape::Clear();
  clear_has_shape();
}
inline const ::Holiday_BlobShape& Holiday_BlobProto::shape() const {
  // @@protoc_insertion_point(field_get:Holiday_BlobProto.shape)
  return shape_ != NULL ? *shape_ : *default_instance_->shape_;
}
inline ::Holiday_BlobShape* Holiday_BlobProto::mutable_shape() {
  set_has_shape();
  if (shape_ == NULL) shape_ = new ::Holiday_BlobShape;
  // @@protoc_insertion_point(field_mutable:Holiday_BlobProto.shape)
  return shape_;
}
inline ::Holiday_BlobShape* Holiday_BlobProto::release_shape() {
  clear_has_shape();
  ::Holiday_BlobShape* temp = shape_;
  shape_ = NULL;
  return temp;
}
inline void Holiday_BlobProto::set_allocated_shape(::Holiday_BlobShape* shape) {
  delete shape_;
  shape_ = shape;
  if (shape) {
    set_has_shape();
  } else {
    clear_has_shape();
  }
  // @@protoc_insertion_point(field_set_allocated:Holiday_BlobProto.shape)
}

// repeated float data = 2;
inline int Holiday_BlobProto::data_size() const {
  return data_.size();
}
inline void Holiday_BlobProto::clear_data() {
  data_.Clear();
}
inline float Holiday_BlobProto::data(int index) const {
  // @@protoc_insertion_point(field_get:Holiday_BlobProto.data)
  return data_.Get(index);
}
inline void Holiday_BlobProto::set_data(int index, float value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:Holiday_BlobProto.data)
}
inline void Holiday_BlobProto::add_data(float value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:Holiday_BlobProto.data)
}
inline const ::google::protobuf::RepeatedField< float >&
Holiday_BlobProto::data() const {
  // @@protoc_insertion_point(field_list:Holiday_BlobProto.data)
  return data_;
}
inline ::google::protobuf::RepeatedField< float >*
Holiday_BlobProto::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:Holiday_BlobProto.data)
  return &data_;
}

// -------------------------------------------------------------------

// Holiday_PreluParameter

// optional .Holiday_BlobProto param = 1;
inline bool Holiday_PreluParameter::has_param() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Holiday_PreluParameter::set_has_param() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Holiday_PreluParameter::clear_has_param() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Holiday_PreluParameter::clear_param() {
  if (param_ != NULL) param_->::Holiday_BlobProto::Clear();
  clear_has_param();
}
inline const ::Holiday_BlobProto& Holiday_PreluParameter::param() const {
  // @@protoc_insertion_point(field_get:Holiday_PreluParameter.param)
  return param_ != NULL ? *param_ : *default_instance_->param_;
}
inline ::Holiday_BlobProto* Holiday_PreluParameter::mutable_param() {
  set_has_param();
  if (param_ == NULL) param_ = new ::Holiday_BlobProto;
  // @@protoc_insertion_point(field_mutable:Holiday_PreluParameter.param)
  return param_;
}
inline ::Holiday_BlobProto* Holiday_PreluParameter::release_param() {
  clear_has_param();
  ::Holiday_BlobProto* temp = param_;
  param_ = NULL;
  return temp;
}
inline void Holiday_PreluParameter::set_allocated_param(::Holiday_BlobProto* param) {
  delete param_;
  param_ = param;
  if (param) {
    set_has_param();
  } else {
    clear_has_param();
  }
  // @@protoc_insertion_point(field_set_allocated:Holiday_PreluParameter.param)
}

// -------------------------------------------------------------------

// Holiday_CropParameter

// optional int32 axis = 1 [default = 2];
inline bool Holiday_CropParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Holiday_CropParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Holiday_CropParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Holiday_CropParameter::clear_axis() {
  axis_ = 2;
  clear_has_axis();
}
inline ::google::protobuf::int32 Holiday_CropParameter::axis() const {
  // @@protoc_insertion_point(field_get:Holiday_CropParameter.axis)
  return axis_;
}
inline void Holiday_CropParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:Holiday_CropParameter.axis)
}

// repeated uint32 offset = 2;
inline int Holiday_CropParameter::offset_size() const {
  return offset_.size();
}
inline void Holiday_CropParameter::clear_offset() {
  offset_.Clear();
}
inline ::google::protobuf::uint32 Holiday_CropParameter::offset(int index) const {
  // @@protoc_insertion_point(field_get:Holiday_CropParameter.offset)
  return offset_.Get(index);
}
inline void Holiday_CropParameter::set_offset(int index, ::google::protobuf::uint32 value) {
  offset_.Set(index, value);
  // @@protoc_insertion_point(field_set:Holiday_CropParameter.offset)
}
inline void Holiday_CropParameter::add_offset(::google::protobuf::uint32 value) {
  offset_.Add(value);
  // @@protoc_insertion_point(field_add:Holiday_CropParameter.offset)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Holiday_CropParameter::offset() const {
  // @@protoc_insertion_point(field_list:Holiday_CropParameter.offset)
  return offset_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Holiday_CropParameter::mutable_offset() {
  // @@protoc_insertion_point(field_mutable_list:Holiday_CropParameter.offset)
  return &offset_;
}

// -------------------------------------------------------------------

// Holiday_ConvolutionParameter

// optional .Holiday_BlobProto bias_param = 1;
inline bool Holiday_ConvolutionParameter::has_bias_param() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Holiday_ConvolutionParameter::set_has_bias_param() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Holiday_ConvolutionParameter::clear_has_bias_param() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Holiday_ConvolutionParameter::clear_bias_param() {
  if (bias_param_ != NULL) bias_param_->::Holiday_BlobProto::Clear();
  clear_has_bias_param();
}
inline const ::Holiday_BlobProto& Holiday_ConvolutionParameter::bias_param() const {
  // @@protoc_insertion_point(field_get:Holiday_ConvolutionParameter.bias_param)
  return bias_param_ != NULL ? *bias_param_ : *default_instance_->bias_param_;
}
inline ::Holiday_BlobProto* Holiday_ConvolutionParameter::mutable_bias_param() {
  set_has_bias_param();
  if (bias_param_ == NULL) bias_param_ = new ::Holiday_BlobProto;
  // @@protoc_insertion_point(field_mutable:Holiday_ConvolutionParameter.bias_param)
  return bias_param_;
}
inline ::Holiday_BlobProto* Holiday_ConvolutionParameter::release_bias_param() {
  clear_has_bias_param();
  ::Holiday_BlobProto* temp = bias_param_;
  bias_param_ = NULL;
  return temp;
}
inline void Holiday_ConvolutionParameter::set_allocated_bias_param(::Holiday_BlobProto* bias_param) {
  delete bias_param_;
  bias_param_ = bias_param;
  if (bias_param) {
    set_has_bias_param();
  } else {
    clear_has_bias_param();
  }
  // @@protoc_insertion_point(field_set_allocated:Holiday_ConvolutionParameter.bias_param)
}

// optional .Holiday_BlobProto kernel_param = 2;
inline bool Holiday_ConvolutionParameter::has_kernel_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Holiday_ConvolutionParameter::set_has_kernel_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Holiday_ConvolutionParameter::clear_has_kernel_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Holiday_ConvolutionParameter::clear_kernel_param() {
  if (kernel_param_ != NULL) kernel_param_->::Holiday_BlobProto::Clear();
  clear_has_kernel_param();
}
inline const ::Holiday_BlobProto& Holiday_ConvolutionParameter::kernel_param() const {
  // @@protoc_insertion_point(field_get:Holiday_ConvolutionParameter.kernel_param)
  return kernel_param_ != NULL ? *kernel_param_ : *default_instance_->kernel_param_;
}
inline ::Holiday_BlobProto* Holiday_ConvolutionParameter::mutable_kernel_param() {
  set_has_kernel_param();
  if (kernel_param_ == NULL) kernel_param_ = new ::Holiday_BlobProto;
  // @@protoc_insertion_point(field_mutable:Holiday_ConvolutionParameter.kernel_param)
  return kernel_param_;
}
inline ::Holiday_BlobProto* Holiday_ConvolutionParameter::release_kernel_param() {
  clear_has_kernel_param();
  ::Holiday_BlobProto* temp = kernel_param_;
  kernel_param_ = NULL;
  return temp;
}
inline void Holiday_ConvolutionParameter::set_allocated_kernel_param(::Holiday_BlobProto* kernel_param) {
  delete kernel_param_;
  kernel_param_ = kernel_param;
  if (kernel_param) {
    set_has_kernel_param();
  } else {
    clear_has_kernel_param();
  }
  // @@protoc_insertion_point(field_set_allocated:Holiday_ConvolutionParameter.kernel_param)
}

// optional uint32 dilation_height = 3;
inline bool Holiday_ConvolutionParameter::has_dilation_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Holiday_ConvolutionParameter::set_has_dilation_height() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Holiday_ConvolutionParameter::clear_has_dilation_height() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Holiday_ConvolutionParameter::clear_dilation_height() {
  dilation_height_ = 0u;
  clear_has_dilation_height();
}
inline ::google::protobuf::uint32 Holiday_ConvolutionParameter::dilation_height() const {
  // @@protoc_insertion_point(field_get:Holiday_ConvolutionParameter.dilation_height)
  return dilation_height_;
}
inline void Holiday_ConvolutionParameter::set_dilation_height(::google::protobuf::uint32 value) {
  set_has_dilation_height();
  dilation_height_ = value;
  // @@protoc_insertion_point(field_set:Holiday_ConvolutionParameter.dilation_height)
}

// optional uint32 dilation_width = 4;
inline bool Holiday_ConvolutionParameter::has_dilation_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Holiday_ConvolutionParameter::set_has_dilation_width() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Holiday_ConvolutionParameter::clear_has_dilation_width() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Holiday_ConvolutionParameter::clear_dilation_width() {
  dilation_width_ = 0u;
  clear_has_dilation_width();
}
inline ::google::protobuf::uint32 Holiday_ConvolutionParameter::dilation_width() const {
  // @@protoc_insertion_point(field_get:Holiday_ConvolutionParameter.dilation_width)
  return dilation_width_;
}
inline void Holiday_ConvolutionParameter::set_dilation_width(::google::protobuf::uint32 value) {
  set_has_dilation_width();
  dilation_width_ = value;
  // @@protoc_insertion_point(field_set:Holiday_ConvolutionParameter.dilation_width)
}

// optional uint32 num_output = 5;
inline bool Holiday_ConvolutionParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Holiday_ConvolutionParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Holiday_ConvolutionParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Holiday_ConvolutionParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
inline ::google::protobuf::uint32 Holiday_ConvolutionParameter::num_output() const {
  // @@protoc_insertion_point(field_get:Holiday_ConvolutionParameter.num_output)
  return num_output_;
}
inline void Holiday_ConvolutionParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:Holiday_ConvolutionParameter.num_output)
}

// optional uint32 pad_height = 6 [default = 0];
inline bool Holiday_ConvolutionParameter::has_pad_height() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Holiday_ConvolutionParameter::set_has_pad_height() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Holiday_ConvolutionParameter::clear_has_pad_height() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Holiday_ConvolutionParameter::clear_pad_height() {
  pad_height_ = 0u;
  clear_has_pad_height();
}
inline ::google::protobuf::uint32 Holiday_ConvolutionParameter::pad_height() const {
  // @@protoc_insertion_point(field_get:Holiday_ConvolutionParameter.pad_height)
  return pad_height_;
}
inline void Holiday_ConvolutionParameter::set_pad_height(::google::protobuf::uint32 value) {
  set_has_pad_height();
  pad_height_ = value;
  // @@protoc_insertion_point(field_set:Holiday_ConvolutionParameter.pad_height)
}

// optional uint32 pad_width = 7 [default = 0];
inline bool Holiday_ConvolutionParameter::has_pad_width() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Holiday_ConvolutionParameter::set_has_pad_width() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Holiday_ConvolutionParameter::clear_has_pad_width() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Holiday_ConvolutionParameter::clear_pad_width() {
  pad_width_ = 0u;
  clear_has_pad_width();
}
inline ::google::protobuf::uint32 Holiday_ConvolutionParameter::pad_width() const {
  // @@protoc_insertion_point(field_get:Holiday_ConvolutionParameter.pad_width)
  return pad_width_;
}
inline void Holiday_ConvolutionParameter::set_pad_width(::google::protobuf::uint32 value) {
  set_has_pad_width();
  pad_width_ = value;
  // @@protoc_insertion_point(field_set:Holiday_ConvolutionParameter.pad_width)
}

// optional uint32 kernel_height = 8;
inline bool Holiday_ConvolutionParameter::has_kernel_height() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Holiday_ConvolutionParameter::set_has_kernel_height() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Holiday_ConvolutionParameter::clear_has_kernel_height() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Holiday_ConvolutionParameter::clear_kernel_height() {
  kernel_height_ = 0u;
  clear_has_kernel_height();
}
inline ::google::protobuf::uint32 Holiday_ConvolutionParameter::kernel_height() const {
  // @@protoc_insertion_point(field_get:Holiday_ConvolutionParameter.kernel_height)
  return kernel_height_;
}
inline void Holiday_ConvolutionParameter::set_kernel_height(::google::protobuf::uint32 value) {
  set_has_kernel_height();
  kernel_height_ = value;
  // @@protoc_insertion_point(field_set:Holiday_ConvolutionParameter.kernel_height)
}

// optional uint32 kernel_width = 9;
inline bool Holiday_ConvolutionParameter::has_kernel_width() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Holiday_ConvolutionParameter::set_has_kernel_width() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Holiday_ConvolutionParameter::clear_has_kernel_width() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Holiday_ConvolutionParameter::clear_kernel_width() {
  kernel_width_ = 0u;
  clear_has_kernel_width();
}
inline ::google::protobuf::uint32 Holiday_ConvolutionParameter::kernel_width() const {
  // @@protoc_insertion_point(field_get:Holiday_ConvolutionParameter.kernel_width)
  return kernel_width_;
}
inline void Holiday_ConvolutionParameter::set_kernel_width(::google::protobuf::uint32 value) {
  set_has_kernel_width();
  kernel_width_ = value;
  // @@protoc_insertion_point(field_set:Holiday_ConvolutionParameter.kernel_width)
}

// optional uint32 stride_height = 10;
inline bool Holiday_ConvolutionParameter::has_stride_height() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Holiday_ConvolutionParameter::set_has_stride_height() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Holiday_ConvolutionParameter::clear_has_stride_height() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Holiday_ConvolutionParameter::clear_stride_height() {
  stride_height_ = 0u;
  clear_has_stride_height();
}
inline ::google::protobuf::uint32 Holiday_ConvolutionParameter::stride_height() const {
  // @@protoc_insertion_point(field_get:Holiday_ConvolutionParameter.stride_height)
  return stride_height_;
}
inline void Holiday_ConvolutionParameter::set_stride_height(::google::protobuf::uint32 value) {
  set_has_stride_height();
  stride_height_ = value;
  // @@protoc_insertion_point(field_set:Holiday_ConvolutionParameter.stride_height)
}

// optional uint32 stride_width = 11;
inline bool Holiday_ConvolutionParameter::has_stride_width() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Holiday_ConvolutionParameter::set_has_stride_width() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Holiday_ConvolutionParameter::clear_has_stride_width() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Holiday_ConvolutionParameter::clear_stride_width() {
  stride_width_ = 0u;
  clear_has_stride_width();
}
inline ::google::protobuf::uint32 Holiday_ConvolutionParameter::stride_width() const {
  // @@protoc_insertion_point(field_get:Holiday_ConvolutionParameter.stride_width)
  return stride_width_;
}
inline void Holiday_ConvolutionParameter::set_stride_width(::google::protobuf::uint32 value) {
  set_has_stride_width();
  stride_width_ = value;
  // @@protoc_insertion_point(field_set:Holiday_ConvolutionParameter.stride_width)
}

// optional uint32 group = 12 [default = 1];
inline bool Holiday_ConvolutionParameter::has_group() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Holiday_ConvolutionParameter::set_has_group() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Holiday_ConvolutionParameter::clear_has_group() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Holiday_ConvolutionParameter::clear_group() {
  group_ = 1u;
  clear_has_group();
}
inline ::google::protobuf::uint32 Holiday_ConvolutionParameter::group() const {
  // @@protoc_insertion_point(field_get:Holiday_ConvolutionParameter.group)
  return group_;
}
inline void Holiday_ConvolutionParameter::set_group(::google::protobuf::uint32 value) {
  set_has_group();
  group_ = value;
  // @@protoc_insertion_point(field_set:Holiday_ConvolutionParameter.group)
}

// optional int32 axis = 13 [default = 1];
inline bool Holiday_ConvolutionParameter::has_axis() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Holiday_ConvolutionParameter::set_has_axis() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Holiday_ConvolutionParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Holiday_ConvolutionParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 Holiday_ConvolutionParameter::axis() const {
  // @@protoc_insertion_point(field_get:Holiday_ConvolutionParameter.axis)
  return axis_;
}
inline void Holiday_ConvolutionParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:Holiday_ConvolutionParameter.axis)
}

// optional bool force_nd_im2col = 14 [default = false];
inline bool Holiday_ConvolutionParameter::has_force_nd_im2col() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Holiday_ConvolutionParameter::set_has_force_nd_im2col() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Holiday_ConvolutionParameter::clear_has_force_nd_im2col() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Holiday_ConvolutionParameter::clear_force_nd_im2col() {
  force_nd_im2col_ = false;
  clear_has_force_nd_im2col();
}
inline bool Holiday_ConvolutionParameter::force_nd_im2col() const {
  // @@protoc_insertion_point(field_get:Holiday_ConvolutionParameter.force_nd_im2col)
  return force_nd_im2col_;
}
inline void Holiday_ConvolutionParameter::set_force_nd_im2col(bool value) {
  set_has_force_nd_im2col();
  force_nd_im2col_ = value;
  // @@protoc_insertion_point(field_set:Holiday_ConvolutionParameter.force_nd_im2col)
}

// optional string tf_padding = 15;
inline bool Holiday_ConvolutionParameter::has_tf_padding() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Holiday_ConvolutionParameter::set_has_tf_padding() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Holiday_ConvolutionParameter::clear_has_tf_padding() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Holiday_ConvolutionParameter::clear_tf_padding() {
  if (tf_padding_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tf_padding_->clear();
  }
  clear_has_tf_padding();
}
inline const ::std::string& Holiday_ConvolutionParameter::tf_padding() const {
  // @@protoc_insertion_point(field_get:Holiday_ConvolutionParameter.tf_padding)
  return *tf_padding_;
}
inline void Holiday_ConvolutionParameter::set_tf_padding(const ::std::string& value) {
  set_has_tf_padding();
  if (tf_padding_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tf_padding_ = new ::std::string;
  }
  tf_padding_->assign(value);
  // @@protoc_insertion_point(field_set:Holiday_ConvolutionParameter.tf_padding)
}
inline void Holiday_ConvolutionParameter::set_tf_padding(const char* value) {
  set_has_tf_padding();
  if (tf_padding_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tf_padding_ = new ::std::string;
  }
  tf_padding_->assign(value);
  // @@protoc_insertion_point(field_set_char:Holiday_ConvolutionParameter.tf_padding)
}
inline void Holiday_ConvolutionParameter::set_tf_padding(const char* value, size_t size) {
  set_has_tf_padding();
  if (tf_padding_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tf_padding_ = new ::std::string;
  }
  tf_padding_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Holiday_ConvolutionParameter.tf_padding)
}
inline ::std::string* Holiday_ConvolutionParameter::mutable_tf_padding() {
  set_has_tf_padding();
  if (tf_padding_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tf_padding_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Holiday_ConvolutionParameter.tf_padding)
  return tf_padding_;
}
inline ::std::string* Holiday_ConvolutionParameter::release_tf_padding() {
  clear_has_tf_padding();
  if (tf_padding_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = tf_padding_;
    tf_padding_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Holiday_ConvolutionParameter::set_allocated_tf_padding(::std::string* tf_padding) {
  if (tf_padding_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tf_padding_;
  }
  if (tf_padding) {
    set_has_tf_padding();
    tf_padding_ = tf_padding;
  } else {
    clear_has_tf_padding();
    tf_padding_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Holiday_ConvolutionParameter.tf_padding)
}

// -------------------------------------------------------------------

// Holiday_BatchNormliseParameter

// optional .Holiday_BlobProto mean_param = 1;
inline bool Holiday_BatchNormliseParameter::has_mean_param() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Holiday_BatchNormliseParameter::set_has_mean_param() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Holiday_BatchNormliseParameter::clear_has_mean_param() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Holiday_BatchNormliseParameter::clear_mean_param() {
  if (mean_param_ != NULL) mean_param_->::Holiday_BlobProto::Clear();
  clear_has_mean_param();
}
inline const ::Holiday_BlobProto& Holiday_BatchNormliseParameter::mean_param() const {
  // @@protoc_insertion_point(field_get:Holiday_BatchNormliseParameter.mean_param)
  return mean_param_ != NULL ? *mean_param_ : *default_instance_->mean_param_;
}
inline ::Holiday_BlobProto* Holiday_BatchNormliseParameter::mutable_mean_param() {
  set_has_mean_param();
  if (mean_param_ == NULL) mean_param_ = new ::Holiday_BlobProto;
  // @@protoc_insertion_point(field_mutable:Holiday_BatchNormliseParameter.mean_param)
  return mean_param_;
}
inline ::Holiday_BlobProto* Holiday_BatchNormliseParameter::release_mean_param() {
  clear_has_mean_param();
  ::Holiday_BlobProto* temp = mean_param_;
  mean_param_ = NULL;
  return temp;
}
inline void Holiday_BatchNormliseParameter::set_allocated_mean_param(::Holiday_BlobProto* mean_param) {
  delete mean_param_;
  mean_param_ = mean_param;
  if (mean_param) {
    set_has_mean_param();
  } else {
    clear_has_mean_param();
  }
  // @@protoc_insertion_point(field_set_allocated:Holiday_BatchNormliseParameter.mean_param)
}

// optional .Holiday_BlobProto covariance_param = 2;
inline bool Holiday_BatchNormliseParameter::has_covariance_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Holiday_BatchNormliseParameter::set_has_covariance_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Holiday_BatchNormliseParameter::clear_has_covariance_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Holiday_BatchNormliseParameter::clear_covariance_param() {
  if (covariance_param_ != NULL) covariance_param_->::Holiday_BlobProto::Clear();
  clear_has_covariance_param();
}
inline const ::Holiday_BlobProto& Holiday_BatchNormliseParameter::covariance_param() const {
  // @@protoc_insertion_point(field_get:Holiday_BatchNormliseParameter.covariance_param)
  return covariance_param_ != NULL ? *covariance_param_ : *default_instance_->covariance_param_;
}
inline ::Holiday_BlobProto* Holiday_BatchNormliseParameter::mutable_covariance_param() {
  set_has_covariance_param();
  if (covariance_param_ == NULL) covariance_param_ = new ::Holiday_BlobProto;
  // @@protoc_insertion_point(field_mutable:Holiday_BatchNormliseParameter.covariance_param)
  return covariance_param_;
}
inline ::Holiday_BlobProto* Holiday_BatchNormliseParameter::release_covariance_param() {
  clear_has_covariance_param();
  ::Holiday_BlobProto* temp = covariance_param_;
  covariance_param_ = NULL;
  return temp;
}
inline void Holiday_BatchNormliseParameter::set_allocated_covariance_param(::Holiday_BlobProto* covariance_param) {
  delete covariance_param_;
  covariance_param_ = covariance_param;
  if (covariance_param) {
    set_has_covariance_param();
  } else {
    clear_has_covariance_param();
  }
  // @@protoc_insertion_point(field_set_allocated:Holiday_BatchNormliseParameter.covariance_param)
}

// -------------------------------------------------------------------

// Holiday_ScaleParameter

// optional .Holiday_BlobProto scale_param = 1;
inline bool Holiday_ScaleParameter::has_scale_param() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Holiday_ScaleParameter::set_has_scale_param() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Holiday_ScaleParameter::clear_has_scale_param() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Holiday_ScaleParameter::clear_scale_param() {
  if (scale_param_ != NULL) scale_param_->::Holiday_BlobProto::Clear();
  clear_has_scale_param();
}
inline const ::Holiday_BlobProto& Holiday_ScaleParameter::scale_param() const {
  // @@protoc_insertion_point(field_get:Holiday_ScaleParameter.scale_param)
  return scale_param_ != NULL ? *scale_param_ : *default_instance_->scale_param_;
}
inline ::Holiday_BlobProto* Holiday_ScaleParameter::mutable_scale_param() {
  set_has_scale_param();
  if (scale_param_ == NULL) scale_param_ = new ::Holiday_BlobProto;
  // @@protoc_insertion_point(field_mutable:Holiday_ScaleParameter.scale_param)
  return scale_param_;
}
inline ::Holiday_BlobProto* Holiday_ScaleParameter::release_scale_param() {
  clear_has_scale_param();
  ::Holiday_BlobProto* temp = scale_param_;
  scale_param_ = NULL;
  return temp;
}
inline void Holiday_ScaleParameter::set_allocated_scale_param(::Holiday_BlobProto* scale_param) {
  delete scale_param_;
  scale_param_ = scale_param;
  if (scale_param) {
    set_has_scale_param();
  } else {
    clear_has_scale_param();
  }
  // @@protoc_insertion_point(field_set_allocated:Holiday_ScaleParameter.scale_param)
}

// optional .Holiday_BlobProto bias_param = 2;
inline bool Holiday_ScaleParameter::has_bias_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Holiday_ScaleParameter::set_has_bias_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Holiday_ScaleParameter::clear_has_bias_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Holiday_ScaleParameter::clear_bias_param() {
  if (bias_param_ != NULL) bias_param_->::Holiday_BlobProto::Clear();
  clear_has_bias_param();
}
inline const ::Holiday_BlobProto& Holiday_ScaleParameter::bias_param() const {
  // @@protoc_insertion_point(field_get:Holiday_ScaleParameter.bias_param)
  return bias_param_ != NULL ? *bias_param_ : *default_instance_->bias_param_;
}
inline ::Holiday_BlobProto* Holiday_ScaleParameter::mutable_bias_param() {
  set_has_bias_param();
  if (bias_param_ == NULL) bias_param_ = new ::Holiday_BlobProto;
  // @@protoc_insertion_point(field_mutable:Holiday_ScaleParameter.bias_param)
  return bias_param_;
}
inline ::Holiday_BlobProto* Holiday_ScaleParameter::release_bias_param() {
  clear_has_bias_param();
  ::Holiday_BlobProto* temp = bias_param_;
  bias_param_ = NULL;
  return temp;
}
inline void Holiday_ScaleParameter::set_allocated_bias_param(::Holiday_BlobProto* bias_param) {
  delete bias_param_;
  bias_param_ = bias_param;
  if (bias_param) {
    set_has_bias_param();
  } else {
    clear_has_bias_param();
  }
  // @@protoc_insertion_point(field_set_allocated:Holiday_ScaleParameter.bias_param)
}

// -------------------------------------------------------------------

// Holiday_ConcatParameter

// optional uint32 concat_dim = 1 [default = 1];
inline bool Holiday_ConcatParameter::has_concat_dim() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Holiday_ConcatParameter::set_has_concat_dim() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Holiday_ConcatParameter::clear_has_concat_dim() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Holiday_ConcatParameter::clear_concat_dim() {
  concat_dim_ = 1u;
  clear_has_concat_dim();
}
inline ::google::protobuf::uint32 Holiday_ConcatParameter::concat_dim() const {
  // @@protoc_insertion_point(field_get:Holiday_ConcatParameter.concat_dim)
  return concat_dim_;
}
inline void Holiday_ConcatParameter::set_concat_dim(::google::protobuf::uint32 value) {
  set_has_concat_dim();
  concat_dim_ = value;
  // @@protoc_insertion_point(field_set:Holiday_ConcatParameter.concat_dim)
}

// optional int32 axis = 2 [default = 1];
inline bool Holiday_ConcatParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Holiday_ConcatParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Holiday_ConcatParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Holiday_ConcatParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 Holiday_ConcatParameter::axis() const {
  // @@protoc_insertion_point(field_get:Holiday_ConcatParameter.axis)
  return axis_;
}
inline void Holiday_ConcatParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:Holiday_ConcatParameter.axis)
}

// -------------------------------------------------------------------

// Holiday_EltwiseParameter

// optional .Holiday_EltwiseParameter.EltwiseOp operation = 1 [default = SUM];
inline bool Holiday_EltwiseParameter::has_operation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Holiday_EltwiseParameter::set_has_operation() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Holiday_EltwiseParameter::clear_has_operation() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Holiday_EltwiseParameter::clear_operation() {
  operation_ = 1;
  clear_has_operation();
}
inline ::Holiday_EltwiseParameter_EltwiseOp Holiday_EltwiseParameter::operation() const {
  // @@protoc_insertion_point(field_get:Holiday_EltwiseParameter.operation)
  return static_cast< ::Holiday_EltwiseParameter_EltwiseOp >(operation_);
}
inline void Holiday_EltwiseParameter::set_operation(::Holiday_EltwiseParameter_EltwiseOp value) {
  assert(::Holiday_EltwiseParameter_EltwiseOp_IsValid(value));
  set_has_operation();
  operation_ = value;
  // @@protoc_insertion_point(field_set:Holiday_EltwiseParameter.operation)
}

// repeated float coeff = 2;
inline int Holiday_EltwiseParameter::coeff_size() const {
  return coeff_.size();
}
inline void Holiday_EltwiseParameter::clear_coeff() {
  coeff_.Clear();
}
inline float Holiday_EltwiseParameter::coeff(int index) const {
  // @@protoc_insertion_point(field_get:Holiday_EltwiseParameter.coeff)
  return coeff_.Get(index);
}
inline void Holiday_EltwiseParameter::set_coeff(int index, float value) {
  coeff_.Set(index, value);
  // @@protoc_insertion_point(field_set:Holiday_EltwiseParameter.coeff)
}
inline void Holiday_EltwiseParameter::add_coeff(float value) {
  coeff_.Add(value);
  // @@protoc_insertion_point(field_add:Holiday_EltwiseParameter.coeff)
}
inline const ::google::protobuf::RepeatedField< float >&
Holiday_EltwiseParameter::coeff() const {
  // @@protoc_insertion_point(field_list:Holiday_EltwiseParameter.coeff)
  return coeff_;
}
inline ::google::protobuf::RepeatedField< float >*
Holiday_EltwiseParameter::mutable_coeff() {
  // @@protoc_insertion_point(field_mutable_list:Holiday_EltwiseParameter.coeff)
  return &coeff_;
}

// optional bool stable_prod_grad = 3 [default = true];
inline bool Holiday_EltwiseParameter::has_stable_prod_grad() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Holiday_EltwiseParameter::set_has_stable_prod_grad() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Holiday_EltwiseParameter::clear_has_stable_prod_grad() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Holiday_EltwiseParameter::clear_stable_prod_grad() {
  stable_prod_grad_ = true;
  clear_has_stable_prod_grad();
}
inline bool Holiday_EltwiseParameter::stable_prod_grad() const {
  // @@protoc_insertion_point(field_get:Holiday_EltwiseParameter.stable_prod_grad)
  return stable_prod_grad_;
}
inline void Holiday_EltwiseParameter::set_stable_prod_grad(bool value) {
  set_has_stable_prod_grad();
  stable_prod_grad_ = value;
  // @@protoc_insertion_point(field_set:Holiday_EltwiseParameter.stable_prod_grad)
}

// -------------------------------------------------------------------

// Holiday_ExpParameter

// optional float base = 1 [default = -1];
inline bool Holiday_ExpParameter::has_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Holiday_ExpParameter::set_has_base() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Holiday_ExpParameter::clear_has_base() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Holiday_ExpParameter::clear_base() {
  base_ = -1;
  clear_has_base();
}
inline float Holiday_ExpParameter::base() const {
  // @@protoc_insertion_point(field_get:Holiday_ExpParameter.base)
  return base_;
}
inline void Holiday_ExpParameter::set_base(float value) {
  set_has_base();
  base_ = value;
  // @@protoc_insertion_point(field_set:Holiday_ExpParameter.base)
}

// optional float scale = 2 [default = 1];
inline bool Holiday_ExpParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Holiday_ExpParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Holiday_ExpParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Holiday_ExpParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
inline float Holiday_ExpParameter::scale() const {
  // @@protoc_insertion_point(field_get:Holiday_ExpParameter.scale)
  return scale_;
}
inline void Holiday_ExpParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:Holiday_ExpParameter.scale)
}

// optional float shift = 3 [default = 0];
inline bool Holiday_ExpParameter::has_shift() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Holiday_ExpParameter::set_has_shift() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Holiday_ExpParameter::clear_has_shift() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Holiday_ExpParameter::clear_shift() {
  shift_ = 0;
  clear_has_shift();
}
inline float Holiday_ExpParameter::shift() const {
  // @@protoc_insertion_point(field_get:Holiday_ExpParameter.shift)
  return shift_;
}
inline void Holiday_ExpParameter::set_shift(float value) {
  set_has_shift();
  shift_ = value;
  // @@protoc_insertion_point(field_set:Holiday_ExpParameter.shift)
}

// -------------------------------------------------------------------

// Holiday_MemoryDataParameterProcess

// optional uint32 batch_size = 1;
inline bool Holiday_MemoryDataParameterProcess::has_batch_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Holiday_MemoryDataParameterProcess::set_has_batch_size() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Holiday_MemoryDataParameterProcess::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Holiday_MemoryDataParameterProcess::clear_batch_size() {
  batch_size_ = 0u;
  clear_has_batch_size();
}
inline ::google::protobuf::uint32 Holiday_MemoryDataParameterProcess::batch_size() const {
  // @@protoc_insertion_point(field_get:Holiday_MemoryDataParameterProcess.batch_size)
  return batch_size_;
}
inline void Holiday_MemoryDataParameterProcess::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:Holiday_MemoryDataParameterProcess.batch_size)
}

// optional uint32 channels = 2;
inline bool Holiday_MemoryDataParameterProcess::has_channels() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Holiday_MemoryDataParameterProcess::set_has_channels() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Holiday_MemoryDataParameterProcess::clear_has_channels() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Holiday_MemoryDataParameterProcess::clear_channels() {
  channels_ = 0u;
  clear_has_channels();
}
inline ::google::protobuf::uint32 Holiday_MemoryDataParameterProcess::channels() const {
  // @@protoc_insertion_point(field_get:Holiday_MemoryDataParameterProcess.channels)
  return channels_;
}
inline void Holiday_MemoryDataParameterProcess::set_channels(::google::protobuf::uint32 value) {
  set_has_channels();
  channels_ = value;
  // @@protoc_insertion_point(field_set:Holiday_MemoryDataParameterProcess.channels)
}

// optional uint32 height = 3;
inline bool Holiday_MemoryDataParameterProcess::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Holiday_MemoryDataParameterProcess::set_has_height() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Holiday_MemoryDataParameterProcess::clear_has_height() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Holiday_MemoryDataParameterProcess::clear_height() {
  height_ = 0u;
  clear_has_height();
}
inline ::google::protobuf::uint32 Holiday_MemoryDataParameterProcess::height() const {
  // @@protoc_insertion_point(field_get:Holiday_MemoryDataParameterProcess.height)
  return height_;
}
inline void Holiday_MemoryDataParameterProcess::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:Holiday_MemoryDataParameterProcess.height)
}

// optional uint32 width = 4;
inline bool Holiday_MemoryDataParameterProcess::has_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Holiday_MemoryDataParameterProcess::set_has_width() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Holiday_MemoryDataParameterProcess::clear_has_width() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Holiday_MemoryDataParameterProcess::clear_width() {
  width_ = 0u;
  clear_has_width();
}
inline ::google::protobuf::uint32 Holiday_MemoryDataParameterProcess::width() const {
  // @@protoc_insertion_point(field_get:Holiday_MemoryDataParameterProcess.width)
  return width_;
}
inline void Holiday_MemoryDataParameterProcess::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:Holiday_MemoryDataParameterProcess.width)
}

// optional uint32 new_height = 5 [default = 0];
inline bool Holiday_MemoryDataParameterProcess::has_new_height() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Holiday_MemoryDataParameterProcess::set_has_new_height() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Holiday_MemoryDataParameterProcess::clear_has_new_height() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Holiday_MemoryDataParameterProcess::clear_new_height() {
  new_height_ = 0u;
  clear_has_new_height();
}
inline ::google::protobuf::uint32 Holiday_MemoryDataParameterProcess::new_height() const {
  // @@protoc_insertion_point(field_get:Holiday_MemoryDataParameterProcess.new_height)
  return new_height_;
}
inline void Holiday_MemoryDataParameterProcess::set_new_height(::google::protobuf::uint32 value) {
  set_has_new_height();
  new_height_ = value;
  // @@protoc_insertion_point(field_set:Holiday_MemoryDataParameterProcess.new_height)
}

// optional uint32 new_width = 6 [default = 0];
inline bool Holiday_MemoryDataParameterProcess::has_new_width() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Holiday_MemoryDataParameterProcess::set_has_new_width() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Holiday_MemoryDataParameterProcess::clear_has_new_width() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Holiday_MemoryDataParameterProcess::clear_new_width() {
  new_width_ = 0u;
  clear_has_new_width();
}
inline ::google::protobuf::uint32 Holiday_MemoryDataParameterProcess::new_width() const {
  // @@protoc_insertion_point(field_get:Holiday_MemoryDataParameterProcess.new_width)
  return new_width_;
}
inline void Holiday_MemoryDataParameterProcess::set_new_width(::google::protobuf::uint32 value) {
  set_has_new_width();
  new_width_ = value;
  // @@protoc_insertion_point(field_set:Holiday_MemoryDataParameterProcess.new_width)
}

// optional float scale = 7 [default = 1];
inline bool Holiday_MemoryDataParameterProcess::has_scale() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Holiday_MemoryDataParameterProcess::set_has_scale() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Holiday_MemoryDataParameterProcess::clear_has_scale() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Holiday_MemoryDataParameterProcess::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
inline float Holiday_MemoryDataParameterProcess::scale() const {
  // @@protoc_insertion_point(field_get:Holiday_MemoryDataParameterProcess.scale)
  return scale_;
}
inline void Holiday_MemoryDataParameterProcess::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:Holiday_MemoryDataParameterProcess.scale)
}

// optional .Holiday_BlobProto mean_file = 8;
inline bool Holiday_MemoryDataParameterProcess::has_mean_file() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Holiday_MemoryDataParameterProcess::set_has_mean_file() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Holiday_MemoryDataParameterProcess::clear_has_mean_file() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Holiday_MemoryDataParameterProcess::clear_mean_file() {
  if (mean_file_ != NULL) mean_file_->::Holiday_BlobProto::Clear();
  clear_has_mean_file();
}
inline const ::Holiday_BlobProto& Holiday_MemoryDataParameterProcess::mean_file() const {
  // @@protoc_insertion_point(field_get:Holiday_MemoryDataParameterProcess.mean_file)
  return mean_file_ != NULL ? *mean_file_ : *default_instance_->mean_file_;
}
inline ::Holiday_BlobProto* Holiday_MemoryDataParameterProcess::mutable_mean_file() {
  set_has_mean_file();
  if (mean_file_ == NULL) mean_file_ = new ::Holiday_BlobProto;
  // @@protoc_insertion_point(field_mutable:Holiday_MemoryDataParameterProcess.mean_file)
  return mean_file_;
}
inline ::Holiday_BlobProto* Holiday_MemoryDataParameterProcess::release_mean_file() {
  clear_has_mean_file();
  ::Holiday_BlobProto* temp = mean_file_;
  mean_file_ = NULL;
  return temp;
}
inline void Holiday_MemoryDataParameterProcess::set_allocated_mean_file(::Holiday_BlobProto* mean_file) {
  delete mean_file_;
  mean_file_ = mean_file;
  if (mean_file) {
    set_has_mean_file();
  } else {
    clear_has_mean_file();
  }
  // @@protoc_insertion_point(field_set_allocated:Holiday_MemoryDataParameterProcess.mean_file)
}

// repeated float mean_value = 9;
inline int Holiday_MemoryDataParameterProcess::mean_value_size() const {
  return mean_value_.size();
}
inline void Holiday_MemoryDataParameterProcess::clear_mean_value() {
  mean_value_.Clear();
}
inline float Holiday_MemoryDataParameterProcess::mean_value(int index) const {
  // @@protoc_insertion_point(field_get:Holiday_MemoryDataParameterProcess.mean_value)
  return mean_value_.Get(index);
}
inline void Holiday_MemoryDataParameterProcess::set_mean_value(int index, float value) {
  mean_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:Holiday_MemoryDataParameterProcess.mean_value)
}
inline void Holiday_MemoryDataParameterProcess::add_mean_value(float value) {
  mean_value_.Add(value);
  // @@protoc_insertion_point(field_add:Holiday_MemoryDataParameterProcess.mean_value)
}
inline const ::google::protobuf::RepeatedField< float >&
Holiday_MemoryDataParameterProcess::mean_value() const {
  // @@protoc_insertion_point(field_list:Holiday_MemoryDataParameterProcess.mean_value)
  return mean_value_;
}
inline ::google::protobuf::RepeatedField< float >*
Holiday_MemoryDataParameterProcess::mutable_mean_value() {
  // @@protoc_insertion_point(field_mutable_list:Holiday_MemoryDataParameterProcess.mean_value)
  return &mean_value_;
}

// optional uint32 crop_size_height = 10 [default = 0];
inline bool Holiday_MemoryDataParameterProcess::has_crop_size_height() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Holiday_MemoryDataParameterProcess::set_has_crop_size_height() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Holiday_MemoryDataParameterProcess::clear_has_crop_size_height() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Holiday_MemoryDataParameterProcess::clear_crop_size_height() {
  crop_size_height_ = 0u;
  clear_has_crop_size_height();
}
inline ::google::protobuf::uint32 Holiday_MemoryDataParameterProcess::crop_size_height() const {
  // @@protoc_insertion_point(field_get:Holiday_MemoryDataParameterProcess.crop_size_height)
  return crop_size_height_;
}
inline void Holiday_MemoryDataParameterProcess::set_crop_size_height(::google::protobuf::uint32 value) {
  set_has_crop_size_height();
  crop_size_height_ = value;
  // @@protoc_insertion_point(field_set:Holiday_MemoryDataParameterProcess.crop_size_height)
}

// optional uint32 crop_size_width = 11 [default = 0];
inline bool Holiday_MemoryDataParameterProcess::has_crop_size_width() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Holiday_MemoryDataParameterProcess::set_has_crop_size_width() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Holiday_MemoryDataParameterProcess::clear_has_crop_size_width() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Holiday_MemoryDataParameterProcess::clear_crop_size_width() {
  crop_size_width_ = 0u;
  clear_has_crop_size_width();
}
inline ::google::protobuf::uint32 Holiday_MemoryDataParameterProcess::crop_size_width() const {
  // @@protoc_insertion_point(field_get:Holiday_MemoryDataParameterProcess.crop_size_width)
  return crop_size_width_;
}
inline void Holiday_MemoryDataParameterProcess::set_crop_size_width(::google::protobuf::uint32 value) {
  set_has_crop_size_width();
  crop_size_width_ = value;
  // @@protoc_insertion_point(field_set:Holiday_MemoryDataParameterProcess.crop_size_width)
}

// repeated uint32 channel_swaps = 12;
inline int Holiday_MemoryDataParameterProcess::channel_swaps_size() const {
  return channel_swaps_.size();
}
inline void Holiday_MemoryDataParameterProcess::clear_channel_swaps() {
  channel_swaps_.Clear();
}
inline ::google::protobuf::uint32 Holiday_MemoryDataParameterProcess::channel_swaps(int index) const {
  // @@protoc_insertion_point(field_get:Holiday_MemoryDataParameterProcess.channel_swaps)
  return channel_swaps_.Get(index);
}
inline void Holiday_MemoryDataParameterProcess::set_channel_swaps(int index, ::google::protobuf::uint32 value) {
  channel_swaps_.Set(index, value);
  // @@protoc_insertion_point(field_set:Holiday_MemoryDataParameterProcess.channel_swaps)
}
inline void Holiday_MemoryDataParameterProcess::add_channel_swaps(::google::protobuf::uint32 value) {
  channel_swaps_.Add(value);
  // @@protoc_insertion_point(field_add:Holiday_MemoryDataParameterProcess.channel_swaps)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Holiday_MemoryDataParameterProcess::channel_swaps() const {
  // @@protoc_insertion_point(field_list:Holiday_MemoryDataParameterProcess.channel_swaps)
  return channel_swaps_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Holiday_MemoryDataParameterProcess::mutable_channel_swaps() {
  // @@protoc_insertion_point(field_mutable_list:Holiday_MemoryDataParameterProcess.channel_swaps)
  return &channel_swaps_;
}

// optional bool prewhiten = 13 [default = false];
inline bool Holiday_MemoryDataParameterProcess::has_prewhiten() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Holiday_MemoryDataParameterProcess::set_has_prewhiten() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Holiday_MemoryDataParameterProcess::clear_has_prewhiten() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Holiday_MemoryDataParameterProcess::clear_prewhiten() {
  prewhiten_ = false;
  clear_has_prewhiten();
}
inline bool Holiday_MemoryDataParameterProcess::prewhiten() const {
  // @@protoc_insertion_point(field_get:Holiday_MemoryDataParameterProcess.prewhiten)
  return prewhiten_;
}
inline void Holiday_MemoryDataParameterProcess::set_prewhiten(bool value) {
  set_has_prewhiten();
  prewhiten_ = value;
  // @@protoc_insertion_point(field_set:Holiday_MemoryDataParameterProcess.prewhiten)
}

// -------------------------------------------------------------------

// Holiday_TransformationParameter

// optional float scale = 1 [default = 1];
inline bool Holiday_TransformationParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Holiday_TransformationParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Holiday_TransformationParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Holiday_TransformationParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
inline float Holiday_TransformationParameter::scale() const {
  // @@protoc_insertion_point(field_get:Holiday_TransformationParameter.scale)
  return scale_;
}
inline void Holiday_TransformationParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:Holiday_TransformationParameter.scale)
}

// optional bool mirror = 2 [default = false];
inline bool Holiday_TransformationParameter::has_mirror() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Holiday_TransformationParameter::set_has_mirror() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Holiday_TransformationParameter::clear_has_mirror() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Holiday_TransformationParameter::clear_mirror() {
  mirror_ = false;
  clear_has_mirror();
}
inline bool Holiday_TransformationParameter::mirror() const {
  // @@protoc_insertion_point(field_get:Holiday_TransformationParameter.mirror)
  return mirror_;
}
inline void Holiday_TransformationParameter::set_mirror(bool value) {
  set_has_mirror();
  mirror_ = value;
  // @@protoc_insertion_point(field_set:Holiday_TransformationParameter.mirror)
}

// optional uint32 crop_height = 3 [default = 0];
inline bool Holiday_TransformationParameter::has_crop_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Holiday_TransformationParameter::set_has_crop_height() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Holiday_TransformationParameter::clear_has_crop_height() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Holiday_TransformationParameter::clear_crop_height() {
  crop_height_ = 0u;
  clear_has_crop_height();
}
inline ::google::protobuf::uint32 Holiday_TransformationParameter::crop_height() const {
  // @@protoc_insertion_point(field_get:Holiday_TransformationParameter.crop_height)
  return crop_height_;
}
inline void Holiday_TransformationParameter::set_crop_height(::google::protobuf::uint32 value) {
  set_has_crop_height();
  crop_height_ = value;
  // @@protoc_insertion_point(field_set:Holiday_TransformationParameter.crop_height)
}

// optional uint32 crop_width = 4 [default = 0];
inline bool Holiday_TransformationParameter::has_crop_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Holiday_TransformationParameter::set_has_crop_width() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Holiday_TransformationParameter::clear_has_crop_width() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Holiday_TransformationParameter::clear_crop_width() {
  crop_width_ = 0u;
  clear_has_crop_width();
}
inline ::google::protobuf::uint32 Holiday_TransformationParameter::crop_width() const {
  // @@protoc_insertion_point(field_get:Holiday_TransformationParameter.crop_width)
  return crop_width_;
}
inline void Holiday_TransformationParameter::set_crop_width(::google::protobuf::uint32 value) {
  set_has_crop_width();
  crop_width_ = value;
  // @@protoc_insertion_point(field_set:Holiday_TransformationParameter.crop_width)
}

// optional string mean_file = 5;
inline bool Holiday_TransformationParameter::has_mean_file() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Holiday_TransformationParameter::set_has_mean_file() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Holiday_TransformationParameter::clear_has_mean_file() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Holiday_TransformationParameter::clear_mean_file() {
  if (mean_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mean_file_->clear();
  }
  clear_has_mean_file();
}
inline const ::std::string& Holiday_TransformationParameter::mean_file() const {
  // @@protoc_insertion_point(field_get:Holiday_TransformationParameter.mean_file)
  return *mean_file_;
}
inline void Holiday_TransformationParameter::set_mean_file(const ::std::string& value) {
  set_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mean_file_ = new ::std::string;
  }
  mean_file_->assign(value);
  // @@protoc_insertion_point(field_set:Holiday_TransformationParameter.mean_file)
}
inline void Holiday_TransformationParameter::set_mean_file(const char* value) {
  set_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mean_file_ = new ::std::string;
  }
  mean_file_->assign(value);
  // @@protoc_insertion_point(field_set_char:Holiday_TransformationParameter.mean_file)
}
inline void Holiday_TransformationParameter::set_mean_file(const char* value, size_t size) {
  set_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mean_file_ = new ::std::string;
  }
  mean_file_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Holiday_TransformationParameter.mean_file)
}
inline ::std::string* Holiday_TransformationParameter::mutable_mean_file() {
  set_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mean_file_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Holiday_TransformationParameter.mean_file)
  return mean_file_;
}
inline ::std::string* Holiday_TransformationParameter::release_mean_file() {
  clear_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mean_file_;
    mean_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Holiday_TransformationParameter::set_allocated_mean_file(::std::string* mean_file) {
  if (mean_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mean_file_;
  }
  if (mean_file) {
    set_has_mean_file();
    mean_file_ = mean_file;
  } else {
    clear_has_mean_file();
    mean_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Holiday_TransformationParameter.mean_file)
}

// repeated float mean_value = 6;
inline int Holiday_TransformationParameter::mean_value_size() const {
  return mean_value_.size();
}
inline void Holiday_TransformationParameter::clear_mean_value() {
  mean_value_.Clear();
}
inline float Holiday_TransformationParameter::mean_value(int index) const {
  // @@protoc_insertion_point(field_get:Holiday_TransformationParameter.mean_value)
  return mean_value_.Get(index);
}
inline void Holiday_TransformationParameter::set_mean_value(int index, float value) {
  mean_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:Holiday_TransformationParameter.mean_value)
}
inline void Holiday_TransformationParameter::add_mean_value(float value) {
  mean_value_.Add(value);
  // @@protoc_insertion_point(field_add:Holiday_TransformationParameter.mean_value)
}
inline const ::google::protobuf::RepeatedField< float >&
Holiday_TransformationParameter::mean_value() const {
  // @@protoc_insertion_point(field_list:Holiday_TransformationParameter.mean_value)
  return mean_value_;
}
inline ::google::protobuf::RepeatedField< float >*
Holiday_TransformationParameter::mutable_mean_value() {
  // @@protoc_insertion_point(field_mutable_list:Holiday_TransformationParameter.mean_value)
  return &mean_value_;
}

// optional bool force_color = 7 [default = false];
inline bool Holiday_TransformationParameter::has_force_color() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Holiday_TransformationParameter::set_has_force_color() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Holiday_TransformationParameter::clear_has_force_color() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Holiday_TransformationParameter::clear_force_color() {
  force_color_ = false;
  clear_has_force_color();
}
inline bool Holiday_TransformationParameter::force_color() const {
  // @@protoc_insertion_point(field_get:Holiday_TransformationParameter.force_color)
  return force_color_;
}
inline void Holiday_TransformationParameter::set_force_color(bool value) {
  set_has_force_color();
  force_color_ = value;
  // @@protoc_insertion_point(field_set:Holiday_TransformationParameter.force_color)
}

// optional bool force_gray = 8 [default = false];
inline bool Holiday_TransformationParameter::has_force_gray() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Holiday_TransformationParameter::set_has_force_gray() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Holiday_TransformationParameter::clear_has_force_gray() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Holiday_TransformationParameter::clear_force_gray() {
  force_gray_ = false;
  clear_has_force_gray();
}
inline bool Holiday_TransformationParameter::force_gray() const {
  // @@protoc_insertion_point(field_get:Holiday_TransformationParameter.force_gray)
  return force_gray_;
}
inline void Holiday_TransformationParameter::set_force_gray(bool value) {
  set_has_force_gray();
  force_gray_ = value;
  // @@protoc_insertion_point(field_set:Holiday_TransformationParameter.force_gray)
}

// -------------------------------------------------------------------

// Holiday_InnerProductParameter

// optional uint32 num_output = 1;
inline bool Holiday_InnerProductParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Holiday_InnerProductParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Holiday_InnerProductParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Holiday_InnerProductParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
inline ::google::protobuf::uint32 Holiday_InnerProductParameter::num_output() const {
  // @@protoc_insertion_point(field_get:Holiday_InnerProductParameter.num_output)
  return num_output_;
}
inline void Holiday_InnerProductParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:Holiday_InnerProductParameter.num_output)
}

// optional int32 axis = 2 [default = 1];
inline bool Holiday_InnerProductParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Holiday_InnerProductParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Holiday_InnerProductParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Holiday_InnerProductParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 Holiday_InnerProductParameter::axis() const {
  // @@protoc_insertion_point(field_get:Holiday_InnerProductParameter.axis)
  return axis_;
}
inline void Holiday_InnerProductParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:Holiday_InnerProductParameter.axis)
}

// optional bool transpose = 3 [default = false];
inline bool Holiday_InnerProductParameter::has_transpose() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Holiday_InnerProductParameter::set_has_transpose() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Holiday_InnerProductParameter::clear_has_transpose() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Holiday_InnerProductParameter::clear_transpose() {
  transpose_ = false;
  clear_has_transpose();
}
inline bool Holiday_InnerProductParameter::transpose() const {
  // @@protoc_insertion_point(field_get:Holiday_InnerProductParameter.transpose)
  return transpose_;
}
inline void Holiday_InnerProductParameter::set_transpose(bool value) {
  set_has_transpose();
  transpose_ = value;
  // @@protoc_insertion_point(field_set:Holiday_InnerProductParameter.transpose)
}

// optional .Holiday_BlobProto bias_param = 4;
inline bool Holiday_InnerProductParameter::has_bias_param() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Holiday_InnerProductParameter::set_has_bias_param() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Holiday_InnerProductParameter::clear_has_bias_param() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Holiday_InnerProductParameter::clear_bias_param() {
  if (bias_param_ != NULL) bias_param_->::Holiday_BlobProto::Clear();
  clear_has_bias_param();
}
inline const ::Holiday_BlobProto& Holiday_InnerProductParameter::bias_param() const {
  // @@protoc_insertion_point(field_get:Holiday_InnerProductParameter.bias_param)
  return bias_param_ != NULL ? *bias_param_ : *default_instance_->bias_param_;
}
inline ::Holiday_BlobProto* Holiday_InnerProductParameter::mutable_bias_param() {
  set_has_bias_param();
  if (bias_param_ == NULL) bias_param_ = new ::Holiday_BlobProto;
  // @@protoc_insertion_point(field_mutable:Holiday_InnerProductParameter.bias_param)
  return bias_param_;
}
inline ::Holiday_BlobProto* Holiday_InnerProductParameter::release_bias_param() {
  clear_has_bias_param();
  ::Holiday_BlobProto* temp = bias_param_;
  bias_param_ = NULL;
  return temp;
}
inline void Holiday_InnerProductParameter::set_allocated_bias_param(::Holiday_BlobProto* bias_param) {
  delete bias_param_;
  bias_param_ = bias_param;
  if (bias_param) {
    set_has_bias_param();
  } else {
    clear_has_bias_param();
  }
  // @@protoc_insertion_point(field_set_allocated:Holiday_InnerProductParameter.bias_param)
}

// optional .Holiday_BlobProto Inner_param = 5;
inline bool Holiday_InnerProductParameter::has_inner_param() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Holiday_InnerProductParameter::set_has_inner_param() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Holiday_InnerProductParameter::clear_has_inner_param() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Holiday_InnerProductParameter::clear_inner_param() {
  if (inner_param_ != NULL) inner_param_->::Holiday_BlobProto::Clear();
  clear_has_inner_param();
}
inline const ::Holiday_BlobProto& Holiday_InnerProductParameter::inner_param() const {
  // @@protoc_insertion_point(field_get:Holiday_InnerProductParameter.Inner_param)
  return inner_param_ != NULL ? *inner_param_ : *default_instance_->inner_param_;
}
inline ::Holiday_BlobProto* Holiday_InnerProductParameter::mutable_inner_param() {
  set_has_inner_param();
  if (inner_param_ == NULL) inner_param_ = new ::Holiday_BlobProto;
  // @@protoc_insertion_point(field_mutable:Holiday_InnerProductParameter.Inner_param)
  return inner_param_;
}
inline ::Holiday_BlobProto* Holiday_InnerProductParameter::release_inner_param() {
  clear_has_inner_param();
  ::Holiday_BlobProto* temp = inner_param_;
  inner_param_ = NULL;
  return temp;
}
inline void Holiday_InnerProductParameter::set_allocated_inner_param(::Holiday_BlobProto* inner_param) {
  delete inner_param_;
  inner_param_ = inner_param;
  if (inner_param) {
    set_has_inner_param();
  } else {
    clear_has_inner_param();
  }
  // @@protoc_insertion_point(field_set_allocated:Holiday_InnerProductParameter.Inner_param)
}

// -------------------------------------------------------------------

// Holiday_LRNParameter

// optional uint32 local_size = 1 [default = 5];
inline bool Holiday_LRNParameter::has_local_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Holiday_LRNParameter::set_has_local_size() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Holiday_LRNParameter::clear_has_local_size() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Holiday_LRNParameter::clear_local_size() {
  local_size_ = 5u;
  clear_has_local_size();
}
inline ::google::protobuf::uint32 Holiday_LRNParameter::local_size() const {
  // @@protoc_insertion_point(field_get:Holiday_LRNParameter.local_size)
  return local_size_;
}
inline void Holiday_LRNParameter::set_local_size(::google::protobuf::uint32 value) {
  set_has_local_size();
  local_size_ = value;
  // @@protoc_insertion_point(field_set:Holiday_LRNParameter.local_size)
}

// optional float alpha = 2 [default = 1];
inline bool Holiday_LRNParameter::has_alpha() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Holiday_LRNParameter::set_has_alpha() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Holiday_LRNParameter::clear_has_alpha() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Holiday_LRNParameter::clear_alpha() {
  alpha_ = 1;
  clear_has_alpha();
}
inline float Holiday_LRNParameter::alpha() const {
  // @@protoc_insertion_point(field_get:Holiday_LRNParameter.alpha)
  return alpha_;
}
inline void Holiday_LRNParameter::set_alpha(float value) {
  set_has_alpha();
  alpha_ = value;
  // @@protoc_insertion_point(field_set:Holiday_LRNParameter.alpha)
}

// optional float beta = 3 [default = 0.75];
inline bool Holiday_LRNParameter::has_beta() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Holiday_LRNParameter::set_has_beta() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Holiday_LRNParameter::clear_has_beta() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Holiday_LRNParameter::clear_beta() {
  beta_ = 0.75f;
  clear_has_beta();
}
inline float Holiday_LRNParameter::beta() const {
  // @@protoc_insertion_point(field_get:Holiday_LRNParameter.beta)
  return beta_;
}
inline void Holiday_LRNParameter::set_beta(float value) {
  set_has_beta();
  beta_ = value;
  // @@protoc_insertion_point(field_set:Holiday_LRNParameter.beta)
}

// optional .Holiday_LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];
inline bool Holiday_LRNParameter::has_norm_region() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Holiday_LRNParameter::set_has_norm_region() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Holiday_LRNParameter::clear_has_norm_region() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Holiday_LRNParameter::clear_norm_region() {
  norm_region_ = 0;
  clear_has_norm_region();
}
inline ::Holiday_LRNParameter_NormRegion Holiday_LRNParameter::norm_region() const {
  // @@protoc_insertion_point(field_get:Holiday_LRNParameter.norm_region)
  return static_cast< ::Holiday_LRNParameter_NormRegion >(norm_region_);
}
inline void Holiday_LRNParameter::set_norm_region(::Holiday_LRNParameter_NormRegion value) {
  assert(::Holiday_LRNParameter_NormRegion_IsValid(value));
  set_has_norm_region();
  norm_region_ = value;
  // @@protoc_insertion_point(field_set:Holiday_LRNParameter.norm_region)
}

// optional float k = 5 [default = 1];
inline bool Holiday_LRNParameter::has_k() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Holiday_LRNParameter::set_has_k() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Holiday_LRNParameter::clear_has_k() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Holiday_LRNParameter::clear_k() {
  k_ = 1;
  clear_has_k();
}
inline float Holiday_LRNParameter::k() const {
  // @@protoc_insertion_point(field_get:Holiday_LRNParameter.k)
  return k_;
}
inline void Holiday_LRNParameter::set_k(float value) {
  set_has_k();
  k_ = value;
  // @@protoc_insertion_point(field_set:Holiday_LRNParameter.k)
}

// -------------------------------------------------------------------

// Holiday_PoolingParameter

// optional .Holiday_PoolingParameter.PoolMethod pool = 1 [default = MAX];
inline bool Holiday_PoolingParameter::has_pool() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Holiday_PoolingParameter::set_has_pool() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Holiday_PoolingParameter::clear_has_pool() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Holiday_PoolingParameter::clear_pool() {
  pool_ = 0;
  clear_has_pool();
}
inline ::Holiday_PoolingParameter_PoolMethod Holiday_PoolingParameter::pool() const {
  // @@protoc_insertion_point(field_get:Holiday_PoolingParameter.pool)
  return static_cast< ::Holiday_PoolingParameter_PoolMethod >(pool_);
}
inline void Holiday_PoolingParameter::set_pool(::Holiday_PoolingParameter_PoolMethod value) {
  assert(::Holiday_PoolingParameter_PoolMethod_IsValid(value));
  set_has_pool();
  pool_ = value;
  // @@protoc_insertion_point(field_set:Holiday_PoolingParameter.pool)
}

// optional uint32 pad_height = 2 [default = 0];
inline bool Holiday_PoolingParameter::has_pad_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Holiday_PoolingParameter::set_has_pad_height() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Holiday_PoolingParameter::clear_has_pad_height() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Holiday_PoolingParameter::clear_pad_height() {
  pad_height_ = 0u;
  clear_has_pad_height();
}
inline ::google::protobuf::uint32 Holiday_PoolingParameter::pad_height() const {
  // @@protoc_insertion_point(field_get:Holiday_PoolingParameter.pad_height)
  return pad_height_;
}
inline void Holiday_PoolingParameter::set_pad_height(::google::protobuf::uint32 value) {
  set_has_pad_height();
  pad_height_ = value;
  // @@protoc_insertion_point(field_set:Holiday_PoolingParameter.pad_height)
}

// optional uint32 pad_width = 3 [default = 0];
inline bool Holiday_PoolingParameter::has_pad_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Holiday_PoolingParameter::set_has_pad_width() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Holiday_PoolingParameter::clear_has_pad_width() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Holiday_PoolingParameter::clear_pad_width() {
  pad_width_ = 0u;
  clear_has_pad_width();
}
inline ::google::protobuf::uint32 Holiday_PoolingParameter::pad_width() const {
  // @@protoc_insertion_point(field_get:Holiday_PoolingParameter.pad_width)
  return pad_width_;
}
inline void Holiday_PoolingParameter::set_pad_width(::google::protobuf::uint32 value) {
  set_has_pad_width();
  pad_width_ = value;
  // @@protoc_insertion_point(field_set:Holiday_PoolingParameter.pad_width)
}

// optional uint32 kernel_height = 4;
inline bool Holiday_PoolingParameter::has_kernel_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Holiday_PoolingParameter::set_has_kernel_height() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Holiday_PoolingParameter::clear_has_kernel_height() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Holiday_PoolingParameter::clear_kernel_height() {
  kernel_height_ = 0u;
  clear_has_kernel_height();
}
inline ::google::protobuf::uint32 Holiday_PoolingParameter::kernel_height() const {
  // @@protoc_insertion_point(field_get:Holiday_PoolingParameter.kernel_height)
  return kernel_height_;
}
inline void Holiday_PoolingParameter::set_kernel_height(::google::protobuf::uint32 value) {
  set_has_kernel_height();
  kernel_height_ = value;
  // @@protoc_insertion_point(field_set:Holiday_PoolingParameter.kernel_height)
}

// optional uint32 kernel_width = 5;
inline bool Holiday_PoolingParameter::has_kernel_width() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Holiday_PoolingParameter::set_has_kernel_width() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Holiday_PoolingParameter::clear_has_kernel_width() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Holiday_PoolingParameter::clear_kernel_width() {
  kernel_width_ = 0u;
  clear_has_kernel_width();
}
inline ::google::protobuf::uint32 Holiday_PoolingParameter::kernel_width() const {
  // @@protoc_insertion_point(field_get:Holiday_PoolingParameter.kernel_width)
  return kernel_width_;
}
inline void Holiday_PoolingParameter::set_kernel_width(::google::protobuf::uint32 value) {
  set_has_kernel_width();
  kernel_width_ = value;
  // @@protoc_insertion_point(field_set:Holiday_PoolingParameter.kernel_width)
}

// optional uint32 stride_height = 6;
inline bool Holiday_PoolingParameter::has_stride_height() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Holiday_PoolingParameter::set_has_stride_height() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Holiday_PoolingParameter::clear_has_stride_height() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Holiday_PoolingParameter::clear_stride_height() {
  stride_height_ = 0u;
  clear_has_stride_height();
}
inline ::google::protobuf::uint32 Holiday_PoolingParameter::stride_height() const {
  // @@protoc_insertion_point(field_get:Holiday_PoolingParameter.stride_height)
  return stride_height_;
}
inline void Holiday_PoolingParameter::set_stride_height(::google::protobuf::uint32 value) {
  set_has_stride_height();
  stride_height_ = value;
  // @@protoc_insertion_point(field_set:Holiday_PoolingParameter.stride_height)
}

// optional uint32 stride_width = 7;
inline bool Holiday_PoolingParameter::has_stride_width() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Holiday_PoolingParameter::set_has_stride_width() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Holiday_PoolingParameter::clear_has_stride_width() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Holiday_PoolingParameter::clear_stride_width() {
  stride_width_ = 0u;
  clear_has_stride_width();
}
inline ::google::protobuf::uint32 Holiday_PoolingParameter::stride_width() const {
  // @@protoc_insertion_point(field_get:Holiday_PoolingParameter.stride_width)
  return stride_width_;
}
inline void Holiday_PoolingParameter::set_stride_width(::google::protobuf::uint32 value) {
  set_has_stride_width();
  stride_width_ = value;
  // @@protoc_insertion_point(field_set:Holiday_PoolingParameter.stride_width)
}

// optional bool global_pooling = 8 [default = false];
inline bool Holiday_PoolingParameter::has_global_pooling() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Holiday_PoolingParameter::set_has_global_pooling() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Holiday_PoolingParameter::clear_has_global_pooling() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Holiday_PoolingParameter::clear_global_pooling() {
  global_pooling_ = false;
  clear_has_global_pooling();
}
inline bool Holiday_PoolingParameter::global_pooling() const {
  // @@protoc_insertion_point(field_get:Holiday_PoolingParameter.global_pooling)
  return global_pooling_;
}
inline void Holiday_PoolingParameter::set_global_pooling(bool value) {
  set_has_global_pooling();
  global_pooling_ = value;
  // @@protoc_insertion_point(field_set:Holiday_PoolingParameter.global_pooling)
}

// optional bool valid = 9 [default = false];
inline bool Holiday_PoolingParameter::has_valid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Holiday_PoolingParameter::set_has_valid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Holiday_PoolingParameter::clear_has_valid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Holiday_PoolingParameter::clear_valid() {
  valid_ = false;
  clear_has_valid();
}
inline bool Holiday_PoolingParameter::valid() const {
  // @@protoc_insertion_point(field_get:Holiday_PoolingParameter.valid)
  return valid_;
}
inline void Holiday_PoolingParameter::set_valid(bool value) {
  set_has_valid();
  valid_ = value;
  // @@protoc_insertion_point(field_set:Holiday_PoolingParameter.valid)
}

// optional string tf_padding = 10;
inline bool Holiday_PoolingParameter::has_tf_padding() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Holiday_PoolingParameter::set_has_tf_padding() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Holiday_PoolingParameter::clear_has_tf_padding() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Holiday_PoolingParameter::clear_tf_padding() {
  if (tf_padding_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tf_padding_->clear();
  }
  clear_has_tf_padding();
}
inline const ::std::string& Holiday_PoolingParameter::tf_padding() const {
  // @@protoc_insertion_point(field_get:Holiday_PoolingParameter.tf_padding)
  return *tf_padding_;
}
inline void Holiday_PoolingParameter::set_tf_padding(const ::std::string& value) {
  set_has_tf_padding();
  if (tf_padding_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tf_padding_ = new ::std::string;
  }
  tf_padding_->assign(value);
  // @@protoc_insertion_point(field_set:Holiday_PoolingParameter.tf_padding)
}
inline void Holiday_PoolingParameter::set_tf_padding(const char* value) {
  set_has_tf_padding();
  if (tf_padding_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tf_padding_ = new ::std::string;
  }
  tf_padding_->assign(value);
  // @@protoc_insertion_point(field_set_char:Holiday_PoolingParameter.tf_padding)
}
inline void Holiday_PoolingParameter::set_tf_padding(const char* value, size_t size) {
  set_has_tf_padding();
  if (tf_padding_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tf_padding_ = new ::std::string;
  }
  tf_padding_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Holiday_PoolingParameter.tf_padding)
}
inline ::std::string* Holiday_PoolingParameter::mutable_tf_padding() {
  set_has_tf_padding();
  if (tf_padding_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tf_padding_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Holiday_PoolingParameter.tf_padding)
  return tf_padding_;
}
inline ::std::string* Holiday_PoolingParameter::release_tf_padding() {
  clear_has_tf_padding();
  if (tf_padding_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = tf_padding_;
    tf_padding_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Holiday_PoolingParameter::set_allocated_tf_padding(::std::string* tf_padding) {
  if (tf_padding_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tf_padding_;
  }
  if (tf_padding) {
    set_has_tf_padding();
    tf_padding_ = tf_padding;
  } else {
    clear_has_tf_padding();
    tf_padding_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Holiday_PoolingParameter.tf_padding)
}

// -------------------------------------------------------------------

// Holiday_PowerParameter

// optional float power = 1 [default = 1];
inline bool Holiday_PowerParameter::has_power() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Holiday_PowerParameter::set_has_power() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Holiday_PowerParameter::clear_has_power() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Holiday_PowerParameter::clear_power() {
  power_ = 1;
  clear_has_power();
}
inline float Holiday_PowerParameter::power() const {
  // @@protoc_insertion_point(field_get:Holiday_PowerParameter.power)
  return power_;
}
inline void Holiday_PowerParameter::set_power(float value) {
  set_has_power();
  power_ = value;
  // @@protoc_insertion_point(field_set:Holiday_PowerParameter.power)
}

// optional float scale = 2 [default = 1];
inline bool Holiday_PowerParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Holiday_PowerParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Holiday_PowerParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Holiday_PowerParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
inline float Holiday_PowerParameter::scale() const {
  // @@protoc_insertion_point(field_get:Holiday_PowerParameter.scale)
  return scale_;
}
inline void Holiday_PowerParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:Holiday_PowerParameter.scale)
}

// optional float shift = 3 [default = 0];
inline bool Holiday_PowerParameter::has_shift() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Holiday_PowerParameter::set_has_shift() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Holiday_PowerParameter::clear_has_shift() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Holiday_PowerParameter::clear_shift() {
  shift_ = 0;
  clear_has_shift();
}
inline float Holiday_PowerParameter::shift() const {
  // @@protoc_insertion_point(field_get:Holiday_PowerParameter.shift)
  return shift_;
}
inline void Holiday_PowerParameter::set_shift(float value) {
  set_has_shift();
  shift_ = value;
  // @@protoc_insertion_point(field_set:Holiday_PowerParameter.shift)
}

// -------------------------------------------------------------------

// Holiday_ReLUParameter

// optional float negative_slope = 1 [default = 0];
inline bool Holiday_ReLUParameter::has_negative_slope() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Holiday_ReLUParameter::set_has_negative_slope() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Holiday_ReLUParameter::clear_has_negative_slope() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Holiday_ReLUParameter::clear_negative_slope() {
  negative_slope_ = 0;
  clear_has_negative_slope();
}
inline float Holiday_ReLUParameter::negative_slope() const {
  // @@protoc_insertion_point(field_get:Holiday_ReLUParameter.negative_slope)
  return negative_slope_;
}
inline void Holiday_ReLUParameter::set_negative_slope(float value) {
  set_has_negative_slope();
  negative_slope_ = value;
  // @@protoc_insertion_point(field_set:Holiday_ReLUParameter.negative_slope)
}

// optional float max = 2;
inline bool Holiday_ReLUParameter::has_max() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Holiday_ReLUParameter::set_has_max() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Holiday_ReLUParameter::clear_has_max() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Holiday_ReLUParameter::clear_max() {
  max_ = 0;
  clear_has_max();
}
inline float Holiday_ReLUParameter::max() const {
  // @@protoc_insertion_point(field_get:Holiday_ReLUParameter.max)
  return max_;
}
inline void Holiday_ReLUParameter::set_max(float value) {
  set_has_max();
  max_ = value;
  // @@protoc_insertion_point(field_set:Holiday_ReLUParameter.max)
}

// -------------------------------------------------------------------

// Holiday_SoftmaxParameter

// optional int32 axis = 1 [default = 1];
inline bool Holiday_SoftmaxParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Holiday_SoftmaxParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Holiday_SoftmaxParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Holiday_SoftmaxParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 Holiday_SoftmaxParameter::axis() const {
  // @@protoc_insertion_point(field_get:Holiday_SoftmaxParameter.axis)
  return axis_;
}
inline void Holiday_SoftmaxParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:Holiday_SoftmaxParameter.axis)
}

// -------------------------------------------------------------------

// Holiday_SliceParameter

// optional int32 axis = 1 [default = 1];
inline bool Holiday_SliceParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Holiday_SliceParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Holiday_SliceParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Holiday_SliceParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 Holiday_SliceParameter::axis() const {
  // @@protoc_insertion_point(field_get:Holiday_SliceParameter.axis)
  return axis_;
}
inline void Holiday_SliceParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:Holiday_SliceParameter.axis)
}

// repeated uint32 slice_point = 2;
inline int Holiday_SliceParameter::slice_point_size() const {
  return slice_point_.size();
}
inline void Holiday_SliceParameter::clear_slice_point() {
  slice_point_.Clear();
}
inline ::google::protobuf::uint32 Holiday_SliceParameter::slice_point(int index) const {
  // @@protoc_insertion_point(field_get:Holiday_SliceParameter.slice_point)
  return slice_point_.Get(index);
}
inline void Holiday_SliceParameter::set_slice_point(int index, ::google::protobuf::uint32 value) {
  slice_point_.Set(index, value);
  // @@protoc_insertion_point(field_set:Holiday_SliceParameter.slice_point)
}
inline void Holiday_SliceParameter::add_slice_point(::google::protobuf::uint32 value) {
  slice_point_.Add(value);
  // @@protoc_insertion_point(field_add:Holiday_SliceParameter.slice_point)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Holiday_SliceParameter::slice_point() const {
  // @@protoc_insertion_point(field_list:Holiday_SliceParameter.slice_point)
  return slice_point_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Holiday_SliceParameter::mutable_slice_point() {
  // @@protoc_insertion_point(field_mutable_list:Holiday_SliceParameter.slice_point)
  return &slice_point_;
}

// optional uint32 slice_dim = 3 [default = 1];
inline bool Holiday_SliceParameter::has_slice_dim() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Holiday_SliceParameter::set_has_slice_dim() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Holiday_SliceParameter::clear_has_slice_dim() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Holiday_SliceParameter::clear_slice_dim() {
  slice_dim_ = 1u;
  clear_has_slice_dim();
}
inline ::google::protobuf::uint32 Holiday_SliceParameter::slice_dim() const {
  // @@protoc_insertion_point(field_get:Holiday_SliceParameter.slice_dim)
  return slice_dim_;
}
inline void Holiday_SliceParameter::set_slice_dim(::google::protobuf::uint32 value) {
  set_has_slice_dim();
  slice_dim_ = value;
  // @@protoc_insertion_point(field_set:Holiday_SliceParameter.slice_dim)
}

// -------------------------------------------------------------------

// Holiday_SigmoidParameter

// -------------------------------------------------------------------

// Holiday_SpaceToBatchNDLayer

// repeated int32 block_shape = 1;
inline int Holiday_SpaceToBatchNDLayer::block_shape_size() const {
  return block_shape_.size();
}
inline void Holiday_SpaceToBatchNDLayer::clear_block_shape() {
  block_shape_.Clear();
}
inline ::google::protobuf::int32 Holiday_SpaceToBatchNDLayer::block_shape(int index) const {
  // @@protoc_insertion_point(field_get:Holiday_SpaceToBatchNDLayer.block_shape)
  return block_shape_.Get(index);
}
inline void Holiday_SpaceToBatchNDLayer::set_block_shape(int index, ::google::protobuf::int32 value) {
  block_shape_.Set(index, value);
  // @@protoc_insertion_point(field_set:Holiday_SpaceToBatchNDLayer.block_shape)
}
inline void Holiday_SpaceToBatchNDLayer::add_block_shape(::google::protobuf::int32 value) {
  block_shape_.Add(value);
  // @@protoc_insertion_point(field_add:Holiday_SpaceToBatchNDLayer.block_shape)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Holiday_SpaceToBatchNDLayer::block_shape() const {
  // @@protoc_insertion_point(field_list:Holiday_SpaceToBatchNDLayer.block_shape)
  return block_shape_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Holiday_SpaceToBatchNDLayer::mutable_block_shape() {
  // @@protoc_insertion_point(field_mutable_list:Holiday_SpaceToBatchNDLayer.block_shape)
  return &block_shape_;
}

// repeated int32 paddings = 2;
inline int Holiday_SpaceToBatchNDLayer::paddings_size() const {
  return paddings_.size();
}
inline void Holiday_SpaceToBatchNDLayer::clear_paddings() {
  paddings_.Clear();
}
inline ::google::protobuf::int32 Holiday_SpaceToBatchNDLayer::paddings(int index) const {
  // @@protoc_insertion_point(field_get:Holiday_SpaceToBatchNDLayer.paddings)
  return paddings_.Get(index);
}
inline void Holiday_SpaceToBatchNDLayer::set_paddings(int index, ::google::protobuf::int32 value) {
  paddings_.Set(index, value);
  // @@protoc_insertion_point(field_set:Holiday_SpaceToBatchNDLayer.paddings)
}
inline void Holiday_SpaceToBatchNDLayer::add_paddings(::google::protobuf::int32 value) {
  paddings_.Add(value);
  // @@protoc_insertion_point(field_add:Holiday_SpaceToBatchNDLayer.paddings)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Holiday_SpaceToBatchNDLayer::paddings() const {
  // @@protoc_insertion_point(field_list:Holiday_SpaceToBatchNDLayer.paddings)
  return paddings_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Holiday_SpaceToBatchNDLayer::mutable_paddings() {
  // @@protoc_insertion_point(field_mutable_list:Holiday_SpaceToBatchNDLayer.paddings)
  return &paddings_;
}

// -------------------------------------------------------------------

// Holiday_BatchToSpaceNDLayer

// repeated int32 block_shape = 1;
inline int Holiday_BatchToSpaceNDLayer::block_shape_size() const {
  return block_shape_.size();
}
inline void Holiday_BatchToSpaceNDLayer::clear_block_shape() {
  block_shape_.Clear();
}
inline ::google::protobuf::int32 Holiday_BatchToSpaceNDLayer::block_shape(int index) const {
  // @@protoc_insertion_point(field_get:Holiday_BatchToSpaceNDLayer.block_shape)
  return block_shape_.Get(index);
}
inline void Holiday_BatchToSpaceNDLayer::set_block_shape(int index, ::google::protobuf::int32 value) {
  block_shape_.Set(index, value);
  // @@protoc_insertion_point(field_set:Holiday_BatchToSpaceNDLayer.block_shape)
}
inline void Holiday_BatchToSpaceNDLayer::add_block_shape(::google::protobuf::int32 value) {
  block_shape_.Add(value);
  // @@protoc_insertion_point(field_add:Holiday_BatchToSpaceNDLayer.block_shape)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Holiday_BatchToSpaceNDLayer::block_shape() const {
  // @@protoc_insertion_point(field_list:Holiday_BatchToSpaceNDLayer.block_shape)
  return block_shape_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Holiday_BatchToSpaceNDLayer::mutable_block_shape() {
  // @@protoc_insertion_point(field_mutable_list:Holiday_BatchToSpaceNDLayer.block_shape)
  return &block_shape_;
}

// repeated int32 crops = 2;
inline int Holiday_BatchToSpaceNDLayer::crops_size() const {
  return crops_.size();
}
inline void Holiday_BatchToSpaceNDLayer::clear_crops() {
  crops_.Clear();
}
inline ::google::protobuf::int32 Holiday_BatchToSpaceNDLayer::crops(int index) const {
  // @@protoc_insertion_point(field_get:Holiday_BatchToSpaceNDLayer.crops)
  return crops_.Get(index);
}
inline void Holiday_BatchToSpaceNDLayer::set_crops(int index, ::google::protobuf::int32 value) {
  crops_.Set(index, value);
  // @@protoc_insertion_point(field_set:Holiday_BatchToSpaceNDLayer.crops)
}
inline void Holiday_BatchToSpaceNDLayer::add_crops(::google::protobuf::int32 value) {
  crops_.Add(value);
  // @@protoc_insertion_point(field_add:Holiday_BatchToSpaceNDLayer.crops)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Holiday_BatchToSpaceNDLayer::crops() const {
  // @@protoc_insertion_point(field_list:Holiday_BatchToSpaceNDLayer.crops)
  return crops_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Holiday_BatchToSpaceNDLayer::mutable_crops() {
  // @@protoc_insertion_point(field_mutable_list:Holiday_BatchToSpaceNDLayer.crops)
  return &crops_;
}

// -------------------------------------------------------------------

// Holiday_ReshapeLayer

// repeated int32 shape = 1;
inline int Holiday_ReshapeLayer::shape_size() const {
  return shape_.size();
}
inline void Holiday_ReshapeLayer::clear_shape() {
  shape_.Clear();
}
inline ::google::protobuf::int32 Holiday_ReshapeLayer::shape(int index) const {
  // @@protoc_insertion_point(field_get:Holiday_ReshapeLayer.shape)
  return shape_.Get(index);
}
inline void Holiday_ReshapeLayer::set_shape(int index, ::google::protobuf::int32 value) {
  shape_.Set(index, value);
  // @@protoc_insertion_point(field_set:Holiday_ReshapeLayer.shape)
}
inline void Holiday_ReshapeLayer::add_shape(::google::protobuf::int32 value) {
  shape_.Add(value);
  // @@protoc_insertion_point(field_add:Holiday_ReshapeLayer.shape)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Holiday_ReshapeLayer::shape() const {
  // @@protoc_insertion_point(field_list:Holiday_ReshapeLayer.shape)
  return shape_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Holiday_ReshapeLayer::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:Holiday_ReshapeLayer.shape)
  return &shape_;
}

// repeated int32 permute = 2;
inline int Holiday_ReshapeLayer::permute_size() const {
  return permute_.size();
}
inline void Holiday_ReshapeLayer::clear_permute() {
  permute_.Clear();
}
inline ::google::protobuf::int32 Holiday_ReshapeLayer::permute(int index) const {
  // @@protoc_insertion_point(field_get:Holiday_ReshapeLayer.permute)
  return permute_.Get(index);
}
inline void Holiday_ReshapeLayer::set_permute(int index, ::google::protobuf::int32 value) {
  permute_.Set(index, value);
  // @@protoc_insertion_point(field_set:Holiday_ReshapeLayer.permute)
}
inline void Holiday_ReshapeLayer::add_permute(::google::protobuf::int32 value) {
  permute_.Add(value);
  // @@protoc_insertion_point(field_add:Holiday_ReshapeLayer.permute)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Holiday_ReshapeLayer::permute() const {
  // @@protoc_insertion_point(field_list:Holiday_ReshapeLayer.permute)
  return permute_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Holiday_ReshapeLayer::mutable_permute() {
  // @@protoc_insertion_point(field_mutable_list:Holiday_ReshapeLayer.permute)
  return &permute_;
}

// -------------------------------------------------------------------

// Holiday_RealMulLayer

// optional .Holiday_BlobProto y = 1;
inline bool Holiday_RealMulLayer::has_y() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Holiday_RealMulLayer::set_has_y() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Holiday_RealMulLayer::clear_has_y() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Holiday_RealMulLayer::clear_y() {
  if (y_ != NULL) y_->::Holiday_BlobProto::Clear();
  clear_has_y();
}
inline const ::Holiday_BlobProto& Holiday_RealMulLayer::y() const {
  // @@protoc_insertion_point(field_get:Holiday_RealMulLayer.y)
  return y_ != NULL ? *y_ : *default_instance_->y_;
}
inline ::Holiday_BlobProto* Holiday_RealMulLayer::mutable_y() {
  set_has_y();
  if (y_ == NULL) y_ = new ::Holiday_BlobProto;
  // @@protoc_insertion_point(field_mutable:Holiday_RealMulLayer.y)
  return y_;
}
inline ::Holiday_BlobProto* Holiday_RealMulLayer::release_y() {
  clear_has_y();
  ::Holiday_BlobProto* temp = y_;
  y_ = NULL;
  return temp;
}
inline void Holiday_RealMulLayer::set_allocated_y(::Holiday_BlobProto* y) {
  delete y_;
  y_ = y;
  if (y) {
    set_has_y();
  } else {
    clear_has_y();
  }
  // @@protoc_insertion_point(field_set_allocated:Holiday_RealMulLayer.y)
}

// -------------------------------------------------------------------

// Holiday_LayerParameter

// repeated string bottom = 1;
inline int Holiday_LayerParameter::bottom_size() const {
  return bottom_.size();
}
inline void Holiday_LayerParameter::clear_bottom() {
  bottom_.Clear();
}
inline const ::std::string& Holiday_LayerParameter::bottom(int index) const {
  // @@protoc_insertion_point(field_get:Holiday_LayerParameter.bottom)
  return bottom_.Get(index);
}
inline ::std::string* Holiday_LayerParameter::mutable_bottom(int index) {
  // @@protoc_insertion_point(field_mutable:Holiday_LayerParameter.bottom)
  return bottom_.Mutable(index);
}
inline void Holiday_LayerParameter::set_bottom(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Holiday_LayerParameter.bottom)
  bottom_.Mutable(index)->assign(value);
}
inline void Holiday_LayerParameter::set_bottom(int index, const char* value) {
  bottom_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Holiday_LayerParameter.bottom)
}
inline void Holiday_LayerParameter::set_bottom(int index, const char* value, size_t size) {
  bottom_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Holiday_LayerParameter.bottom)
}
inline ::std::string* Holiday_LayerParameter::add_bottom() {
  return bottom_.Add();
}
inline void Holiday_LayerParameter::add_bottom(const ::std::string& value) {
  bottom_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Holiday_LayerParameter.bottom)
}
inline void Holiday_LayerParameter::add_bottom(const char* value) {
  bottom_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Holiday_LayerParameter.bottom)
}
inline void Holiday_LayerParameter::add_bottom(const char* value, size_t size) {
  bottom_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Holiday_LayerParameter.bottom)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Holiday_LayerParameter::bottom() const {
  // @@protoc_insertion_point(field_list:Holiday_LayerParameter.bottom)
  return bottom_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Holiday_LayerParameter::mutable_bottom() {
  // @@protoc_insertion_point(field_mutable_list:Holiday_LayerParameter.bottom)
  return &bottom_;
}

// repeated string top = 2;
inline int Holiday_LayerParameter::top_size() const {
  return top_.size();
}
inline void Holiday_LayerParameter::clear_top() {
  top_.Clear();
}
inline const ::std::string& Holiday_LayerParameter::top(int index) const {
  // @@protoc_insertion_point(field_get:Holiday_LayerParameter.top)
  return top_.Get(index);
}
inline ::std::string* Holiday_LayerParameter::mutable_top(int index) {
  // @@protoc_insertion_point(field_mutable:Holiday_LayerParameter.top)
  return top_.Mutable(index);
}
inline void Holiday_LayerParameter::set_top(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Holiday_LayerParameter.top)
  top_.Mutable(index)->assign(value);
}
inline void Holiday_LayerParameter::set_top(int index, const char* value) {
  top_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Holiday_LayerParameter.top)
}
inline void Holiday_LayerParameter::set_top(int index, const char* value, size_t size) {
  top_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Holiday_LayerParameter.top)
}
inline ::std::string* Holiday_LayerParameter::add_top() {
  return top_.Add();
}
inline void Holiday_LayerParameter::add_top(const ::std::string& value) {
  top_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Holiday_LayerParameter.top)
}
inline void Holiday_LayerParameter::add_top(const char* value) {
  top_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Holiday_LayerParameter.top)
}
inline void Holiday_LayerParameter::add_top(const char* value, size_t size) {
  top_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Holiday_LayerParameter.top)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Holiday_LayerParameter::top() const {
  // @@protoc_insertion_point(field_list:Holiday_LayerParameter.top)
  return top_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Holiday_LayerParameter::mutable_top() {
  // @@protoc_insertion_point(field_mutable_list:Holiday_LayerParameter.top)
  return &top_;
}

// optional string name = 3;
inline bool Holiday_LayerParameter::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Holiday_LayerParameter::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Holiday_LayerParameter::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Holiday_LayerParameter::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Holiday_LayerParameter::name() const {
  // @@protoc_insertion_point(field_get:Holiday_LayerParameter.name)
  return *name_;
}
inline void Holiday_LayerParameter::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Holiday_LayerParameter.name)
}
inline void Holiday_LayerParameter::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Holiday_LayerParameter.name)
}
inline void Holiday_LayerParameter::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Holiday_LayerParameter.name)
}
inline ::std::string* Holiday_LayerParameter::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Holiday_LayerParameter.name)
  return name_;
}
inline ::std::string* Holiday_LayerParameter::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Holiday_LayerParameter::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Holiday_LayerParameter.name)
}

// optional uint32 type = 4;
inline bool Holiday_LayerParameter::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Holiday_LayerParameter::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Holiday_LayerParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Holiday_LayerParameter::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 Holiday_LayerParameter::type() const {
  // @@protoc_insertion_point(field_get:Holiday_LayerParameter.type)
  return type_;
}
inline void Holiday_LayerParameter::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Holiday_LayerParameter.type)
}

// repeated uint32 top_index = 5;
inline int Holiday_LayerParameter::top_index_size() const {
  return top_index_.size();
}
inline void Holiday_LayerParameter::clear_top_index() {
  top_index_.Clear();
}
inline ::google::protobuf::uint32 Holiday_LayerParameter::top_index(int index) const {
  // @@protoc_insertion_point(field_get:Holiday_LayerParameter.top_index)
  return top_index_.Get(index);
}
inline void Holiday_LayerParameter::set_top_index(int index, ::google::protobuf::uint32 value) {
  top_index_.Set(index, value);
  // @@protoc_insertion_point(field_set:Holiday_LayerParameter.top_index)
}
inline void Holiday_LayerParameter::add_top_index(::google::protobuf::uint32 value) {
  top_index_.Add(value);
  // @@protoc_insertion_point(field_add:Holiday_LayerParameter.top_index)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Holiday_LayerParameter::top_index() const {
  // @@protoc_insertion_point(field_list:Holiday_LayerParameter.top_index)
  return top_index_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Holiday_LayerParameter::mutable_top_index() {
  // @@protoc_insertion_point(field_mutable_list:Holiday_LayerParameter.top_index)
  return &top_index_;
}

// repeated uint32 bottom_index = 6;
inline int Holiday_LayerParameter::bottom_index_size() const {
  return bottom_index_.size();
}
inline void Holiday_LayerParameter::clear_bottom_index() {
  bottom_index_.Clear();
}
inline ::google::protobuf::uint32 Holiday_LayerParameter::bottom_index(int index) const {
  // @@protoc_insertion_point(field_get:Holiday_LayerParameter.bottom_index)
  return bottom_index_.Get(index);
}
inline void Holiday_LayerParameter::set_bottom_index(int index, ::google::protobuf::uint32 value) {
  bottom_index_.Set(index, value);
  // @@protoc_insertion_point(field_set:Holiday_LayerParameter.bottom_index)
}
inline void Holiday_LayerParameter::add_bottom_index(::google::protobuf::uint32 value) {
  bottom_index_.Add(value);
  // @@protoc_insertion_point(field_add:Holiday_LayerParameter.bottom_index)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Holiday_LayerParameter::bottom_index() const {
  // @@protoc_insertion_point(field_list:Holiday_LayerParameter.bottom_index)
  return bottom_index_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Holiday_LayerParameter::mutable_bottom_index() {
  // @@protoc_insertion_point(field_mutable_list:Holiday_LayerParameter.bottom_index)
  return &bottom_index_;
}

// optional .Holiday_ConcatParameter concat_param = 7;
inline bool Holiday_LayerParameter::has_concat_param() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Holiday_LayerParameter::set_has_concat_param() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Holiday_LayerParameter::clear_has_concat_param() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Holiday_LayerParameter::clear_concat_param() {
  if (concat_param_ != NULL) concat_param_->::Holiday_ConcatParameter::Clear();
  clear_has_concat_param();
}
inline const ::Holiday_ConcatParameter& Holiday_LayerParameter::concat_param() const {
  // @@protoc_insertion_point(field_get:Holiday_LayerParameter.concat_param)
  return concat_param_ != NULL ? *concat_param_ : *default_instance_->concat_param_;
}
inline ::Holiday_ConcatParameter* Holiday_LayerParameter::mutable_concat_param() {
  set_has_concat_param();
  if (concat_param_ == NULL) concat_param_ = new ::Holiday_ConcatParameter;
  // @@protoc_insertion_point(field_mutable:Holiday_LayerParameter.concat_param)
  return concat_param_;
}
inline ::Holiday_ConcatParameter* Holiday_LayerParameter::release_concat_param() {
  clear_has_concat_param();
  ::Holiday_ConcatParameter* temp = concat_param_;
  concat_param_ = NULL;
  return temp;
}
inline void Holiday_LayerParameter::set_allocated_concat_param(::Holiday_ConcatParameter* concat_param) {
  delete concat_param_;
  concat_param_ = concat_param;
  if (concat_param) {
    set_has_concat_param();
  } else {
    clear_has_concat_param();
  }
  // @@protoc_insertion_point(field_set_allocated:Holiday_LayerParameter.concat_param)
}

// optional .Holiday_ConvolutionParameter convolution_param = 8;
inline bool Holiday_LayerParameter::has_convolution_param() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Holiday_LayerParameter::set_has_convolution_param() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Holiday_LayerParameter::clear_has_convolution_param() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Holiday_LayerParameter::clear_convolution_param() {
  if (convolution_param_ != NULL) convolution_param_->::Holiday_ConvolutionParameter::Clear();
  clear_has_convolution_param();
}
inline const ::Holiday_ConvolutionParameter& Holiday_LayerParameter::convolution_param() const {
  // @@protoc_insertion_point(field_get:Holiday_LayerParameter.convolution_param)
  return convolution_param_ != NULL ? *convolution_param_ : *default_instance_->convolution_param_;
}
inline ::Holiday_ConvolutionParameter* Holiday_LayerParameter::mutable_convolution_param() {
  set_has_convolution_param();
  if (convolution_param_ == NULL) convolution_param_ = new ::Holiday_ConvolutionParameter;
  // @@protoc_insertion_point(field_mutable:Holiday_LayerParameter.convolution_param)
  return convolution_param_;
}
inline ::Holiday_ConvolutionParameter* Holiday_LayerParameter::release_convolution_param() {
  clear_has_convolution_param();
  ::Holiday_ConvolutionParameter* temp = convolution_param_;
  convolution_param_ = NULL;
  return temp;
}
inline void Holiday_LayerParameter::set_allocated_convolution_param(::Holiday_ConvolutionParameter* convolution_param) {
  delete convolution_param_;
  convolution_param_ = convolution_param;
  if (convolution_param) {
    set_has_convolution_param();
  } else {
    clear_has_convolution_param();
  }
  // @@protoc_insertion_point(field_set_allocated:Holiday_LayerParameter.convolution_param)
}

// optional .Holiday_EltwiseParameter eltwise_param = 9;
inline bool Holiday_LayerParameter::has_eltwise_param() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Holiday_LayerParameter::set_has_eltwise_param() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Holiday_LayerParameter::clear_has_eltwise_param() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Holiday_LayerParameter::clear_eltwise_param() {
  if (eltwise_param_ != NULL) eltwise_param_->::Holiday_EltwiseParameter::Clear();
  clear_has_eltwise_param();
}
inline const ::Holiday_EltwiseParameter& Holiday_LayerParameter::eltwise_param() const {
  // @@protoc_insertion_point(field_get:Holiday_LayerParameter.eltwise_param)
  return eltwise_param_ != NULL ? *eltwise_param_ : *default_instance_->eltwise_param_;
}
inline ::Holiday_EltwiseParameter* Holiday_LayerParameter::mutable_eltwise_param() {
  set_has_eltwise_param();
  if (eltwise_param_ == NULL) eltwise_param_ = new ::Holiday_EltwiseParameter;
  // @@protoc_insertion_point(field_mutable:Holiday_LayerParameter.eltwise_param)
  return eltwise_param_;
}
inline ::Holiday_EltwiseParameter* Holiday_LayerParameter::release_eltwise_param() {
  clear_has_eltwise_param();
  ::Holiday_EltwiseParameter* temp = eltwise_param_;
  eltwise_param_ = NULL;
  return temp;
}
inline void Holiday_LayerParameter::set_allocated_eltwise_param(::Holiday_EltwiseParameter* eltwise_param) {
  delete eltwise_param_;
  eltwise_param_ = eltwise_param;
  if (eltwise_param) {
    set_has_eltwise_param();
  } else {
    clear_has_eltwise_param();
  }
  // @@protoc_insertion_point(field_set_allocated:Holiday_LayerParameter.eltwise_param)
}

// optional .Holiday_ExpParameter exp_param = 10;
inline bool Holiday_LayerParameter::has_exp_param() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Holiday_LayerParameter::set_has_exp_param() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Holiday_LayerParameter::clear_has_exp_param() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Holiday_LayerParameter::clear_exp_param() {
  if (exp_param_ != NULL) exp_param_->::Holiday_ExpParameter::Clear();
  clear_has_exp_param();
}
inline const ::Holiday_ExpParameter& Holiday_LayerParameter::exp_param() const {
  // @@protoc_insertion_point(field_get:Holiday_LayerParameter.exp_param)
  return exp_param_ != NULL ? *exp_param_ : *default_instance_->exp_param_;
}
inline ::Holiday_ExpParameter* Holiday_LayerParameter::mutable_exp_param() {
  set_has_exp_param();
  if (exp_param_ == NULL) exp_param_ = new ::Holiday_ExpParameter;
  // @@protoc_insertion_point(field_mutable:Holiday_LayerParameter.exp_param)
  return exp_param_;
}
inline ::Holiday_ExpParameter* Holiday_LayerParameter::release_exp_param() {
  clear_has_exp_param();
  ::Holiday_ExpParameter* temp = exp_param_;
  exp_param_ = NULL;
  return temp;
}
inline void Holiday_LayerParameter::set_allocated_exp_param(::Holiday_ExpParameter* exp_param) {
  delete exp_param_;
  exp_param_ = exp_param;
  if (exp_param) {
    set_has_exp_param();
  } else {
    clear_has_exp_param();
  }
  // @@protoc_insertion_point(field_set_allocated:Holiday_LayerParameter.exp_param)
}

// optional .Holiday_InnerProductParameter inner_product_param = 11;
inline bool Holiday_LayerParameter::has_inner_product_param() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Holiday_LayerParameter::set_has_inner_product_param() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Holiday_LayerParameter::clear_has_inner_product_param() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Holiday_LayerParameter::clear_inner_product_param() {
  if (inner_product_param_ != NULL) inner_product_param_->::Holiday_InnerProductParameter::Clear();
  clear_has_inner_product_param();
}
inline const ::Holiday_InnerProductParameter& Holiday_LayerParameter::inner_product_param() const {
  // @@protoc_insertion_point(field_get:Holiday_LayerParameter.inner_product_param)
  return inner_product_param_ != NULL ? *inner_product_param_ : *default_instance_->inner_product_param_;
}
inline ::Holiday_InnerProductParameter* Holiday_LayerParameter::mutable_inner_product_param() {
  set_has_inner_product_param();
  if (inner_product_param_ == NULL) inner_product_param_ = new ::Holiday_InnerProductParameter;
  // @@protoc_insertion_point(field_mutable:Holiday_LayerParameter.inner_product_param)
  return inner_product_param_;
}
inline ::Holiday_InnerProductParameter* Holiday_LayerParameter::release_inner_product_param() {
  clear_has_inner_product_param();
  ::Holiday_InnerProductParameter* temp = inner_product_param_;
  inner_product_param_ = NULL;
  return temp;
}
inline void Holiday_LayerParameter::set_allocated_inner_product_param(::Holiday_InnerProductParameter* inner_product_param) {
  delete inner_product_param_;
  inner_product_param_ = inner_product_param;
  if (inner_product_param) {
    set_has_inner_product_param();
  } else {
    clear_has_inner_product_param();
  }
  // @@protoc_insertion_point(field_set_allocated:Holiday_LayerParameter.inner_product_param)
}

// optional .Holiday_LRNParameter lrn_param = 12;
inline bool Holiday_LayerParameter::has_lrn_param() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Holiday_LayerParameter::set_has_lrn_param() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Holiday_LayerParameter::clear_has_lrn_param() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Holiday_LayerParameter::clear_lrn_param() {
  if (lrn_param_ != NULL) lrn_param_->::Holiday_LRNParameter::Clear();
  clear_has_lrn_param();
}
inline const ::Holiday_LRNParameter& Holiday_LayerParameter::lrn_param() const {
  // @@protoc_insertion_point(field_get:Holiday_LayerParameter.lrn_param)
  return lrn_param_ != NULL ? *lrn_param_ : *default_instance_->lrn_param_;
}
inline ::Holiday_LRNParameter* Holiday_LayerParameter::mutable_lrn_param() {
  set_has_lrn_param();
  if (lrn_param_ == NULL) lrn_param_ = new ::Holiday_LRNParameter;
  // @@protoc_insertion_point(field_mutable:Holiday_LayerParameter.lrn_param)
  return lrn_param_;
}
inline ::Holiday_LRNParameter* Holiday_LayerParameter::release_lrn_param() {
  clear_has_lrn_param();
  ::Holiday_LRNParameter* temp = lrn_param_;
  lrn_param_ = NULL;
  return temp;
}
inline void Holiday_LayerParameter::set_allocated_lrn_param(::Holiday_LRNParameter* lrn_param) {
  delete lrn_param_;
  lrn_param_ = lrn_param;
  if (lrn_param) {
    set_has_lrn_param();
  } else {
    clear_has_lrn_param();
  }
  // @@protoc_insertion_point(field_set_allocated:Holiday_LayerParameter.lrn_param)
}

// optional .Holiday_MemoryDataParameterProcess memory_data_param = 13;
inline bool Holiday_LayerParameter::has_memory_data_param() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Holiday_LayerParameter::set_has_memory_data_param() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Holiday_LayerParameter::clear_has_memory_data_param() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Holiday_LayerParameter::clear_memory_data_param() {
  if (memory_data_param_ != NULL) memory_data_param_->::Holiday_MemoryDataParameterProcess::Clear();
  clear_has_memory_data_param();
}
inline const ::Holiday_MemoryDataParameterProcess& Holiday_LayerParameter::memory_data_param() const {
  // @@protoc_insertion_point(field_get:Holiday_LayerParameter.memory_data_param)
  return memory_data_param_ != NULL ? *memory_data_param_ : *default_instance_->memory_data_param_;
}
inline ::Holiday_MemoryDataParameterProcess* Holiday_LayerParameter::mutable_memory_data_param() {
  set_has_memory_data_param();
  if (memory_data_param_ == NULL) memory_data_param_ = new ::Holiday_MemoryDataParameterProcess;
  // @@protoc_insertion_point(field_mutable:Holiday_LayerParameter.memory_data_param)
  return memory_data_param_;
}
inline ::Holiday_MemoryDataParameterProcess* Holiday_LayerParameter::release_memory_data_param() {
  clear_has_memory_data_param();
  ::Holiday_MemoryDataParameterProcess* temp = memory_data_param_;
  memory_data_param_ = NULL;
  return temp;
}
inline void Holiday_LayerParameter::set_allocated_memory_data_param(::Holiday_MemoryDataParameterProcess* memory_data_param) {
  delete memory_data_param_;
  memory_data_param_ = memory_data_param;
  if (memory_data_param) {
    set_has_memory_data_param();
  } else {
    clear_has_memory_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:Holiday_LayerParameter.memory_data_param)
}

// optional .Holiday_PoolingParameter pooling_param = 14;
inline bool Holiday_LayerParameter::has_pooling_param() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Holiday_LayerParameter::set_has_pooling_param() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Holiday_LayerParameter::clear_has_pooling_param() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Holiday_LayerParameter::clear_pooling_param() {
  if (pooling_param_ != NULL) pooling_param_->::Holiday_PoolingParameter::Clear();
  clear_has_pooling_param();
}
inline const ::Holiday_PoolingParameter& Holiday_LayerParameter::pooling_param() const {
  // @@protoc_insertion_point(field_get:Holiday_LayerParameter.pooling_param)
  return pooling_param_ != NULL ? *pooling_param_ : *default_instance_->pooling_param_;
}
inline ::Holiday_PoolingParameter* Holiday_LayerParameter::mutable_pooling_param() {
  set_has_pooling_param();
  if (pooling_param_ == NULL) pooling_param_ = new ::Holiday_PoolingParameter;
  // @@protoc_insertion_point(field_mutable:Holiday_LayerParameter.pooling_param)
  return pooling_param_;
}
inline ::Holiday_PoolingParameter* Holiday_LayerParameter::release_pooling_param() {
  clear_has_pooling_param();
  ::Holiday_PoolingParameter* temp = pooling_param_;
  pooling_param_ = NULL;
  return temp;
}
inline void Holiday_LayerParameter::set_allocated_pooling_param(::Holiday_PoolingParameter* pooling_param) {
  delete pooling_param_;
  pooling_param_ = pooling_param;
  if (pooling_param) {
    set_has_pooling_param();
  } else {
    clear_has_pooling_param();
  }
  // @@protoc_insertion_point(field_set_allocated:Holiday_LayerParameter.pooling_param)
}

// optional .Holiday_PowerParameter power_param = 15;
inline bool Holiday_LayerParameter::has_power_param() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Holiday_LayerParameter::set_has_power_param() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Holiday_LayerParameter::clear_has_power_param() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Holiday_LayerParameter::clear_power_param() {
  if (power_param_ != NULL) power_param_->::Holiday_PowerParameter::Clear();
  clear_has_power_param();
}
inline const ::Holiday_PowerParameter& Holiday_LayerParameter::power_param() const {
  // @@protoc_insertion_point(field_get:Holiday_LayerParameter.power_param)
  return power_param_ != NULL ? *power_param_ : *default_instance_->power_param_;
}
inline ::Holiday_PowerParameter* Holiday_LayerParameter::mutable_power_param() {
  set_has_power_param();
  if (power_param_ == NULL) power_param_ = new ::Holiday_PowerParameter;
  // @@protoc_insertion_point(field_mutable:Holiday_LayerParameter.power_param)
  return power_param_;
}
inline ::Holiday_PowerParameter* Holiday_LayerParameter::release_power_param() {
  clear_has_power_param();
  ::Holiday_PowerParameter* temp = power_param_;
  power_param_ = NULL;
  return temp;
}
inline void Holiday_LayerParameter::set_allocated_power_param(::Holiday_PowerParameter* power_param) {
  delete power_param_;
  power_param_ = power_param;
  if (power_param) {
    set_has_power_param();
  } else {
    clear_has_power_param();
  }
  // @@protoc_insertion_point(field_set_allocated:Holiday_LayerParameter.power_param)
}

// optional .Holiday_ReLUParameter relu_param = 16;
inline bool Holiday_LayerParameter::has_relu_param() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Holiday_LayerParameter::set_has_relu_param() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Holiday_LayerParameter::clear_has_relu_param() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Holiday_LayerParameter::clear_relu_param() {
  if (relu_param_ != NULL) relu_param_->::Holiday_ReLUParameter::Clear();
  clear_has_relu_param();
}
inline const ::Holiday_ReLUParameter& Holiday_LayerParameter::relu_param() const {
  // @@protoc_insertion_point(field_get:Holiday_LayerParameter.relu_param)
  return relu_param_ != NULL ? *relu_param_ : *default_instance_->relu_param_;
}
inline ::Holiday_ReLUParameter* Holiday_LayerParameter::mutable_relu_param() {
  set_has_relu_param();
  if (relu_param_ == NULL) relu_param_ = new ::Holiday_ReLUParameter;
  // @@protoc_insertion_point(field_mutable:Holiday_LayerParameter.relu_param)
  return relu_param_;
}
inline ::Holiday_ReLUParameter* Holiday_LayerParameter::release_relu_param() {
  clear_has_relu_param();
  ::Holiday_ReLUParameter* temp = relu_param_;
  relu_param_ = NULL;
  return temp;
}
inline void Holiday_LayerParameter::set_allocated_relu_param(::Holiday_ReLUParameter* relu_param) {
  delete relu_param_;
  relu_param_ = relu_param;
  if (relu_param) {
    set_has_relu_param();
  } else {
    clear_has_relu_param();
  }
  // @@protoc_insertion_point(field_set_allocated:Holiday_LayerParameter.relu_param)
}

// optional .Holiday_SoftmaxParameter softmax_param = 17;
inline bool Holiday_LayerParameter::has_softmax_param() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Holiday_LayerParameter::set_has_softmax_param() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Holiday_LayerParameter::clear_has_softmax_param() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Holiday_LayerParameter::clear_softmax_param() {
  if (softmax_param_ != NULL) softmax_param_->::Holiday_SoftmaxParameter::Clear();
  clear_has_softmax_param();
}
inline const ::Holiday_SoftmaxParameter& Holiday_LayerParameter::softmax_param() const {
  // @@protoc_insertion_point(field_get:Holiday_LayerParameter.softmax_param)
  return softmax_param_ != NULL ? *softmax_param_ : *default_instance_->softmax_param_;
}
inline ::Holiday_SoftmaxParameter* Holiday_LayerParameter::mutable_softmax_param() {
  set_has_softmax_param();
  if (softmax_param_ == NULL) softmax_param_ = new ::Holiday_SoftmaxParameter;
  // @@protoc_insertion_point(field_mutable:Holiday_LayerParameter.softmax_param)
  return softmax_param_;
}
inline ::Holiday_SoftmaxParameter* Holiday_LayerParameter::release_softmax_param() {
  clear_has_softmax_param();
  ::Holiday_SoftmaxParameter* temp = softmax_param_;
  softmax_param_ = NULL;
  return temp;
}
inline void Holiday_LayerParameter::set_allocated_softmax_param(::Holiday_SoftmaxParameter* softmax_param) {
  delete softmax_param_;
  softmax_param_ = softmax_param;
  if (softmax_param) {
    set_has_softmax_param();
  } else {
    clear_has_softmax_param();
  }
  // @@protoc_insertion_point(field_set_allocated:Holiday_LayerParameter.softmax_param)
}

// optional .Holiday_SliceParameter slice_param = 18;
inline bool Holiday_LayerParameter::has_slice_param() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Holiday_LayerParameter::set_has_slice_param() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Holiday_LayerParameter::clear_has_slice_param() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Holiday_LayerParameter::clear_slice_param() {
  if (slice_param_ != NULL) slice_param_->::Holiday_SliceParameter::Clear();
  clear_has_slice_param();
}
inline const ::Holiday_SliceParameter& Holiday_LayerParameter::slice_param() const {
  // @@protoc_insertion_point(field_get:Holiday_LayerParameter.slice_param)
  return slice_param_ != NULL ? *slice_param_ : *default_instance_->slice_param_;
}
inline ::Holiday_SliceParameter* Holiday_LayerParameter::mutable_slice_param() {
  set_has_slice_param();
  if (slice_param_ == NULL) slice_param_ = new ::Holiday_SliceParameter;
  // @@protoc_insertion_point(field_mutable:Holiday_LayerParameter.slice_param)
  return slice_param_;
}
inline ::Holiday_SliceParameter* Holiday_LayerParameter::release_slice_param() {
  clear_has_slice_param();
  ::Holiday_SliceParameter* temp = slice_param_;
  slice_param_ = NULL;
  return temp;
}
inline void Holiday_LayerParameter::set_allocated_slice_param(::Holiday_SliceParameter* slice_param) {
  delete slice_param_;
  slice_param_ = slice_param;
  if (slice_param) {
    set_has_slice_param();
  } else {
    clear_has_slice_param();
  }
  // @@protoc_insertion_point(field_set_allocated:Holiday_LayerParameter.slice_param)
}

// optional .Holiday_TransformationParameter transform_param = 19;
inline bool Holiday_LayerParameter::has_transform_param() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Holiday_LayerParameter::set_has_transform_param() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Holiday_LayerParameter::clear_has_transform_param() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Holiday_LayerParameter::clear_transform_param() {
  if (transform_param_ != NULL) transform_param_->::Holiday_TransformationParameter::Clear();
  clear_has_transform_param();
}
inline const ::Holiday_TransformationParameter& Holiday_LayerParameter::transform_param() const {
  // @@protoc_insertion_point(field_get:Holiday_LayerParameter.transform_param)
  return transform_param_ != NULL ? *transform_param_ : *default_instance_->transform_param_;
}
inline ::Holiday_TransformationParameter* Holiday_LayerParameter::mutable_transform_param() {
  set_has_transform_param();
  if (transform_param_ == NULL) transform_param_ = new ::Holiday_TransformationParameter;
  // @@protoc_insertion_point(field_mutable:Holiday_LayerParameter.transform_param)
  return transform_param_;
}
inline ::Holiday_TransformationParameter* Holiday_LayerParameter::release_transform_param() {
  clear_has_transform_param();
  ::Holiday_TransformationParameter* temp = transform_param_;
  transform_param_ = NULL;
  return temp;
}
inline void Holiday_LayerParameter::set_allocated_transform_param(::Holiday_TransformationParameter* transform_param) {
  delete transform_param_;
  transform_param_ = transform_param;
  if (transform_param) {
    set_has_transform_param();
  } else {
    clear_has_transform_param();
  }
  // @@protoc_insertion_point(field_set_allocated:Holiday_LayerParameter.transform_param)
}

// optional .Holiday_BatchNormliseParameter batchNormlise_param = 20;
inline bool Holiday_LayerParameter::has_batchnormlise_param() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Holiday_LayerParameter::set_has_batchnormlise_param() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Holiday_LayerParameter::clear_has_batchnormlise_param() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Holiday_LayerParameter::clear_batchnormlise_param() {
  if (batchnormlise_param_ != NULL) batchnormlise_param_->::Holiday_BatchNormliseParameter::Clear();
  clear_has_batchnormlise_param();
}
inline const ::Holiday_BatchNormliseParameter& Holiday_LayerParameter::batchnormlise_param() const {
  // @@protoc_insertion_point(field_get:Holiday_LayerParameter.batchNormlise_param)
  return batchnormlise_param_ != NULL ? *batchnormlise_param_ : *default_instance_->batchnormlise_param_;
}
inline ::Holiday_BatchNormliseParameter* Holiday_LayerParameter::mutable_batchnormlise_param() {
  set_has_batchnormlise_param();
  if (batchnormlise_param_ == NULL) batchnormlise_param_ = new ::Holiday_BatchNormliseParameter;
  // @@protoc_insertion_point(field_mutable:Holiday_LayerParameter.batchNormlise_param)
  return batchnormlise_param_;
}
inline ::Holiday_BatchNormliseParameter* Holiday_LayerParameter::release_batchnormlise_param() {
  clear_has_batchnormlise_param();
  ::Holiday_BatchNormliseParameter* temp = batchnormlise_param_;
  batchnormlise_param_ = NULL;
  return temp;
}
inline void Holiday_LayerParameter::set_allocated_batchnormlise_param(::Holiday_BatchNormliseParameter* batchnormlise_param) {
  delete batchnormlise_param_;
  batchnormlise_param_ = batchnormlise_param;
  if (batchnormlise_param) {
    set_has_batchnormlise_param();
  } else {
    clear_has_batchnormlise_param();
  }
  // @@protoc_insertion_point(field_set_allocated:Holiday_LayerParameter.batchNormlise_param)
}

// optional .Holiday_ScaleParameter scale_param = 21;
inline bool Holiday_LayerParameter::has_scale_param() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Holiday_LayerParameter::set_has_scale_param() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Holiday_LayerParameter::clear_has_scale_param() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Holiday_LayerParameter::clear_scale_param() {
  if (scale_param_ != NULL) scale_param_->::Holiday_ScaleParameter::Clear();
  clear_has_scale_param();
}
inline const ::Holiday_ScaleParameter& Holiday_LayerParameter::scale_param() const {
  // @@protoc_insertion_point(field_get:Holiday_LayerParameter.scale_param)
  return scale_param_ != NULL ? *scale_param_ : *default_instance_->scale_param_;
}
inline ::Holiday_ScaleParameter* Holiday_LayerParameter::mutable_scale_param() {
  set_has_scale_param();
  if (scale_param_ == NULL) scale_param_ = new ::Holiday_ScaleParameter;
  // @@protoc_insertion_point(field_mutable:Holiday_LayerParameter.scale_param)
  return scale_param_;
}
inline ::Holiday_ScaleParameter* Holiday_LayerParameter::release_scale_param() {
  clear_has_scale_param();
  ::Holiday_ScaleParameter* temp = scale_param_;
  scale_param_ = NULL;
  return temp;
}
inline void Holiday_LayerParameter::set_allocated_scale_param(::Holiday_ScaleParameter* scale_param) {
  delete scale_param_;
  scale_param_ = scale_param;
  if (scale_param) {
    set_has_scale_param();
  } else {
    clear_has_scale_param();
  }
  // @@protoc_insertion_point(field_set_allocated:Holiday_LayerParameter.scale_param)
}

// optional .Holiday_PreluParameter prelu_param = 22;
inline bool Holiday_LayerParameter::has_prelu_param() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Holiday_LayerParameter::set_has_prelu_param() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Holiday_LayerParameter::clear_has_prelu_param() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Holiday_LayerParameter::clear_prelu_param() {
  if (prelu_param_ != NULL) prelu_param_->::Holiday_PreluParameter::Clear();
  clear_has_prelu_param();
}
inline const ::Holiday_PreluParameter& Holiday_LayerParameter::prelu_param() const {
  // @@protoc_insertion_point(field_get:Holiday_LayerParameter.prelu_param)
  return prelu_param_ != NULL ? *prelu_param_ : *default_instance_->prelu_param_;
}
inline ::Holiday_PreluParameter* Holiday_LayerParameter::mutable_prelu_param() {
  set_has_prelu_param();
  if (prelu_param_ == NULL) prelu_param_ = new ::Holiday_PreluParameter;
  // @@protoc_insertion_point(field_mutable:Holiday_LayerParameter.prelu_param)
  return prelu_param_;
}
inline ::Holiday_PreluParameter* Holiday_LayerParameter::release_prelu_param() {
  clear_has_prelu_param();
  ::Holiday_PreluParameter* temp = prelu_param_;
  prelu_param_ = NULL;
  return temp;
}
inline void Holiday_LayerParameter::set_allocated_prelu_param(::Holiday_PreluParameter* prelu_param) {
  delete prelu_param_;
  prelu_param_ = prelu_param;
  if (prelu_param) {
    set_has_prelu_param();
  } else {
    clear_has_prelu_param();
  }
  // @@protoc_insertion_point(field_set_allocated:Holiday_LayerParameter.prelu_param)
}

// optional .Holiday_CropParameter crop_parameter = 23;
inline bool Holiday_LayerParameter::has_crop_parameter() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void Holiday_LayerParameter::set_has_crop_parameter() {
  _has_bits_[0] |= 0x00400000u;
}
inline void Holiday_LayerParameter::clear_has_crop_parameter() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void Holiday_LayerParameter::clear_crop_parameter() {
  if (crop_parameter_ != NULL) crop_parameter_->::Holiday_CropParameter::Clear();
  clear_has_crop_parameter();
}
inline const ::Holiday_CropParameter& Holiday_LayerParameter::crop_parameter() const {
  // @@protoc_insertion_point(field_get:Holiday_LayerParameter.crop_parameter)
  return crop_parameter_ != NULL ? *crop_parameter_ : *default_instance_->crop_parameter_;
}
inline ::Holiday_CropParameter* Holiday_LayerParameter::mutable_crop_parameter() {
  set_has_crop_parameter();
  if (crop_parameter_ == NULL) crop_parameter_ = new ::Holiday_CropParameter;
  // @@protoc_insertion_point(field_mutable:Holiday_LayerParameter.crop_parameter)
  return crop_parameter_;
}
inline ::Holiday_CropParameter* Holiday_LayerParameter::release_crop_parameter() {
  clear_has_crop_parameter();
  ::Holiday_CropParameter* temp = crop_parameter_;
  crop_parameter_ = NULL;
  return temp;
}
inline void Holiday_LayerParameter::set_allocated_crop_parameter(::Holiday_CropParameter* crop_parameter) {
  delete crop_parameter_;
  crop_parameter_ = crop_parameter;
  if (crop_parameter) {
    set_has_crop_parameter();
  } else {
    clear_has_crop_parameter();
  }
  // @@protoc_insertion_point(field_set_allocated:Holiday_LayerParameter.crop_parameter)
}

// optional .Holiday_SigmoidParameter sigmoid_param = 24;
inline bool Holiday_LayerParameter::has_sigmoid_param() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void Holiday_LayerParameter::set_has_sigmoid_param() {
  _has_bits_[0] |= 0x00800000u;
}
inline void Holiday_LayerParameter::clear_has_sigmoid_param() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void Holiday_LayerParameter::clear_sigmoid_param() {
  if (sigmoid_param_ != NULL) sigmoid_param_->::Holiday_SigmoidParameter::Clear();
  clear_has_sigmoid_param();
}
inline const ::Holiday_SigmoidParameter& Holiday_LayerParameter::sigmoid_param() const {
  // @@protoc_insertion_point(field_get:Holiday_LayerParameter.sigmoid_param)
  return sigmoid_param_ != NULL ? *sigmoid_param_ : *default_instance_->sigmoid_param_;
}
inline ::Holiday_SigmoidParameter* Holiday_LayerParameter::mutable_sigmoid_param() {
  set_has_sigmoid_param();
  if (sigmoid_param_ == NULL) sigmoid_param_ = new ::Holiday_SigmoidParameter;
  // @@protoc_insertion_point(field_mutable:Holiday_LayerParameter.sigmoid_param)
  return sigmoid_param_;
}
inline ::Holiday_SigmoidParameter* Holiday_LayerParameter::release_sigmoid_param() {
  clear_has_sigmoid_param();
  ::Holiday_SigmoidParameter* temp = sigmoid_param_;
  sigmoid_param_ = NULL;
  return temp;
}
inline void Holiday_LayerParameter::set_allocated_sigmoid_param(::Holiday_SigmoidParameter* sigmoid_param) {
  delete sigmoid_param_;
  sigmoid_param_ = sigmoid_param;
  if (sigmoid_param) {
    set_has_sigmoid_param();
  } else {
    clear_has_sigmoid_param();
  }
  // @@protoc_insertion_point(field_set_allocated:Holiday_LayerParameter.sigmoid_param)
}

// optional .Holiday_SpaceToBatchNDLayer spaceToBatchND_param = 25;
inline bool Holiday_LayerParameter::has_spacetobatchnd_param() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void Holiday_LayerParameter::set_has_spacetobatchnd_param() {
  _has_bits_[0] |= 0x01000000u;
}
inline void Holiday_LayerParameter::clear_has_spacetobatchnd_param() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void Holiday_LayerParameter::clear_spacetobatchnd_param() {
  if (spacetobatchnd_param_ != NULL) spacetobatchnd_param_->::Holiday_SpaceToBatchNDLayer::Clear();
  clear_has_spacetobatchnd_param();
}
inline const ::Holiday_SpaceToBatchNDLayer& Holiday_LayerParameter::spacetobatchnd_param() const {
  // @@protoc_insertion_point(field_get:Holiday_LayerParameter.spaceToBatchND_param)
  return spacetobatchnd_param_ != NULL ? *spacetobatchnd_param_ : *default_instance_->spacetobatchnd_param_;
}
inline ::Holiday_SpaceToBatchNDLayer* Holiday_LayerParameter::mutable_spacetobatchnd_param() {
  set_has_spacetobatchnd_param();
  if (spacetobatchnd_param_ == NULL) spacetobatchnd_param_ = new ::Holiday_SpaceToBatchNDLayer;
  // @@protoc_insertion_point(field_mutable:Holiday_LayerParameter.spaceToBatchND_param)
  return spacetobatchnd_param_;
}
inline ::Holiday_SpaceToBatchNDLayer* Holiday_LayerParameter::release_spacetobatchnd_param() {
  clear_has_spacetobatchnd_param();
  ::Holiday_SpaceToBatchNDLayer* temp = spacetobatchnd_param_;
  spacetobatchnd_param_ = NULL;
  return temp;
}
inline void Holiday_LayerParameter::set_allocated_spacetobatchnd_param(::Holiday_SpaceToBatchNDLayer* spacetobatchnd_param) {
  delete spacetobatchnd_param_;
  spacetobatchnd_param_ = spacetobatchnd_param;
  if (spacetobatchnd_param) {
    set_has_spacetobatchnd_param();
  } else {
    clear_has_spacetobatchnd_param();
  }
  // @@protoc_insertion_point(field_set_allocated:Holiday_LayerParameter.spaceToBatchND_param)
}

// optional .Holiday_BatchToSpaceNDLayer batchToSpaceND_param = 26;
inline bool Holiday_LayerParameter::has_batchtospacend_param() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void Holiday_LayerParameter::set_has_batchtospacend_param() {
  _has_bits_[0] |= 0x02000000u;
}
inline void Holiday_LayerParameter::clear_has_batchtospacend_param() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void Holiday_LayerParameter::clear_batchtospacend_param() {
  if (batchtospacend_param_ != NULL) batchtospacend_param_->::Holiday_BatchToSpaceNDLayer::Clear();
  clear_has_batchtospacend_param();
}
inline const ::Holiday_BatchToSpaceNDLayer& Holiday_LayerParameter::batchtospacend_param() const {
  // @@protoc_insertion_point(field_get:Holiday_LayerParameter.batchToSpaceND_param)
  return batchtospacend_param_ != NULL ? *batchtospacend_param_ : *default_instance_->batchtospacend_param_;
}
inline ::Holiday_BatchToSpaceNDLayer* Holiday_LayerParameter::mutable_batchtospacend_param() {
  set_has_batchtospacend_param();
  if (batchtospacend_param_ == NULL) batchtospacend_param_ = new ::Holiday_BatchToSpaceNDLayer;
  // @@protoc_insertion_point(field_mutable:Holiday_LayerParameter.batchToSpaceND_param)
  return batchtospacend_param_;
}
inline ::Holiday_BatchToSpaceNDLayer* Holiday_LayerParameter::release_batchtospacend_param() {
  clear_has_batchtospacend_param();
  ::Holiday_BatchToSpaceNDLayer* temp = batchtospacend_param_;
  batchtospacend_param_ = NULL;
  return temp;
}
inline void Holiday_LayerParameter::set_allocated_batchtospacend_param(::Holiday_BatchToSpaceNDLayer* batchtospacend_param) {
  delete batchtospacend_param_;
  batchtospacend_param_ = batchtospacend_param;
  if (batchtospacend_param) {
    set_has_batchtospacend_param();
  } else {
    clear_has_batchtospacend_param();
  }
  // @@protoc_insertion_point(field_set_allocated:Holiday_LayerParameter.batchToSpaceND_param)
}

// optional .Holiday_ReshapeLayer reshape_param = 27;
inline bool Holiday_LayerParameter::has_reshape_param() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void Holiday_LayerParameter::set_has_reshape_param() {
  _has_bits_[0] |= 0x04000000u;
}
inline void Holiday_LayerParameter::clear_has_reshape_param() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void Holiday_LayerParameter::clear_reshape_param() {
  if (reshape_param_ != NULL) reshape_param_->::Holiday_ReshapeLayer::Clear();
  clear_has_reshape_param();
}
inline const ::Holiday_ReshapeLayer& Holiday_LayerParameter::reshape_param() const {
  // @@protoc_insertion_point(field_get:Holiday_LayerParameter.reshape_param)
  return reshape_param_ != NULL ? *reshape_param_ : *default_instance_->reshape_param_;
}
inline ::Holiday_ReshapeLayer* Holiday_LayerParameter::mutable_reshape_param() {
  set_has_reshape_param();
  if (reshape_param_ == NULL) reshape_param_ = new ::Holiday_ReshapeLayer;
  // @@protoc_insertion_point(field_mutable:Holiday_LayerParameter.reshape_param)
  return reshape_param_;
}
inline ::Holiday_ReshapeLayer* Holiday_LayerParameter::release_reshape_param() {
  clear_has_reshape_param();
  ::Holiday_ReshapeLayer* temp = reshape_param_;
  reshape_param_ = NULL;
  return temp;
}
inline void Holiday_LayerParameter::set_allocated_reshape_param(::Holiday_ReshapeLayer* reshape_param) {
  delete reshape_param_;
  reshape_param_ = reshape_param;
  if (reshape_param) {
    set_has_reshape_param();
  } else {
    clear_has_reshape_param();
  }
  // @@protoc_insertion_point(field_set_allocated:Holiday_LayerParameter.reshape_param)
}

// optional .Holiday_RealMulLayer real_mul_param = 28;
inline bool Holiday_LayerParameter::has_real_mul_param() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void Holiday_LayerParameter::set_has_real_mul_param() {
  _has_bits_[0] |= 0x08000000u;
}
inline void Holiday_LayerParameter::clear_has_real_mul_param() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void Holiday_LayerParameter::clear_real_mul_param() {
  if (real_mul_param_ != NULL) real_mul_param_->::Holiday_RealMulLayer::Clear();
  clear_has_real_mul_param();
}
inline const ::Holiday_RealMulLayer& Holiday_LayerParameter::real_mul_param() const {
  // @@protoc_insertion_point(field_get:Holiday_LayerParameter.real_mul_param)
  return real_mul_param_ != NULL ? *real_mul_param_ : *default_instance_->real_mul_param_;
}
inline ::Holiday_RealMulLayer* Holiday_LayerParameter::mutable_real_mul_param() {
  set_has_real_mul_param();
  if (real_mul_param_ == NULL) real_mul_param_ = new ::Holiday_RealMulLayer;
  // @@protoc_insertion_point(field_mutable:Holiday_LayerParameter.real_mul_param)
  return real_mul_param_;
}
inline ::Holiday_RealMulLayer* Holiday_LayerParameter::release_real_mul_param() {
  clear_has_real_mul_param();
  ::Holiday_RealMulLayer* temp = real_mul_param_;
  real_mul_param_ = NULL;
  return temp;
}
inline void Holiday_LayerParameter::set_allocated_real_mul_param(::Holiday_RealMulLayer* real_mul_param) {
  delete real_mul_param_;
  real_mul_param_ = real_mul_param;
  if (real_mul_param) {
    set_has_real_mul_param();
  } else {
    clear_has_real_mul_param();
  }
  // @@protoc_insertion_point(field_set_allocated:Holiday_LayerParameter.real_mul_param)
}

// optional uint32 layer_index = 30;
inline bool Holiday_LayerParameter::has_layer_index() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void Holiday_LayerParameter::set_has_layer_index() {
  _has_bits_[0] |= 0x10000000u;
}
inline void Holiday_LayerParameter::clear_has_layer_index() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void Holiday_LayerParameter::clear_layer_index() {
  layer_index_ = 0u;
  clear_has_layer_index();
}
inline ::google::protobuf::uint32 Holiday_LayerParameter::layer_index() const {
  // @@protoc_insertion_point(field_get:Holiday_LayerParameter.layer_index)
  return layer_index_;
}
inline void Holiday_LayerParameter::set_layer_index(::google::protobuf::uint32 value) {
  set_has_layer_index();
  layer_index_ = value;
  // @@protoc_insertion_point(field_set:Holiday_LayerParameter.layer_index)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Holiday_EltwiseParameter_EltwiseOp> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Holiday_EltwiseParameter_EltwiseOp>() {
  return ::Holiday_EltwiseParameter_EltwiseOp_descriptor();
}
template <> struct is_proto_enum< ::Holiday_LRNParameter_NormRegion> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Holiday_LRNParameter_NormRegion>() {
  return ::Holiday_LRNParameter_NormRegion_descriptor();
}
template <> struct is_proto_enum< ::Holiday_PoolingParameter_PoolMethod> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Holiday_PoolingParameter_PoolMethod>() {
  return ::Holiday_PoolingParameter_PoolMethod_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_HolidayCNN_5fproto_2eproto__INCLUDED
