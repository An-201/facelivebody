// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HolidayCNN_proto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "HolidayCNN_proto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Holiday_BlobShape_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Holiday_BlobShape_reflection_ = NULL;
const ::google::protobuf::Descriptor* Holiday_BlobProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Holiday_BlobProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* Holiday_PreluParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Holiday_PreluParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* Holiday_CropParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Holiday_CropParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* Holiday_ConvolutionParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Holiday_ConvolutionParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* Holiday_BatchNormliseParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Holiday_BatchNormliseParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* Holiday_ScaleParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Holiday_ScaleParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* Holiday_ConcatParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Holiday_ConcatParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* Holiday_EltwiseParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Holiday_EltwiseParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Holiday_EltwiseParameter_EltwiseOp_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Holiday_ExpParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Holiday_ExpParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* Holiday_MemoryDataParameterProcess_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Holiday_MemoryDataParameterProcess_reflection_ = NULL;
const ::google::protobuf::Descriptor* Holiday_TransformationParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Holiday_TransformationParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* Holiday_InnerProductParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Holiday_InnerProductParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* Holiday_LRNParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Holiday_LRNParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Holiday_LRNParameter_NormRegion_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Holiday_PoolingParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Holiday_PoolingParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Holiday_PoolingParameter_PoolMethod_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Holiday_PowerParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Holiday_PowerParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* Holiday_ReLUParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Holiday_ReLUParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* Holiday_SoftmaxParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Holiday_SoftmaxParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* Holiday_SliceParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Holiday_SliceParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* Holiday_SigmoidParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Holiday_SigmoidParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* Holiday_SpaceToBatchNDLayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Holiday_SpaceToBatchNDLayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* Holiday_BatchToSpaceNDLayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Holiday_BatchToSpaceNDLayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* Holiday_ReshapeLayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Holiday_ReshapeLayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* Holiday_RealMulLayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Holiday_RealMulLayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* Holiday_LayerParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Holiday_LayerParameter_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_HolidayCNN_5fproto_2eproto() {
  protobuf_AddDesc_HolidayCNN_5fproto_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "HolidayCNN_proto.proto");
  GOOGLE_CHECK(file != NULL);
  Holiday_BlobShape_descriptor_ = file->message_type(0);
  static const int Holiday_BlobShape_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_BlobShape, dim_),
  };
  Holiday_BlobShape_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Holiday_BlobShape_descriptor_,
      Holiday_BlobShape::default_instance_,
      Holiday_BlobShape_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_BlobShape, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_BlobShape, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Holiday_BlobShape));
  Holiday_BlobProto_descriptor_ = file->message_type(1);
  static const int Holiday_BlobProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_BlobProto, shape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_BlobProto, data_),
  };
  Holiday_BlobProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Holiday_BlobProto_descriptor_,
      Holiday_BlobProto::default_instance_,
      Holiday_BlobProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_BlobProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_BlobProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Holiday_BlobProto));
  Holiday_PreluParameter_descriptor_ = file->message_type(2);
  static const int Holiday_PreluParameter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_PreluParameter, param_),
  };
  Holiday_PreluParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Holiday_PreluParameter_descriptor_,
      Holiday_PreluParameter::default_instance_,
      Holiday_PreluParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_PreluParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_PreluParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Holiday_PreluParameter));
  Holiday_CropParameter_descriptor_ = file->message_type(3);
  static const int Holiday_CropParameter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_CropParameter, axis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_CropParameter, offset_),
  };
  Holiday_CropParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Holiday_CropParameter_descriptor_,
      Holiday_CropParameter::default_instance_,
      Holiday_CropParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_CropParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_CropParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Holiday_CropParameter));
  Holiday_ConvolutionParameter_descriptor_ = file->message_type(4);
  static const int Holiday_ConvolutionParameter_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_ConvolutionParameter, bias_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_ConvolutionParameter, kernel_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_ConvolutionParameter, dilation_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_ConvolutionParameter, dilation_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_ConvolutionParameter, num_output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_ConvolutionParameter, pad_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_ConvolutionParameter, pad_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_ConvolutionParameter, kernel_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_ConvolutionParameter, kernel_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_ConvolutionParameter, stride_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_ConvolutionParameter, stride_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_ConvolutionParameter, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_ConvolutionParameter, axis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_ConvolutionParameter, force_nd_im2col_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_ConvolutionParameter, tf_padding_),
  };
  Holiday_ConvolutionParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Holiday_ConvolutionParameter_descriptor_,
      Holiday_ConvolutionParameter::default_instance_,
      Holiday_ConvolutionParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_ConvolutionParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_ConvolutionParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Holiday_ConvolutionParameter));
  Holiday_BatchNormliseParameter_descriptor_ = file->message_type(5);
  static const int Holiday_BatchNormliseParameter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_BatchNormliseParameter, mean_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_BatchNormliseParameter, covariance_param_),
  };
  Holiday_BatchNormliseParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Holiday_BatchNormliseParameter_descriptor_,
      Holiday_BatchNormliseParameter::default_instance_,
      Holiday_BatchNormliseParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_BatchNormliseParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_BatchNormliseParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Holiday_BatchNormliseParameter));
  Holiday_ScaleParameter_descriptor_ = file->message_type(6);
  static const int Holiday_ScaleParameter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_ScaleParameter, scale_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_ScaleParameter, bias_param_),
  };
  Holiday_ScaleParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Holiday_ScaleParameter_descriptor_,
      Holiday_ScaleParameter::default_instance_,
      Holiday_ScaleParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_ScaleParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_ScaleParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Holiday_ScaleParameter));
  Holiday_ConcatParameter_descriptor_ = file->message_type(7);
  static const int Holiday_ConcatParameter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_ConcatParameter, concat_dim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_ConcatParameter, axis_),
  };
  Holiday_ConcatParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Holiday_ConcatParameter_descriptor_,
      Holiday_ConcatParameter::default_instance_,
      Holiday_ConcatParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_ConcatParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_ConcatParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Holiday_ConcatParameter));
  Holiday_EltwiseParameter_descriptor_ = file->message_type(8);
  static const int Holiday_EltwiseParameter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_EltwiseParameter, operation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_EltwiseParameter, coeff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_EltwiseParameter, stable_prod_grad_),
  };
  Holiday_EltwiseParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Holiday_EltwiseParameter_descriptor_,
      Holiday_EltwiseParameter::default_instance_,
      Holiday_EltwiseParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_EltwiseParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_EltwiseParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Holiday_EltwiseParameter));
  Holiday_EltwiseParameter_EltwiseOp_descriptor_ = Holiday_EltwiseParameter_descriptor_->enum_type(0);
  Holiday_ExpParameter_descriptor_ = file->message_type(9);
  static const int Holiday_ExpParameter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_ExpParameter, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_ExpParameter, scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_ExpParameter, shift_),
  };
  Holiday_ExpParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Holiday_ExpParameter_descriptor_,
      Holiday_ExpParameter::default_instance_,
      Holiday_ExpParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_ExpParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_ExpParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Holiday_ExpParameter));
  Holiday_MemoryDataParameterProcess_descriptor_ = file->message_type(10);
  static const int Holiday_MemoryDataParameterProcess_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_MemoryDataParameterProcess, batch_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_MemoryDataParameterProcess, channels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_MemoryDataParameterProcess, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_MemoryDataParameterProcess, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_MemoryDataParameterProcess, new_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_MemoryDataParameterProcess, new_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_MemoryDataParameterProcess, scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_MemoryDataParameterProcess, mean_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_MemoryDataParameterProcess, mean_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_MemoryDataParameterProcess, crop_size_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_MemoryDataParameterProcess, crop_size_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_MemoryDataParameterProcess, channel_swaps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_MemoryDataParameterProcess, prewhiten_),
  };
  Holiday_MemoryDataParameterProcess_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Holiday_MemoryDataParameterProcess_descriptor_,
      Holiday_MemoryDataParameterProcess::default_instance_,
      Holiday_MemoryDataParameterProcess_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_MemoryDataParameterProcess, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_MemoryDataParameterProcess, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Holiday_MemoryDataParameterProcess));
  Holiday_TransformationParameter_descriptor_ = file->message_type(11);
  static const int Holiday_TransformationParameter_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_TransformationParameter, scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_TransformationParameter, mirror_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_TransformationParameter, crop_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_TransformationParameter, crop_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_TransformationParameter, mean_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_TransformationParameter, mean_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_TransformationParameter, force_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_TransformationParameter, force_gray_),
  };
  Holiday_TransformationParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Holiday_TransformationParameter_descriptor_,
      Holiday_TransformationParameter::default_instance_,
      Holiday_TransformationParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_TransformationParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_TransformationParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Holiday_TransformationParameter));
  Holiday_InnerProductParameter_descriptor_ = file->message_type(12);
  static const int Holiday_InnerProductParameter_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_InnerProductParameter, num_output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_InnerProductParameter, axis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_InnerProductParameter, transpose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_InnerProductParameter, bias_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_InnerProductParameter, inner_param_),
  };
  Holiday_InnerProductParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Holiday_InnerProductParameter_descriptor_,
      Holiday_InnerProductParameter::default_instance_,
      Holiday_InnerProductParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_InnerProductParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_InnerProductParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Holiday_InnerProductParameter));
  Holiday_LRNParameter_descriptor_ = file->message_type(13);
  static const int Holiday_LRNParameter_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_LRNParameter, local_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_LRNParameter, alpha_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_LRNParameter, beta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_LRNParameter, norm_region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_LRNParameter, k_),
  };
  Holiday_LRNParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Holiday_LRNParameter_descriptor_,
      Holiday_LRNParameter::default_instance_,
      Holiday_LRNParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_LRNParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_LRNParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Holiday_LRNParameter));
  Holiday_LRNParameter_NormRegion_descriptor_ = Holiday_LRNParameter_descriptor_->enum_type(0);
  Holiday_PoolingParameter_descriptor_ = file->message_type(14);
  static const int Holiday_PoolingParameter_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_PoolingParameter, pool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_PoolingParameter, pad_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_PoolingParameter, pad_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_PoolingParameter, kernel_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_PoolingParameter, kernel_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_PoolingParameter, stride_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_PoolingParameter, stride_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_PoolingParameter, global_pooling_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_PoolingParameter, valid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_PoolingParameter, tf_padding_),
  };
  Holiday_PoolingParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Holiday_PoolingParameter_descriptor_,
      Holiday_PoolingParameter::default_instance_,
      Holiday_PoolingParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_PoolingParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_PoolingParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Holiday_PoolingParameter));
  Holiday_PoolingParameter_PoolMethod_descriptor_ = Holiday_PoolingParameter_descriptor_->enum_type(0);
  Holiday_PowerParameter_descriptor_ = file->message_type(15);
  static const int Holiday_PowerParameter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_PowerParameter, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_PowerParameter, scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_PowerParameter, shift_),
  };
  Holiday_PowerParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Holiday_PowerParameter_descriptor_,
      Holiday_PowerParameter::default_instance_,
      Holiday_PowerParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_PowerParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_PowerParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Holiday_PowerParameter));
  Holiday_ReLUParameter_descriptor_ = file->message_type(16);
  static const int Holiday_ReLUParameter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_ReLUParameter, negative_slope_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_ReLUParameter, max_),
  };
  Holiday_ReLUParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Holiday_ReLUParameter_descriptor_,
      Holiday_ReLUParameter::default_instance_,
      Holiday_ReLUParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_ReLUParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_ReLUParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Holiday_ReLUParameter));
  Holiday_SoftmaxParameter_descriptor_ = file->message_type(17);
  static const int Holiday_SoftmaxParameter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_SoftmaxParameter, axis_),
  };
  Holiday_SoftmaxParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Holiday_SoftmaxParameter_descriptor_,
      Holiday_SoftmaxParameter::default_instance_,
      Holiday_SoftmaxParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_SoftmaxParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_SoftmaxParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Holiday_SoftmaxParameter));
  Holiday_SliceParameter_descriptor_ = file->message_type(18);
  static const int Holiday_SliceParameter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_SliceParameter, axis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_SliceParameter, slice_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_SliceParameter, slice_dim_),
  };
  Holiday_SliceParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Holiday_SliceParameter_descriptor_,
      Holiday_SliceParameter::default_instance_,
      Holiday_SliceParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_SliceParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_SliceParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Holiday_SliceParameter));
  Holiday_SigmoidParameter_descriptor_ = file->message_type(19);
  static const int Holiday_SigmoidParameter_offsets_[1] = {
  };
  Holiday_SigmoidParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Holiday_SigmoidParameter_descriptor_,
      Holiday_SigmoidParameter::default_instance_,
      Holiday_SigmoidParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_SigmoidParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_SigmoidParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Holiday_SigmoidParameter));
  Holiday_SpaceToBatchNDLayer_descriptor_ = file->message_type(20);
  static const int Holiday_SpaceToBatchNDLayer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_SpaceToBatchNDLayer, block_shape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_SpaceToBatchNDLayer, paddings_),
  };
  Holiday_SpaceToBatchNDLayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Holiday_SpaceToBatchNDLayer_descriptor_,
      Holiday_SpaceToBatchNDLayer::default_instance_,
      Holiday_SpaceToBatchNDLayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_SpaceToBatchNDLayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_SpaceToBatchNDLayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Holiday_SpaceToBatchNDLayer));
  Holiday_BatchToSpaceNDLayer_descriptor_ = file->message_type(21);
  static const int Holiday_BatchToSpaceNDLayer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_BatchToSpaceNDLayer, block_shape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_BatchToSpaceNDLayer, crops_),
  };
  Holiday_BatchToSpaceNDLayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Holiday_BatchToSpaceNDLayer_descriptor_,
      Holiday_BatchToSpaceNDLayer::default_instance_,
      Holiday_BatchToSpaceNDLayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_BatchToSpaceNDLayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_BatchToSpaceNDLayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Holiday_BatchToSpaceNDLayer));
  Holiday_ReshapeLayer_descriptor_ = file->message_type(22);
  static const int Holiday_ReshapeLayer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_ReshapeLayer, shape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_ReshapeLayer, permute_),
  };
  Holiday_ReshapeLayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Holiday_ReshapeLayer_descriptor_,
      Holiday_ReshapeLayer::default_instance_,
      Holiday_ReshapeLayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_ReshapeLayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_ReshapeLayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Holiday_ReshapeLayer));
  Holiday_RealMulLayer_descriptor_ = file->message_type(23);
  static const int Holiday_RealMulLayer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_RealMulLayer, y_),
  };
  Holiday_RealMulLayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Holiday_RealMulLayer_descriptor_,
      Holiday_RealMulLayer::default_instance_,
      Holiday_RealMulLayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_RealMulLayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_RealMulLayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Holiday_RealMulLayer));
  Holiday_LayerParameter_descriptor_ = file->message_type(24);
  static const int Holiday_LayerParameter_offsets_[29] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_LayerParameter, bottom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_LayerParameter, top_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_LayerParameter, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_LayerParameter, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_LayerParameter, top_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_LayerParameter, bottom_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_LayerParameter, concat_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_LayerParameter, convolution_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_LayerParameter, eltwise_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_LayerParameter, exp_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_LayerParameter, inner_product_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_LayerParameter, lrn_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_LayerParameter, memory_data_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_LayerParameter, pooling_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_LayerParameter, power_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_LayerParameter, relu_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_LayerParameter, softmax_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_LayerParameter, slice_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_LayerParameter, transform_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_LayerParameter, batchnormlise_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_LayerParameter, scale_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_LayerParameter, prelu_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_LayerParameter, crop_parameter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_LayerParameter, sigmoid_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_LayerParameter, spacetobatchnd_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_LayerParameter, batchtospacend_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_LayerParameter, reshape_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_LayerParameter, real_mul_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_LayerParameter, layer_index_),
  };
  Holiday_LayerParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Holiday_LayerParameter_descriptor_,
      Holiday_LayerParameter::default_instance_,
      Holiday_LayerParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_LayerParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Holiday_LayerParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Holiday_LayerParameter));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_HolidayCNN_5fproto_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Holiday_BlobShape_descriptor_, &Holiday_BlobShape::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Holiday_BlobProto_descriptor_, &Holiday_BlobProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Holiday_PreluParameter_descriptor_, &Holiday_PreluParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Holiday_CropParameter_descriptor_, &Holiday_CropParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Holiday_ConvolutionParameter_descriptor_, &Holiday_ConvolutionParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Holiday_BatchNormliseParameter_descriptor_, &Holiday_BatchNormliseParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Holiday_ScaleParameter_descriptor_, &Holiday_ScaleParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Holiday_ConcatParameter_descriptor_, &Holiday_ConcatParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Holiday_EltwiseParameter_descriptor_, &Holiday_EltwiseParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Holiday_ExpParameter_descriptor_, &Holiday_ExpParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Holiday_MemoryDataParameterProcess_descriptor_, &Holiday_MemoryDataParameterProcess::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Holiday_TransformationParameter_descriptor_, &Holiday_TransformationParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Holiday_InnerProductParameter_descriptor_, &Holiday_InnerProductParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Holiday_LRNParameter_descriptor_, &Holiday_LRNParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Holiday_PoolingParameter_descriptor_, &Holiday_PoolingParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Holiday_PowerParameter_descriptor_, &Holiday_PowerParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Holiday_ReLUParameter_descriptor_, &Holiday_ReLUParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Holiday_SoftmaxParameter_descriptor_, &Holiday_SoftmaxParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Holiday_SliceParameter_descriptor_, &Holiday_SliceParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Holiday_SigmoidParameter_descriptor_, &Holiday_SigmoidParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Holiday_SpaceToBatchNDLayer_descriptor_, &Holiday_SpaceToBatchNDLayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Holiday_BatchToSpaceNDLayer_descriptor_, &Holiday_BatchToSpaceNDLayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Holiday_ReshapeLayer_descriptor_, &Holiday_ReshapeLayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Holiday_RealMulLayer_descriptor_, &Holiday_RealMulLayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Holiday_LayerParameter_descriptor_, &Holiday_LayerParameter::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_HolidayCNN_5fproto_2eproto() {
  delete Holiday_BlobShape::default_instance_;
  delete Holiday_BlobShape_reflection_;
  delete Holiday_BlobProto::default_instance_;
  delete Holiday_BlobProto_reflection_;
  delete Holiday_PreluParameter::default_instance_;
  delete Holiday_PreluParameter_reflection_;
  delete Holiday_CropParameter::default_instance_;
  delete Holiday_CropParameter_reflection_;
  delete Holiday_ConvolutionParameter::default_instance_;
  delete Holiday_ConvolutionParameter_reflection_;
  delete Holiday_BatchNormliseParameter::default_instance_;
  delete Holiday_BatchNormliseParameter_reflection_;
  delete Holiday_ScaleParameter::default_instance_;
  delete Holiday_ScaleParameter_reflection_;
  delete Holiday_ConcatParameter::default_instance_;
  delete Holiday_ConcatParameter_reflection_;
  delete Holiday_EltwiseParameter::default_instance_;
  delete Holiday_EltwiseParameter_reflection_;
  delete Holiday_ExpParameter::default_instance_;
  delete Holiday_ExpParameter_reflection_;
  delete Holiday_MemoryDataParameterProcess::default_instance_;
  delete Holiday_MemoryDataParameterProcess_reflection_;
  delete Holiday_TransformationParameter::default_instance_;
  delete Holiday_TransformationParameter_reflection_;
  delete Holiday_InnerProductParameter::default_instance_;
  delete Holiday_InnerProductParameter_reflection_;
  delete Holiday_LRNParameter::default_instance_;
  delete Holiday_LRNParameter_reflection_;
  delete Holiday_PoolingParameter::default_instance_;
  delete Holiday_PoolingParameter_reflection_;
  delete Holiday_PowerParameter::default_instance_;
  delete Holiday_PowerParameter_reflection_;
  delete Holiday_ReLUParameter::default_instance_;
  delete Holiday_ReLUParameter_reflection_;
  delete Holiday_SoftmaxParameter::default_instance_;
  delete Holiday_SoftmaxParameter_reflection_;
  delete Holiday_SliceParameter::default_instance_;
  delete Holiday_SliceParameter_reflection_;
  delete Holiday_SigmoidParameter::default_instance_;
  delete Holiday_SigmoidParameter_reflection_;
  delete Holiday_SpaceToBatchNDLayer::default_instance_;
  delete Holiday_SpaceToBatchNDLayer_reflection_;
  delete Holiday_BatchToSpaceNDLayer::default_instance_;
  delete Holiday_BatchToSpaceNDLayer_reflection_;
  delete Holiday_ReshapeLayer::default_instance_;
  delete Holiday_ReshapeLayer_reflection_;
  delete Holiday_RealMulLayer::default_instance_;
  delete Holiday_RealMulLayer_reflection_;
  delete Holiday_LayerParameter::default_instance_;
  delete Holiday_LayerParameter_reflection_;
}

void protobuf_AddDesc_HolidayCNN_5fproto_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026HolidayCNN_proto.proto\" \n\021Holiday_Blob"
    "Shape\022\013\n\003dim\030\001 \003(\003\"D\n\021Holiday_BlobProto\022"
    "!\n\005shape\030\001 \001(\0132\022.Holiday_BlobShape\022\014\n\004da"
    "ta\030\002 \003(\002\";\n\026Holiday_PreluParameter\022!\n\005pa"
    "ram\030\001 \001(\0132\022.Holiday_BlobProto\"8\n\025Holiday"
    "_CropParameter\022\017\n\004axis\030\001 \001(\005:\0012\022\016\n\006offse"
    "t\030\002 \003(\r\"\223\003\n\034Holiday_ConvolutionParameter"
    "\022&\n\nbias_param\030\001 \001(\0132\022.Holiday_BlobProto"
    "\022(\n\014kernel_param\030\002 \001(\0132\022.Holiday_BlobPro"
    "to\022\027\n\017dilation_height\030\003 \001(\r\022\026\n\016dilation_"
    "width\030\004 \001(\r\022\022\n\nnum_output\030\005 \001(\r\022\025\n\npad_h"
    "eight\030\006 \001(\r:\0010\022\024\n\tpad_width\030\007 \001(\r:\0010\022\025\n\r"
    "kernel_height\030\010 \001(\r\022\024\n\014kernel_width\030\t \001("
    "\r\022\025\n\rstride_height\030\n \001(\r\022\024\n\014stride_width"
    "\030\013 \001(\r\022\020\n\005group\030\014 \001(\r:\0011\022\017\n\004axis\030\r \001(\005:\001"
    "1\022\036\n\017force_nd_im2col\030\016 \001(\010:\005false\022\022\n\ntf_"
    "padding\030\017 \001(\t\"v\n\036Holiday_BatchNormlisePa"
    "rameter\022&\n\nmean_param\030\001 \001(\0132\022.Holiday_Bl"
    "obProto\022,\n\020covariance_param\030\002 \001(\0132\022.Holi"
    "day_BlobProto\"i\n\026Holiday_ScaleParameter\022"
    "\'\n\013scale_param\030\001 \001(\0132\022.Holiday_BlobProto"
    "\022&\n\nbias_param\030\002 \001(\0132\022.Holiday_BlobProto"
    "\"A\n\027Holiday_ConcatParameter\022\025\n\nconcat_di"
    "m\030\001 \001(\r:\0011\022\017\n\004axis\030\002 \001(\005:\0011\"\257\001\n\030Holiday_"
    "EltwiseParameter\022;\n\toperation\030\001 \001(\0162#.Ho"
    "liday_EltwiseParameter.EltwiseOp:\003SUM\022\r\n"
    "\005coeff\030\002 \003(\002\022\036\n\020stable_prod_grad\030\003 \001(\010:\004"
    "true\"\'\n\tEltwiseOp\022\010\n\004PROD\020\000\022\007\n\003SUM\020\001\022\007\n\003"
    "MAX\020\002\"L\n\024Holiday_ExpParameter\022\020\n\004base\030\001 "
    "\001(\002:\002-1\022\020\n\005scale\030\002 \001(\002:\0011\022\020\n\005shift\030\003 \001(\002"
    ":\0010\"\315\002\n\"Holiday_MemoryDataParameterProce"
    "ss\022\022\n\nbatch_size\030\001 \001(\r\022\020\n\010channels\030\002 \001(\r"
    "\022\016\n\006height\030\003 \001(\r\022\r\n\005width\030\004 \001(\r\022\025\n\nnew_h"
    "eight\030\005 \001(\r:\0010\022\024\n\tnew_width\030\006 \001(\r:\0010\022\020\n\005"
    "scale\030\007 \001(\002:\0011\022%\n\tmean_file\030\010 \001(\0132\022.Holi"
    "day_BlobProto\022\022\n\nmean_value\030\t \003(\002\022\033\n\020cro"
    "p_size_height\030\n \001(\r:\0010\022\032\n\017crop_size_widt"
    "h\030\013 \001(\r:\0010\022\025\n\rchannel_swaps\030\014 \003(\r\022\030\n\tpre"
    "whiten\030\r \001(\010:\005false\"\327\001\n\037Holiday_Transfor"
    "mationParameter\022\020\n\005scale\030\001 \001(\002:\0011\022\025\n\006mir"
    "ror\030\002 \001(\010:\005false\022\026\n\013crop_height\030\003 \001(\r:\0010"
    "\022\025\n\ncrop_width\030\004 \001(\r:\0010\022\021\n\tmean_file\030\005 \001"
    "(\t\022\022\n\nmean_value\030\006 \003(\002\022\032\n\013force_color\030\007 "
    "\001(\010:\005false\022\031\n\nforce_gray\030\010 \001(\010:\005false\"\257\001"
    "\n\035Holiday_InnerProductParameter\022\022\n\nnum_o"
    "utput\030\001 \001(\r\022\017\n\004axis\030\002 \001(\005:\0011\022\030\n\ttranspos"
    "e\030\003 \001(\010:\005false\022&\n\nbias_param\030\004 \001(\0132\022.Hol"
    "iday_BlobProto\022\'\n\013Inner_param\030\005 \001(\0132\022.Ho"
    "liday_BlobProto\"\340\001\n\024Holiday_LRNParameter"
    "\022\025\n\nlocal_size\030\001 \001(\r:\0015\022\020\n\005alpha\030\002 \001(\002:\001"
    "1\022\022\n\004beta\030\003 \001(\002:\0040.75\022F\n\013norm_region\030\004 \001"
    "(\0162 .Holiday_LRNParameter.NormRegion:\017AC"
    "ROSS_CHANNELS\022\014\n\001k\030\005 \001(\002:\0011\"5\n\nNormRegio"
    "n\022\023\n\017ACROSS_CHANNELS\020\000\022\022\n\016WITHIN_CHANNEL"
    "\020\001\"\323\002\n\030Holiday_PoolingParameter\0227\n\004pool\030"
    "\001 \001(\0162$.Holiday_PoolingParameter.PoolMet"
    "hod:\003MAX\022\025\n\npad_height\030\002 \001(\r:\0010\022\024\n\tpad_w"
    "idth\030\003 \001(\r:\0010\022\025\n\rkernel_height\030\004 \001(\r\022\024\n\014"
    "kernel_width\030\005 \001(\r\022\025\n\rstride_height\030\006 \001("
    "\r\022\024\n\014stride_width\030\007 \001(\r\022\035\n\016global_poolin"
    "g\030\010 \001(\010:\005false\022\024\n\005valid\030\t \001(\010:\005false\022\022\n\n"
    "tf_padding\030\n \001(\t\".\n\nPoolMethod\022\007\n\003MAX\020\000\022"
    "\007\n\003AVE\020\001\022\016\n\nSTOCHASTIC\020\002\"N\n\026Holiday_Powe"
    "rParameter\022\020\n\005power\030\001 \001(\002:\0011\022\020\n\005scale\030\002 "
    "\001(\002:\0011\022\020\n\005shift\030\003 \001(\002:\0010\"\?\n\025Holiday_ReLU"
    "Parameter\022\031\n\016negative_slope\030\001 \001(\002:\0010\022\013\n\003"
    "max\030\002 \001(\002\"+\n\030Holiday_SoftmaxParameter\022\017\n"
    "\004axis\030\001 \001(\005:\0011\"T\n\026Holiday_SliceParameter"
    "\022\017\n\004axis\030\001 \001(\005:\0011\022\023\n\013slice_point\030\002 \003(\r\022\024"
    "\n\tslice_dim\030\003 \001(\r:\0011\"\032\n\030Holiday_SigmoidP"
    "arameter\"D\n\033Holiday_SpaceToBatchNDLayer\022"
    "\023\n\013block_shape\030\001 \003(\005\022\020\n\010paddings\030\002 \003(\005\"A"
    "\n\033Holiday_BatchToSpaceNDLayer\022\023\n\013block_s"
    "hape\030\001 \003(\005\022\r\n\005crops\030\002 \003(\005\"6\n\024Holiday_Res"
    "hapeLayer\022\r\n\005shape\030\001 \003(\005\022\017\n\007permute\030\002 \003("
    "\005\"5\n\024Holiday_RealMulLayer\022\035\n\001y\030\001 \001(\0132\022.H"
    "oliday_BlobProto\"\364\t\n\026Holiday_LayerParame"
    "ter\022\016\n\006bottom\030\001 \003(\t\022\013\n\003top\030\002 \003(\t\022\014\n\004name"
    "\030\003 \001(\t\022\014\n\004type\030\004 \001(\r\022\021\n\ttop_index\030\005 \003(\r\022"
    "\024\n\014bottom_index\030\006 \003(\r\022.\n\014concat_param\030\007 "
    "\001(\0132\030.Holiday_ConcatParameter\0228\n\021convolu"
    "tion_param\030\010 \001(\0132\035.Holiday_ConvolutionPa"
    "rameter\0220\n\reltwise_param\030\t \001(\0132\031.Holiday"
    "_EltwiseParameter\022(\n\texp_param\030\n \001(\0132\025.H"
    "oliday_ExpParameter\022;\n\023inner_product_par"
    "am\030\013 \001(\0132\036.Holiday_InnerProductParameter"
    "\022(\n\tlrn_param\030\014 \001(\0132\025.Holiday_LRNParamet"
    "er\022>\n\021memory_data_param\030\r \001(\0132#.Holiday_"
    "MemoryDataParameterProcess\0220\n\rpooling_pa"
    "ram\030\016 \001(\0132\031.Holiday_PoolingParameter\022,\n\013"
    "power_param\030\017 \001(\0132\027.Holiday_PowerParamet"
    "er\022*\n\nrelu_param\030\020 \001(\0132\026.Holiday_ReLUPar"
    "ameter\0220\n\rsoftmax_param\030\021 \001(\0132\031.Holiday_"
    "SoftmaxParameter\022,\n\013slice_param\030\022 \001(\0132\027."
    "Holiday_SliceParameter\0229\n\017transform_para"
    "m\030\023 \001(\0132 .Holiday_TransformationParamete"
    "r\022<\n\023batchNormlise_param\030\024 \001(\0132\037.Holiday"
    "_BatchNormliseParameter\022,\n\013scale_param\030\025"
    " \001(\0132\027.Holiday_ScaleParameter\022,\n\013prelu_p"
    "aram\030\026 \001(\0132\027.Holiday_PreluParameter\022.\n\016c"
    "rop_parameter\030\027 \001(\0132\026.Holiday_CropParame"
    "ter\0220\n\rsigmoid_param\030\030 \001(\0132\031.Holiday_Sig"
    "moidParameter\022:\n\024spaceToBatchND_param\030\031 "
    "\001(\0132\034.Holiday_SpaceToBatchNDLayer\022:\n\024bat"
    "chToSpaceND_param\030\032 \001(\0132\034.Holiday_BatchT"
    "oSpaceNDLayer\022,\n\rreshape_param\030\033 \001(\0132\025.H"
    "oliday_ReshapeLayer\022-\n\016real_mul_param\030\034 "
    "\001(\0132\025.Holiday_RealMulLayer\022\023\n\013layer_inde"
    "x\030\036 \001(\r", 4327);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "HolidayCNN_proto.proto", &protobuf_RegisterTypes);
  Holiday_BlobShape::default_instance_ = new Holiday_BlobShape();
  Holiday_BlobProto::default_instance_ = new Holiday_BlobProto();
  Holiday_PreluParameter::default_instance_ = new Holiday_PreluParameter();
  Holiday_CropParameter::default_instance_ = new Holiday_CropParameter();
  Holiday_ConvolutionParameter::default_instance_ = new Holiday_ConvolutionParameter();
  Holiday_BatchNormliseParameter::default_instance_ = new Holiday_BatchNormliseParameter();
  Holiday_ScaleParameter::default_instance_ = new Holiday_ScaleParameter();
  Holiday_ConcatParameter::default_instance_ = new Holiday_ConcatParameter();
  Holiday_EltwiseParameter::default_instance_ = new Holiday_EltwiseParameter();
  Holiday_ExpParameter::default_instance_ = new Holiday_ExpParameter();
  Holiday_MemoryDataParameterProcess::default_instance_ = new Holiday_MemoryDataParameterProcess();
  Holiday_TransformationParameter::default_instance_ = new Holiday_TransformationParameter();
  Holiday_InnerProductParameter::default_instance_ = new Holiday_InnerProductParameter();
  Holiday_LRNParameter::default_instance_ = new Holiday_LRNParameter();
  Holiday_PoolingParameter::default_instance_ = new Holiday_PoolingParameter();
  Holiday_PowerParameter::default_instance_ = new Holiday_PowerParameter();
  Holiday_ReLUParameter::default_instance_ = new Holiday_ReLUParameter();
  Holiday_SoftmaxParameter::default_instance_ = new Holiday_SoftmaxParameter();
  Holiday_SliceParameter::default_instance_ = new Holiday_SliceParameter();
  Holiday_SigmoidParameter::default_instance_ = new Holiday_SigmoidParameter();
  Holiday_SpaceToBatchNDLayer::default_instance_ = new Holiday_SpaceToBatchNDLayer();
  Holiday_BatchToSpaceNDLayer::default_instance_ = new Holiday_BatchToSpaceNDLayer();
  Holiday_ReshapeLayer::default_instance_ = new Holiday_ReshapeLayer();
  Holiday_RealMulLayer::default_instance_ = new Holiday_RealMulLayer();
  Holiday_LayerParameter::default_instance_ = new Holiday_LayerParameter();
  Holiday_BlobShape::default_instance_->InitAsDefaultInstance();
  Holiday_BlobProto::default_instance_->InitAsDefaultInstance();
  Holiday_PreluParameter::default_instance_->InitAsDefaultInstance();
  Holiday_CropParameter::default_instance_->InitAsDefaultInstance();
  Holiday_ConvolutionParameter::default_instance_->InitAsDefaultInstance();
  Holiday_BatchNormliseParameter::default_instance_->InitAsDefaultInstance();
  Holiday_ScaleParameter::default_instance_->InitAsDefaultInstance();
  Holiday_ConcatParameter::default_instance_->InitAsDefaultInstance();
  Holiday_EltwiseParameter::default_instance_->InitAsDefaultInstance();
  Holiday_ExpParameter::default_instance_->InitAsDefaultInstance();
  Holiday_MemoryDataParameterProcess::default_instance_->InitAsDefaultInstance();
  Holiday_TransformationParameter::default_instance_->InitAsDefaultInstance();
  Holiday_InnerProductParameter::default_instance_->InitAsDefaultInstance();
  Holiday_LRNParameter::default_instance_->InitAsDefaultInstance();
  Holiday_PoolingParameter::default_instance_->InitAsDefaultInstance();
  Holiday_PowerParameter::default_instance_->InitAsDefaultInstance();
  Holiday_ReLUParameter::default_instance_->InitAsDefaultInstance();
  Holiday_SoftmaxParameter::default_instance_->InitAsDefaultInstance();
  Holiday_SliceParameter::default_instance_->InitAsDefaultInstance();
  Holiday_SigmoidParameter::default_instance_->InitAsDefaultInstance();
  Holiday_SpaceToBatchNDLayer::default_instance_->InitAsDefaultInstance();
  Holiday_BatchToSpaceNDLayer::default_instance_->InitAsDefaultInstance();
  Holiday_ReshapeLayer::default_instance_->InitAsDefaultInstance();
  Holiday_RealMulLayer::default_instance_->InitAsDefaultInstance();
  Holiday_LayerParameter::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_HolidayCNN_5fproto_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_HolidayCNN_5fproto_2eproto {
  StaticDescriptorInitializer_HolidayCNN_5fproto_2eproto() {
    protobuf_AddDesc_HolidayCNN_5fproto_2eproto();
  }
} static_descriptor_initializer_HolidayCNN_5fproto_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Holiday_BlobShape::kDimFieldNumber;
#endif  // !_MSC_VER

Holiday_BlobShape::Holiday_BlobShape()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Holiday_BlobShape)
}

void Holiday_BlobShape::InitAsDefaultInstance() {
}

Holiday_BlobShape::Holiday_BlobShape(const Holiday_BlobShape& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Holiday_BlobShape)
}

void Holiday_BlobShape::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Holiday_BlobShape::~Holiday_BlobShape() {
  // @@protoc_insertion_point(destructor:Holiday_BlobShape)
  SharedDtor();
}

void Holiday_BlobShape::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Holiday_BlobShape::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Holiday_BlobShape::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Holiday_BlobShape_descriptor_;
}

const Holiday_BlobShape& Holiday_BlobShape::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HolidayCNN_5fproto_2eproto();
  return *default_instance_;
}

Holiday_BlobShape* Holiday_BlobShape::default_instance_ = NULL;

Holiday_BlobShape* Holiday_BlobShape::New() const {
  return new Holiday_BlobShape;
}

void Holiday_BlobShape::Clear() {
  dim_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Holiday_BlobShape::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Holiday_BlobShape)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 dim = 1;
      case 1: {
        if (tag == 8) {
         parse_dim:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_dim())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_dim())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_dim;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Holiday_BlobShape)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Holiday_BlobShape)
  return false;
#undef DO_
}

void Holiday_BlobShape::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Holiday_BlobShape)
  // repeated int64 dim = 1;
  for (int i = 0; i < this->dim_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->dim(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Holiday_BlobShape)
}

::google::protobuf::uint8* Holiday_BlobShape::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Holiday_BlobShape)
  // repeated int64 dim = 1;
  for (int i = 0; i < this->dim_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->dim(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Holiday_BlobShape)
  return target;
}

int Holiday_BlobShape::ByteSize() const {
  int total_size = 0;

  // repeated int64 dim = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->dim_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->dim(i));
    }
    total_size += 1 * this->dim_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Holiday_BlobShape::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Holiday_BlobShape* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Holiday_BlobShape*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Holiday_BlobShape::MergeFrom(const Holiday_BlobShape& from) {
  GOOGLE_CHECK_NE(&from, this);
  dim_.MergeFrom(from.dim_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Holiday_BlobShape::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Holiday_BlobShape::CopyFrom(const Holiday_BlobShape& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Holiday_BlobShape::IsInitialized() const {

  return true;
}

void Holiday_BlobShape::Swap(Holiday_BlobShape* other) {
  if (other != this) {
    dim_.Swap(&other->dim_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Holiday_BlobShape::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Holiday_BlobShape_descriptor_;
  metadata.reflection = Holiday_BlobShape_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Holiday_BlobProto::kShapeFieldNumber;
const int Holiday_BlobProto::kDataFieldNumber;
#endif  // !_MSC_VER

Holiday_BlobProto::Holiday_BlobProto()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Holiday_BlobProto)
}

void Holiday_BlobProto::InitAsDefaultInstance() {
  shape_ = const_cast< ::Holiday_BlobShape*>(&::Holiday_BlobShape::default_instance());
}

Holiday_BlobProto::Holiday_BlobProto(const Holiday_BlobProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Holiday_BlobProto)
}

void Holiday_BlobProto::SharedCtor() {
  _cached_size_ = 0;
  shape_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Holiday_BlobProto::~Holiday_BlobProto() {
  // @@protoc_insertion_point(destructor:Holiday_BlobProto)
  SharedDtor();
}

void Holiday_BlobProto::SharedDtor() {
  if (this != default_instance_) {
    delete shape_;
  }
}

void Holiday_BlobProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Holiday_BlobProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Holiday_BlobProto_descriptor_;
}

const Holiday_BlobProto& Holiday_BlobProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HolidayCNN_5fproto_2eproto();
  return *default_instance_;
}

Holiday_BlobProto* Holiday_BlobProto::default_instance_ = NULL;

Holiday_BlobProto* Holiday_BlobProto::New() const {
  return new Holiday_BlobProto;
}

void Holiday_BlobProto::Clear() {
  if (has_shape()) {
    if (shape_ != NULL) shape_->::Holiday_BlobShape::Clear();
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Holiday_BlobProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Holiday_BlobProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Holiday_BlobShape shape = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shape()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_data;
        break;
      }

      // repeated float data = 2;
      case 2: {
        if (tag == 21) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 21, input, this->mutable_data())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_data())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Holiday_BlobProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Holiday_BlobProto)
  return false;
#undef DO_
}

void Holiday_BlobProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Holiday_BlobProto)
  // optional .Holiday_BlobShape shape = 1;
  if (has_shape()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->shape(), output);
  }

  // repeated float data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      2, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Holiday_BlobProto)
}

::google::protobuf::uint8* Holiday_BlobProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Holiday_BlobProto)
  // optional .Holiday_BlobShape shape = 1;
  if (has_shape()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->shape(), target);
  }

  // repeated float data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(2, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Holiday_BlobProto)
  return target;
}

int Holiday_BlobProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Holiday_BlobShape shape = 1;
    if (has_shape()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shape());
    }

  }
  // repeated float data = 2;
  {
    int data_size = 0;
    data_size = 4 * this->data_size();
    total_size += 1 * this->data_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Holiday_BlobProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Holiday_BlobProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Holiday_BlobProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Holiday_BlobProto::MergeFrom(const Holiday_BlobProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shape()) {
      mutable_shape()->::Holiday_BlobShape::MergeFrom(from.shape());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Holiday_BlobProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Holiday_BlobProto::CopyFrom(const Holiday_BlobProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Holiday_BlobProto::IsInitialized() const {

  return true;
}

void Holiday_BlobProto::Swap(Holiday_BlobProto* other) {
  if (other != this) {
    std::swap(shape_, other->shape_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Holiday_BlobProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Holiday_BlobProto_descriptor_;
  metadata.reflection = Holiday_BlobProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Holiday_PreluParameter::kParamFieldNumber;
#endif  // !_MSC_VER

Holiday_PreluParameter::Holiday_PreluParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Holiday_PreluParameter)
}

void Holiday_PreluParameter::InitAsDefaultInstance() {
  param_ = const_cast< ::Holiday_BlobProto*>(&::Holiday_BlobProto::default_instance());
}

Holiday_PreluParameter::Holiday_PreluParameter(const Holiday_PreluParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Holiday_PreluParameter)
}

void Holiday_PreluParameter::SharedCtor() {
  _cached_size_ = 0;
  param_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Holiday_PreluParameter::~Holiday_PreluParameter() {
  // @@protoc_insertion_point(destructor:Holiday_PreluParameter)
  SharedDtor();
}

void Holiday_PreluParameter::SharedDtor() {
  if (this != default_instance_) {
    delete param_;
  }
}

void Holiday_PreluParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Holiday_PreluParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Holiday_PreluParameter_descriptor_;
}

const Holiday_PreluParameter& Holiday_PreluParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HolidayCNN_5fproto_2eproto();
  return *default_instance_;
}

Holiday_PreluParameter* Holiday_PreluParameter::default_instance_ = NULL;

Holiday_PreluParameter* Holiday_PreluParameter::New() const {
  return new Holiday_PreluParameter;
}

void Holiday_PreluParameter::Clear() {
  if (has_param()) {
    if (param_ != NULL) param_->::Holiday_BlobProto::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Holiday_PreluParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Holiday_PreluParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Holiday_BlobProto param = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Holiday_PreluParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Holiday_PreluParameter)
  return false;
#undef DO_
}

void Holiday_PreluParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Holiday_PreluParameter)
  // optional .Holiday_BlobProto param = 1;
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Holiday_PreluParameter)
}

::google::protobuf::uint8* Holiday_PreluParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Holiday_PreluParameter)
  // optional .Holiday_BlobProto param = 1;
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Holiday_PreluParameter)
  return target;
}

int Holiday_PreluParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Holiday_BlobProto param = 1;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Holiday_PreluParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Holiday_PreluParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Holiday_PreluParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Holiday_PreluParameter::MergeFrom(const Holiday_PreluParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_param()) {
      mutable_param()->::Holiday_BlobProto::MergeFrom(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Holiday_PreluParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Holiday_PreluParameter::CopyFrom(const Holiday_PreluParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Holiday_PreluParameter::IsInitialized() const {

  return true;
}

void Holiday_PreluParameter::Swap(Holiday_PreluParameter* other) {
  if (other != this) {
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Holiday_PreluParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Holiday_PreluParameter_descriptor_;
  metadata.reflection = Holiday_PreluParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Holiday_CropParameter::kAxisFieldNumber;
const int Holiday_CropParameter::kOffsetFieldNumber;
#endif  // !_MSC_VER

Holiday_CropParameter::Holiday_CropParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Holiday_CropParameter)
}

void Holiday_CropParameter::InitAsDefaultInstance() {
}

Holiday_CropParameter::Holiday_CropParameter(const Holiday_CropParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Holiday_CropParameter)
}

void Holiday_CropParameter::SharedCtor() {
  _cached_size_ = 0;
  axis_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Holiday_CropParameter::~Holiday_CropParameter() {
  // @@protoc_insertion_point(destructor:Holiday_CropParameter)
  SharedDtor();
}

void Holiday_CropParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Holiday_CropParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Holiday_CropParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Holiday_CropParameter_descriptor_;
}

const Holiday_CropParameter& Holiday_CropParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HolidayCNN_5fproto_2eproto();
  return *default_instance_;
}

Holiday_CropParameter* Holiday_CropParameter::default_instance_ = NULL;

Holiday_CropParameter* Holiday_CropParameter::New() const {
  return new Holiday_CropParameter;
}

void Holiday_CropParameter::Clear() {
  axis_ = 2;
  offset_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Holiday_CropParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Holiday_CropParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 axis = 1 [default = 2];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
          set_has_axis();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_offset;
        break;
      }

      // repeated uint32 offset = 2;
      case 2: {
        if (tag == 16) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_offset())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_offset())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_offset;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Holiday_CropParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Holiday_CropParameter)
  return false;
#undef DO_
}

void Holiday_CropParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Holiday_CropParameter)
  // optional int32 axis = 1 [default = 2];
  if (has_axis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->axis(), output);
  }

  // repeated uint32 offset = 2;
  for (int i = 0; i < this->offset_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->offset(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Holiday_CropParameter)
}

::google::protobuf::uint8* Holiday_CropParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Holiday_CropParameter)
  // optional int32 axis = 1 [default = 2];
  if (has_axis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->axis(), target);
  }

  // repeated uint32 offset = 2;
  for (int i = 0; i < this->offset_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->offset(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Holiday_CropParameter)
  return target;
}

int Holiday_CropParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 axis = 1 [default = 2];
    if (has_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axis());
    }

  }
  // repeated uint32 offset = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->offset_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->offset(i));
    }
    total_size += 1 * this->offset_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Holiday_CropParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Holiday_CropParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Holiday_CropParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Holiday_CropParameter::MergeFrom(const Holiday_CropParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  offset_.MergeFrom(from.offset_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_axis()) {
      set_axis(from.axis());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Holiday_CropParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Holiday_CropParameter::CopyFrom(const Holiday_CropParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Holiday_CropParameter::IsInitialized() const {

  return true;
}

void Holiday_CropParameter::Swap(Holiday_CropParameter* other) {
  if (other != this) {
    std::swap(axis_, other->axis_);
    offset_.Swap(&other->offset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Holiday_CropParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Holiday_CropParameter_descriptor_;
  metadata.reflection = Holiday_CropParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Holiday_ConvolutionParameter::kBiasParamFieldNumber;
const int Holiday_ConvolutionParameter::kKernelParamFieldNumber;
const int Holiday_ConvolutionParameter::kDilationHeightFieldNumber;
const int Holiday_ConvolutionParameter::kDilationWidthFieldNumber;
const int Holiday_ConvolutionParameter::kNumOutputFieldNumber;
const int Holiday_ConvolutionParameter::kPadHeightFieldNumber;
const int Holiday_ConvolutionParameter::kPadWidthFieldNumber;
const int Holiday_ConvolutionParameter::kKernelHeightFieldNumber;
const int Holiday_ConvolutionParameter::kKernelWidthFieldNumber;
const int Holiday_ConvolutionParameter::kStrideHeightFieldNumber;
const int Holiday_ConvolutionParameter::kStrideWidthFieldNumber;
const int Holiday_ConvolutionParameter::kGroupFieldNumber;
const int Holiday_ConvolutionParameter::kAxisFieldNumber;
const int Holiday_ConvolutionParameter::kForceNdIm2ColFieldNumber;
const int Holiday_ConvolutionParameter::kTfPaddingFieldNumber;
#endif  // !_MSC_VER

Holiday_ConvolutionParameter::Holiday_ConvolutionParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Holiday_ConvolutionParameter)
}

void Holiday_ConvolutionParameter::InitAsDefaultInstance() {
  bias_param_ = const_cast< ::Holiday_BlobProto*>(&::Holiday_BlobProto::default_instance());
  kernel_param_ = const_cast< ::Holiday_BlobProto*>(&::Holiday_BlobProto::default_instance());
}

Holiday_ConvolutionParameter::Holiday_ConvolutionParameter(const Holiday_ConvolutionParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Holiday_ConvolutionParameter)
}

void Holiday_ConvolutionParameter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  bias_param_ = NULL;
  kernel_param_ = NULL;
  dilation_height_ = 0u;
  dilation_width_ = 0u;
  num_output_ = 0u;
  pad_height_ = 0u;
  pad_width_ = 0u;
  kernel_height_ = 0u;
  kernel_width_ = 0u;
  stride_height_ = 0u;
  stride_width_ = 0u;
  group_ = 1u;
  axis_ = 1;
  force_nd_im2col_ = false;
  tf_padding_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Holiday_ConvolutionParameter::~Holiday_ConvolutionParameter() {
  // @@protoc_insertion_point(destructor:Holiday_ConvolutionParameter)
  SharedDtor();
}

void Holiday_ConvolutionParameter::SharedDtor() {
  if (tf_padding_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tf_padding_;
  }
  if (this != default_instance_) {
    delete bias_param_;
    delete kernel_param_;
  }
}

void Holiday_ConvolutionParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Holiday_ConvolutionParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Holiday_ConvolutionParameter_descriptor_;
}

const Holiday_ConvolutionParameter& Holiday_ConvolutionParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HolidayCNN_5fproto_2eproto();
  return *default_instance_;
}

Holiday_ConvolutionParameter* Holiday_ConvolutionParameter::default_instance_ = NULL;

Holiday_ConvolutionParameter* Holiday_ConvolutionParameter::New() const {
  return new Holiday_ConvolutionParameter;
}

void Holiday_ConvolutionParameter::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Holiday_ConvolutionParameter*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(dilation_height_, kernel_height_);
    if (has_bias_param()) {
      if (bias_param_ != NULL) bias_param_->::Holiday_BlobProto::Clear();
    }
    if (has_kernel_param()) {
      if (kernel_param_ != NULL) kernel_param_->::Holiday_BlobProto::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 32512) {
    ZR_(kernel_width_, stride_width_);
    group_ = 1u;
    axis_ = 1;
    force_nd_im2col_ = false;
    if (has_tf_padding()) {
      if (tf_padding_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tf_padding_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Holiday_ConvolutionParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Holiday_ConvolutionParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Holiday_BlobProto bias_param = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bias_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_kernel_param;
        break;
      }

      // optional .Holiday_BlobProto kernel_param = 2;
      case 2: {
        if (tag == 18) {
         parse_kernel_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kernel_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_dilation_height;
        break;
      }

      // optional uint32 dilation_height = 3;
      case 3: {
        if (tag == 24) {
         parse_dilation_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dilation_height_)));
          set_has_dilation_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_dilation_width;
        break;
      }

      // optional uint32 dilation_width = 4;
      case 4: {
        if (tag == 32) {
         parse_dilation_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dilation_width_)));
          set_has_dilation_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_num_output;
        break;
      }

      // optional uint32 num_output = 5;
      case 5: {
        if (tag == 40) {
         parse_num_output:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_output_)));
          set_has_num_output();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_pad_height;
        break;
      }

      // optional uint32 pad_height = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_pad_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pad_height_)));
          set_has_pad_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_pad_width;
        break;
      }

      // optional uint32 pad_width = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_pad_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pad_width_)));
          set_has_pad_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_kernel_height;
        break;
      }

      // optional uint32 kernel_height = 8;
      case 8: {
        if (tag == 64) {
         parse_kernel_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kernel_height_)));
          set_has_kernel_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_kernel_width;
        break;
      }

      // optional uint32 kernel_width = 9;
      case 9: {
        if (tag == 72) {
         parse_kernel_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kernel_width_)));
          set_has_kernel_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_stride_height;
        break;
      }

      // optional uint32 stride_height = 10;
      case 10: {
        if (tag == 80) {
         parse_stride_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stride_height_)));
          set_has_stride_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_stride_width;
        break;
      }

      // optional uint32 stride_width = 11;
      case 11: {
        if (tag == 88) {
         parse_stride_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stride_width_)));
          set_has_stride_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_group;
        break;
      }

      // optional uint32 group = 12 [default = 1];
      case 12: {
        if (tag == 96) {
         parse_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_)));
          set_has_group();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_axis;
        break;
      }

      // optional int32 axis = 13 [default = 1];
      case 13: {
        if (tag == 104) {
         parse_axis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
          set_has_axis();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_force_nd_im2col;
        break;
      }

      // optional bool force_nd_im2col = 14 [default = false];
      case 14: {
        if (tag == 112) {
         parse_force_nd_im2col:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &force_nd_im2col_)));
          set_has_force_nd_im2col();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_tf_padding;
        break;
      }

      // optional string tf_padding = 15;
      case 15: {
        if (tag == 122) {
         parse_tf_padding:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tf_padding()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tf_padding().data(), this->tf_padding().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tf_padding");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Holiday_ConvolutionParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Holiday_ConvolutionParameter)
  return false;
#undef DO_
}

void Holiday_ConvolutionParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Holiday_ConvolutionParameter)
  // optional .Holiday_BlobProto bias_param = 1;
  if (has_bias_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bias_param(), output);
  }

  // optional .Holiday_BlobProto kernel_param = 2;
  if (has_kernel_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->kernel_param(), output);
  }

  // optional uint32 dilation_height = 3;
  if (has_dilation_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dilation_height(), output);
  }

  // optional uint32 dilation_width = 4;
  if (has_dilation_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dilation_width(), output);
  }

  // optional uint32 num_output = 5;
  if (has_num_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->num_output(), output);
  }

  // optional uint32 pad_height = 6 [default = 0];
  if (has_pad_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->pad_height(), output);
  }

  // optional uint32 pad_width = 7 [default = 0];
  if (has_pad_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->pad_width(), output);
  }

  // optional uint32 kernel_height = 8;
  if (has_kernel_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->kernel_height(), output);
  }

  // optional uint32 kernel_width = 9;
  if (has_kernel_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->kernel_width(), output);
  }

  // optional uint32 stride_height = 10;
  if (has_stride_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->stride_height(), output);
  }

  // optional uint32 stride_width = 11;
  if (has_stride_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->stride_width(), output);
  }

  // optional uint32 group = 12 [default = 1];
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->group(), output);
  }

  // optional int32 axis = 13 [default = 1];
  if (has_axis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->axis(), output);
  }

  // optional bool force_nd_im2col = 14 [default = false];
  if (has_force_nd_im2col()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->force_nd_im2col(), output);
  }

  // optional string tf_padding = 15;
  if (has_tf_padding()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tf_padding().data(), this->tf_padding().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tf_padding");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->tf_padding(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Holiday_ConvolutionParameter)
}

::google::protobuf::uint8* Holiday_ConvolutionParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Holiday_ConvolutionParameter)
  // optional .Holiday_BlobProto bias_param = 1;
  if (has_bias_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bias_param(), target);
  }

  // optional .Holiday_BlobProto kernel_param = 2;
  if (has_kernel_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->kernel_param(), target);
  }

  // optional uint32 dilation_height = 3;
  if (has_dilation_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dilation_height(), target);
  }

  // optional uint32 dilation_width = 4;
  if (has_dilation_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->dilation_width(), target);
  }

  // optional uint32 num_output = 5;
  if (has_num_output()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->num_output(), target);
  }

  // optional uint32 pad_height = 6 [default = 0];
  if (has_pad_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->pad_height(), target);
  }

  // optional uint32 pad_width = 7 [default = 0];
  if (has_pad_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->pad_width(), target);
  }

  // optional uint32 kernel_height = 8;
  if (has_kernel_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->kernel_height(), target);
  }

  // optional uint32 kernel_width = 9;
  if (has_kernel_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->kernel_width(), target);
  }

  // optional uint32 stride_height = 10;
  if (has_stride_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->stride_height(), target);
  }

  // optional uint32 stride_width = 11;
  if (has_stride_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->stride_width(), target);
  }

  // optional uint32 group = 12 [default = 1];
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->group(), target);
  }

  // optional int32 axis = 13 [default = 1];
  if (has_axis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->axis(), target);
  }

  // optional bool force_nd_im2col = 14 [default = false];
  if (has_force_nd_im2col()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->force_nd_im2col(), target);
  }

  // optional string tf_padding = 15;
  if (has_tf_padding()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tf_padding().data(), this->tf_padding().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tf_padding");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->tf_padding(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Holiday_ConvolutionParameter)
  return target;
}

int Holiday_ConvolutionParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Holiday_BlobProto bias_param = 1;
    if (has_bias_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bias_param());
    }

    // optional .Holiday_BlobProto kernel_param = 2;
    if (has_kernel_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->kernel_param());
    }

    // optional uint32 dilation_height = 3;
    if (has_dilation_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dilation_height());
    }

    // optional uint32 dilation_width = 4;
    if (has_dilation_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dilation_width());
    }

    // optional uint32 num_output = 5;
    if (has_num_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_output());
    }

    // optional uint32 pad_height = 6 [default = 0];
    if (has_pad_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pad_height());
    }

    // optional uint32 pad_width = 7 [default = 0];
    if (has_pad_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pad_width());
    }

    // optional uint32 kernel_height = 8;
    if (has_kernel_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kernel_height());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 kernel_width = 9;
    if (has_kernel_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kernel_width());
    }

    // optional uint32 stride_height = 10;
    if (has_stride_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stride_height());
    }

    // optional uint32 stride_width = 11;
    if (has_stride_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stride_width());
    }

    // optional uint32 group = 12 [default = 1];
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group());
    }

    // optional int32 axis = 13 [default = 1];
    if (has_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axis());
    }

    // optional bool force_nd_im2col = 14 [default = false];
    if (has_force_nd_im2col()) {
      total_size += 1 + 1;
    }

    // optional string tf_padding = 15;
    if (has_tf_padding()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tf_padding());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Holiday_ConvolutionParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Holiday_ConvolutionParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Holiday_ConvolutionParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Holiday_ConvolutionParameter::MergeFrom(const Holiday_ConvolutionParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bias_param()) {
      mutable_bias_param()->::Holiday_BlobProto::MergeFrom(from.bias_param());
    }
    if (from.has_kernel_param()) {
      mutable_kernel_param()->::Holiday_BlobProto::MergeFrom(from.kernel_param());
    }
    if (from.has_dilation_height()) {
      set_dilation_height(from.dilation_height());
    }
    if (from.has_dilation_width()) {
      set_dilation_width(from.dilation_width());
    }
    if (from.has_num_output()) {
      set_num_output(from.num_output());
    }
    if (from.has_pad_height()) {
      set_pad_height(from.pad_height());
    }
    if (from.has_pad_width()) {
      set_pad_width(from.pad_width());
    }
    if (from.has_kernel_height()) {
      set_kernel_height(from.kernel_height());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_kernel_width()) {
      set_kernel_width(from.kernel_width());
    }
    if (from.has_stride_height()) {
      set_stride_height(from.stride_height());
    }
    if (from.has_stride_width()) {
      set_stride_width(from.stride_width());
    }
    if (from.has_group()) {
      set_group(from.group());
    }
    if (from.has_axis()) {
      set_axis(from.axis());
    }
    if (from.has_force_nd_im2col()) {
      set_force_nd_im2col(from.force_nd_im2col());
    }
    if (from.has_tf_padding()) {
      set_tf_padding(from.tf_padding());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Holiday_ConvolutionParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Holiday_ConvolutionParameter::CopyFrom(const Holiday_ConvolutionParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Holiday_ConvolutionParameter::IsInitialized() const {

  return true;
}

void Holiday_ConvolutionParameter::Swap(Holiday_ConvolutionParameter* other) {
  if (other != this) {
    std::swap(bias_param_, other->bias_param_);
    std::swap(kernel_param_, other->kernel_param_);
    std::swap(dilation_height_, other->dilation_height_);
    std::swap(dilation_width_, other->dilation_width_);
    std::swap(num_output_, other->num_output_);
    std::swap(pad_height_, other->pad_height_);
    std::swap(pad_width_, other->pad_width_);
    std::swap(kernel_height_, other->kernel_height_);
    std::swap(kernel_width_, other->kernel_width_);
    std::swap(stride_height_, other->stride_height_);
    std::swap(stride_width_, other->stride_width_);
    std::swap(group_, other->group_);
    std::swap(axis_, other->axis_);
    std::swap(force_nd_im2col_, other->force_nd_im2col_);
    std::swap(tf_padding_, other->tf_padding_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Holiday_ConvolutionParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Holiday_ConvolutionParameter_descriptor_;
  metadata.reflection = Holiday_ConvolutionParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Holiday_BatchNormliseParameter::kMeanParamFieldNumber;
const int Holiday_BatchNormliseParameter::kCovarianceParamFieldNumber;
#endif  // !_MSC_VER

Holiday_BatchNormliseParameter::Holiday_BatchNormliseParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Holiday_BatchNormliseParameter)
}

void Holiday_BatchNormliseParameter::InitAsDefaultInstance() {
  mean_param_ = const_cast< ::Holiday_BlobProto*>(&::Holiday_BlobProto::default_instance());
  covariance_param_ = const_cast< ::Holiday_BlobProto*>(&::Holiday_BlobProto::default_instance());
}

Holiday_BatchNormliseParameter::Holiday_BatchNormliseParameter(const Holiday_BatchNormliseParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Holiday_BatchNormliseParameter)
}

void Holiday_BatchNormliseParameter::SharedCtor() {
  _cached_size_ = 0;
  mean_param_ = NULL;
  covariance_param_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Holiday_BatchNormliseParameter::~Holiday_BatchNormliseParameter() {
  // @@protoc_insertion_point(destructor:Holiday_BatchNormliseParameter)
  SharedDtor();
}

void Holiday_BatchNormliseParameter::SharedDtor() {
  if (this != default_instance_) {
    delete mean_param_;
    delete covariance_param_;
  }
}

void Holiday_BatchNormliseParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Holiday_BatchNormliseParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Holiday_BatchNormliseParameter_descriptor_;
}

const Holiday_BatchNormliseParameter& Holiday_BatchNormliseParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HolidayCNN_5fproto_2eproto();
  return *default_instance_;
}

Holiday_BatchNormliseParameter* Holiday_BatchNormliseParameter::default_instance_ = NULL;

Holiday_BatchNormliseParameter* Holiday_BatchNormliseParameter::New() const {
  return new Holiday_BatchNormliseParameter;
}

void Holiday_BatchNormliseParameter::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_mean_param()) {
      if (mean_param_ != NULL) mean_param_->::Holiday_BlobProto::Clear();
    }
    if (has_covariance_param()) {
      if (covariance_param_ != NULL) covariance_param_->::Holiday_BlobProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Holiday_BatchNormliseParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Holiday_BatchNormliseParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Holiday_BlobProto mean_param = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mean_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_covariance_param;
        break;
      }

      // optional .Holiday_BlobProto covariance_param = 2;
      case 2: {
        if (tag == 18) {
         parse_covariance_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_covariance_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Holiday_BatchNormliseParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Holiday_BatchNormliseParameter)
  return false;
#undef DO_
}

void Holiday_BatchNormliseParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Holiday_BatchNormliseParameter)
  // optional .Holiday_BlobProto mean_param = 1;
  if (has_mean_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mean_param(), output);
  }

  // optional .Holiday_BlobProto covariance_param = 2;
  if (has_covariance_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->covariance_param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Holiday_BatchNormliseParameter)
}

::google::protobuf::uint8* Holiday_BatchNormliseParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Holiday_BatchNormliseParameter)
  // optional .Holiday_BlobProto mean_param = 1;
  if (has_mean_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mean_param(), target);
  }

  // optional .Holiday_BlobProto covariance_param = 2;
  if (has_covariance_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->covariance_param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Holiday_BatchNormliseParameter)
  return target;
}

int Holiday_BatchNormliseParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Holiday_BlobProto mean_param = 1;
    if (has_mean_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mean_param());
    }

    // optional .Holiday_BlobProto covariance_param = 2;
    if (has_covariance_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->covariance_param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Holiday_BatchNormliseParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Holiday_BatchNormliseParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Holiday_BatchNormliseParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Holiday_BatchNormliseParameter::MergeFrom(const Holiday_BatchNormliseParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mean_param()) {
      mutable_mean_param()->::Holiday_BlobProto::MergeFrom(from.mean_param());
    }
    if (from.has_covariance_param()) {
      mutable_covariance_param()->::Holiday_BlobProto::MergeFrom(from.covariance_param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Holiday_BatchNormliseParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Holiday_BatchNormliseParameter::CopyFrom(const Holiday_BatchNormliseParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Holiday_BatchNormliseParameter::IsInitialized() const {

  return true;
}

void Holiday_BatchNormliseParameter::Swap(Holiday_BatchNormliseParameter* other) {
  if (other != this) {
    std::swap(mean_param_, other->mean_param_);
    std::swap(covariance_param_, other->covariance_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Holiday_BatchNormliseParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Holiday_BatchNormliseParameter_descriptor_;
  metadata.reflection = Holiday_BatchNormliseParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Holiday_ScaleParameter::kScaleParamFieldNumber;
const int Holiday_ScaleParameter::kBiasParamFieldNumber;
#endif  // !_MSC_VER

Holiday_ScaleParameter::Holiday_ScaleParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Holiday_ScaleParameter)
}

void Holiday_ScaleParameter::InitAsDefaultInstance() {
  scale_param_ = const_cast< ::Holiday_BlobProto*>(&::Holiday_BlobProto::default_instance());
  bias_param_ = const_cast< ::Holiday_BlobProto*>(&::Holiday_BlobProto::default_instance());
}

Holiday_ScaleParameter::Holiday_ScaleParameter(const Holiday_ScaleParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Holiday_ScaleParameter)
}

void Holiday_ScaleParameter::SharedCtor() {
  _cached_size_ = 0;
  scale_param_ = NULL;
  bias_param_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Holiday_ScaleParameter::~Holiday_ScaleParameter() {
  // @@protoc_insertion_point(destructor:Holiday_ScaleParameter)
  SharedDtor();
}

void Holiday_ScaleParameter::SharedDtor() {
  if (this != default_instance_) {
    delete scale_param_;
    delete bias_param_;
  }
}

void Holiday_ScaleParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Holiday_ScaleParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Holiday_ScaleParameter_descriptor_;
}

const Holiday_ScaleParameter& Holiday_ScaleParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HolidayCNN_5fproto_2eproto();
  return *default_instance_;
}

Holiday_ScaleParameter* Holiday_ScaleParameter::default_instance_ = NULL;

Holiday_ScaleParameter* Holiday_ScaleParameter::New() const {
  return new Holiday_ScaleParameter;
}

void Holiday_ScaleParameter::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_scale_param()) {
      if (scale_param_ != NULL) scale_param_->::Holiday_BlobProto::Clear();
    }
    if (has_bias_param()) {
      if (bias_param_ != NULL) bias_param_->::Holiday_BlobProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Holiday_ScaleParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Holiday_ScaleParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Holiday_BlobProto scale_param = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scale_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bias_param;
        break;
      }

      // optional .Holiday_BlobProto bias_param = 2;
      case 2: {
        if (tag == 18) {
         parse_bias_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bias_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Holiday_ScaleParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Holiday_ScaleParameter)
  return false;
#undef DO_
}

void Holiday_ScaleParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Holiday_ScaleParameter)
  // optional .Holiday_BlobProto scale_param = 1;
  if (has_scale_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->scale_param(), output);
  }

  // optional .Holiday_BlobProto bias_param = 2;
  if (has_bias_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->bias_param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Holiday_ScaleParameter)
}

::google::protobuf::uint8* Holiday_ScaleParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Holiday_ScaleParameter)
  // optional .Holiday_BlobProto scale_param = 1;
  if (has_scale_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->scale_param(), target);
  }

  // optional .Holiday_BlobProto bias_param = 2;
  if (has_bias_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->bias_param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Holiday_ScaleParameter)
  return target;
}

int Holiday_ScaleParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Holiday_BlobProto scale_param = 1;
    if (has_scale_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scale_param());
    }

    // optional .Holiday_BlobProto bias_param = 2;
    if (has_bias_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bias_param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Holiday_ScaleParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Holiday_ScaleParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Holiday_ScaleParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Holiday_ScaleParameter::MergeFrom(const Holiday_ScaleParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scale_param()) {
      mutable_scale_param()->::Holiday_BlobProto::MergeFrom(from.scale_param());
    }
    if (from.has_bias_param()) {
      mutable_bias_param()->::Holiday_BlobProto::MergeFrom(from.bias_param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Holiday_ScaleParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Holiday_ScaleParameter::CopyFrom(const Holiday_ScaleParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Holiday_ScaleParameter::IsInitialized() const {

  return true;
}

void Holiday_ScaleParameter::Swap(Holiday_ScaleParameter* other) {
  if (other != this) {
    std::swap(scale_param_, other->scale_param_);
    std::swap(bias_param_, other->bias_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Holiday_ScaleParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Holiday_ScaleParameter_descriptor_;
  metadata.reflection = Holiday_ScaleParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Holiday_ConcatParameter::kConcatDimFieldNumber;
const int Holiday_ConcatParameter::kAxisFieldNumber;
#endif  // !_MSC_VER

Holiday_ConcatParameter::Holiday_ConcatParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Holiday_ConcatParameter)
}

void Holiday_ConcatParameter::InitAsDefaultInstance() {
}

Holiday_ConcatParameter::Holiday_ConcatParameter(const Holiday_ConcatParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Holiday_ConcatParameter)
}

void Holiday_ConcatParameter::SharedCtor() {
  _cached_size_ = 0;
  concat_dim_ = 1u;
  axis_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Holiday_ConcatParameter::~Holiday_ConcatParameter() {
  // @@protoc_insertion_point(destructor:Holiday_ConcatParameter)
  SharedDtor();
}

void Holiday_ConcatParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Holiday_ConcatParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Holiday_ConcatParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Holiday_ConcatParameter_descriptor_;
}

const Holiday_ConcatParameter& Holiday_ConcatParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HolidayCNN_5fproto_2eproto();
  return *default_instance_;
}

Holiday_ConcatParameter* Holiday_ConcatParameter::default_instance_ = NULL;

Holiday_ConcatParameter* Holiday_ConcatParameter::New() const {
  return new Holiday_ConcatParameter;
}

void Holiday_ConcatParameter::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    concat_dim_ = 1u;
    axis_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Holiday_ConcatParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Holiday_ConcatParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 concat_dim = 1 [default = 1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &concat_dim_)));
          set_has_concat_dim();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_axis;
        break;
      }

      // optional int32 axis = 2 [default = 1];
      case 2: {
        if (tag == 16) {
         parse_axis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
          set_has_axis();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Holiday_ConcatParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Holiday_ConcatParameter)
  return false;
#undef DO_
}

void Holiday_ConcatParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Holiday_ConcatParameter)
  // optional uint32 concat_dim = 1 [default = 1];
  if (has_concat_dim()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->concat_dim(), output);
  }

  // optional int32 axis = 2 [default = 1];
  if (has_axis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->axis(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Holiday_ConcatParameter)
}

::google::protobuf::uint8* Holiday_ConcatParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Holiday_ConcatParameter)
  // optional uint32 concat_dim = 1 [default = 1];
  if (has_concat_dim()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->concat_dim(), target);
  }

  // optional int32 axis = 2 [default = 1];
  if (has_axis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->axis(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Holiday_ConcatParameter)
  return target;
}

int Holiday_ConcatParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 concat_dim = 1 [default = 1];
    if (has_concat_dim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->concat_dim());
    }

    // optional int32 axis = 2 [default = 1];
    if (has_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axis());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Holiday_ConcatParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Holiday_ConcatParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Holiday_ConcatParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Holiday_ConcatParameter::MergeFrom(const Holiday_ConcatParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_concat_dim()) {
      set_concat_dim(from.concat_dim());
    }
    if (from.has_axis()) {
      set_axis(from.axis());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Holiday_ConcatParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Holiday_ConcatParameter::CopyFrom(const Holiday_ConcatParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Holiday_ConcatParameter::IsInitialized() const {

  return true;
}

void Holiday_ConcatParameter::Swap(Holiday_ConcatParameter* other) {
  if (other != this) {
    std::swap(concat_dim_, other->concat_dim_);
    std::swap(axis_, other->axis_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Holiday_ConcatParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Holiday_ConcatParameter_descriptor_;
  metadata.reflection = Holiday_ConcatParameter_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Holiday_EltwiseParameter_EltwiseOp_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Holiday_EltwiseParameter_EltwiseOp_descriptor_;
}
bool Holiday_EltwiseParameter_EltwiseOp_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Holiday_EltwiseParameter_EltwiseOp Holiday_EltwiseParameter::PROD;
const Holiday_EltwiseParameter_EltwiseOp Holiday_EltwiseParameter::SUM;
const Holiday_EltwiseParameter_EltwiseOp Holiday_EltwiseParameter::MAX;
const Holiday_EltwiseParameter_EltwiseOp Holiday_EltwiseParameter::EltwiseOp_MIN;
const Holiday_EltwiseParameter_EltwiseOp Holiday_EltwiseParameter::EltwiseOp_MAX;
const int Holiday_EltwiseParameter::EltwiseOp_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Holiday_EltwiseParameter::kOperationFieldNumber;
const int Holiday_EltwiseParameter::kCoeffFieldNumber;
const int Holiday_EltwiseParameter::kStableProdGradFieldNumber;
#endif  // !_MSC_VER

Holiday_EltwiseParameter::Holiday_EltwiseParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Holiday_EltwiseParameter)
}

void Holiday_EltwiseParameter::InitAsDefaultInstance() {
}

Holiday_EltwiseParameter::Holiday_EltwiseParameter(const Holiday_EltwiseParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Holiday_EltwiseParameter)
}

void Holiday_EltwiseParameter::SharedCtor() {
  _cached_size_ = 0;
  operation_ = 1;
  stable_prod_grad_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Holiday_EltwiseParameter::~Holiday_EltwiseParameter() {
  // @@protoc_insertion_point(destructor:Holiday_EltwiseParameter)
  SharedDtor();
}

void Holiday_EltwiseParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Holiday_EltwiseParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Holiday_EltwiseParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Holiday_EltwiseParameter_descriptor_;
}

const Holiday_EltwiseParameter& Holiday_EltwiseParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HolidayCNN_5fproto_2eproto();
  return *default_instance_;
}

Holiday_EltwiseParameter* Holiday_EltwiseParameter::default_instance_ = NULL;

Holiday_EltwiseParameter* Holiday_EltwiseParameter::New() const {
  return new Holiday_EltwiseParameter;
}

void Holiday_EltwiseParameter::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    operation_ = 1;
    stable_prod_grad_ = true;
  }
  coeff_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Holiday_EltwiseParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Holiday_EltwiseParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Holiday_EltwiseParameter.EltwiseOp operation = 1 [default = SUM];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Holiday_EltwiseParameter_EltwiseOp_IsValid(value)) {
            set_operation(static_cast< ::Holiday_EltwiseParameter_EltwiseOp >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_coeff;
        break;
      }

      // repeated float coeff = 2;
      case 2: {
        if (tag == 21) {
         parse_coeff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 21, input, this->mutable_coeff())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_coeff())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_coeff;
        if (input->ExpectTag(24)) goto parse_stable_prod_grad;
        break;
      }

      // optional bool stable_prod_grad = 3 [default = true];
      case 3: {
        if (tag == 24) {
         parse_stable_prod_grad:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stable_prod_grad_)));
          set_has_stable_prod_grad();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Holiday_EltwiseParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Holiday_EltwiseParameter)
  return false;
#undef DO_
}

void Holiday_EltwiseParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Holiday_EltwiseParameter)
  // optional .Holiday_EltwiseParameter.EltwiseOp operation = 1 [default = SUM];
  if (has_operation()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->operation(), output);
  }

  // repeated float coeff = 2;
  for (int i = 0; i < this->coeff_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      2, this->coeff(i), output);
  }

  // optional bool stable_prod_grad = 3 [default = true];
  if (has_stable_prod_grad()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->stable_prod_grad(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Holiday_EltwiseParameter)
}

::google::protobuf::uint8* Holiday_EltwiseParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Holiday_EltwiseParameter)
  // optional .Holiday_EltwiseParameter.EltwiseOp operation = 1 [default = SUM];
  if (has_operation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->operation(), target);
  }

  // repeated float coeff = 2;
  for (int i = 0; i < this->coeff_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(2, this->coeff(i), target);
  }

  // optional bool stable_prod_grad = 3 [default = true];
  if (has_stable_prod_grad()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->stable_prod_grad(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Holiday_EltwiseParameter)
  return target;
}

int Holiday_EltwiseParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Holiday_EltwiseParameter.EltwiseOp operation = 1 [default = SUM];
    if (has_operation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->operation());
    }

    // optional bool stable_prod_grad = 3 [default = true];
    if (has_stable_prod_grad()) {
      total_size += 1 + 1;
    }

  }
  // repeated float coeff = 2;
  {
    int data_size = 0;
    data_size = 4 * this->coeff_size();
    total_size += 1 * this->coeff_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Holiday_EltwiseParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Holiday_EltwiseParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Holiday_EltwiseParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Holiday_EltwiseParameter::MergeFrom(const Holiday_EltwiseParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  coeff_.MergeFrom(from.coeff_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operation()) {
      set_operation(from.operation());
    }
    if (from.has_stable_prod_grad()) {
      set_stable_prod_grad(from.stable_prod_grad());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Holiday_EltwiseParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Holiday_EltwiseParameter::CopyFrom(const Holiday_EltwiseParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Holiday_EltwiseParameter::IsInitialized() const {

  return true;
}

void Holiday_EltwiseParameter::Swap(Holiday_EltwiseParameter* other) {
  if (other != this) {
    std::swap(operation_, other->operation_);
    coeff_.Swap(&other->coeff_);
    std::swap(stable_prod_grad_, other->stable_prod_grad_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Holiday_EltwiseParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Holiday_EltwiseParameter_descriptor_;
  metadata.reflection = Holiday_EltwiseParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Holiday_ExpParameter::kBaseFieldNumber;
const int Holiday_ExpParameter::kScaleFieldNumber;
const int Holiday_ExpParameter::kShiftFieldNumber;
#endif  // !_MSC_VER

Holiday_ExpParameter::Holiday_ExpParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Holiday_ExpParameter)
}

void Holiday_ExpParameter::InitAsDefaultInstance() {
}

Holiday_ExpParameter::Holiday_ExpParameter(const Holiday_ExpParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Holiday_ExpParameter)
}

void Holiday_ExpParameter::SharedCtor() {
  _cached_size_ = 0;
  base_ = -1;
  scale_ = 1;
  shift_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Holiday_ExpParameter::~Holiday_ExpParameter() {
  // @@protoc_insertion_point(destructor:Holiday_ExpParameter)
  SharedDtor();
}

void Holiday_ExpParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Holiday_ExpParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Holiday_ExpParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Holiday_ExpParameter_descriptor_;
}

const Holiday_ExpParameter& Holiday_ExpParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HolidayCNN_5fproto_2eproto();
  return *default_instance_;
}

Holiday_ExpParameter* Holiday_ExpParameter::default_instance_ = NULL;

Holiday_ExpParameter* Holiday_ExpParameter::New() const {
  return new Holiday_ExpParameter;
}

void Holiday_ExpParameter::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    base_ = -1;
    scale_ = 1;
    shift_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Holiday_ExpParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Holiday_ExpParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float base = 1 [default = -1];
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &base_)));
          set_has_base();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_scale;
        break;
      }

      // optional float scale = 2 [default = 1];
      case 2: {
        if (tag == 21) {
         parse_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
          set_has_scale();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_shift;
        break;
      }

      // optional float shift = 3 [default = 0];
      case 3: {
        if (tag == 29) {
         parse_shift:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &shift_)));
          set_has_shift();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Holiday_ExpParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Holiday_ExpParameter)
  return false;
#undef DO_
}

void Holiday_ExpParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Holiday_ExpParameter)
  // optional float base = 1 [default = -1];
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->base(), output);
  }

  // optional float scale = 2 [default = 1];
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->scale(), output);
  }

  // optional float shift = 3 [default = 0];
  if (has_shift()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->shift(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Holiday_ExpParameter)
}

::google::protobuf::uint8* Holiday_ExpParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Holiday_ExpParameter)
  // optional float base = 1 [default = -1];
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->base(), target);
  }

  // optional float scale = 2 [default = 1];
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->scale(), target);
  }

  // optional float shift = 3 [default = 0];
  if (has_shift()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->shift(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Holiday_ExpParameter)
  return target;
}

int Holiday_ExpParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float base = 1 [default = -1];
    if (has_base()) {
      total_size += 1 + 4;
    }

    // optional float scale = 2 [default = 1];
    if (has_scale()) {
      total_size += 1 + 4;
    }

    // optional float shift = 3 [default = 0];
    if (has_shift()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Holiday_ExpParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Holiday_ExpParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Holiday_ExpParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Holiday_ExpParameter::MergeFrom(const Holiday_ExpParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      set_base(from.base());
    }
    if (from.has_scale()) {
      set_scale(from.scale());
    }
    if (from.has_shift()) {
      set_shift(from.shift());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Holiday_ExpParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Holiday_ExpParameter::CopyFrom(const Holiday_ExpParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Holiday_ExpParameter::IsInitialized() const {

  return true;
}

void Holiday_ExpParameter::Swap(Holiday_ExpParameter* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(scale_, other->scale_);
    std::swap(shift_, other->shift_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Holiday_ExpParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Holiday_ExpParameter_descriptor_;
  metadata.reflection = Holiday_ExpParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Holiday_MemoryDataParameterProcess::kBatchSizeFieldNumber;
const int Holiday_MemoryDataParameterProcess::kChannelsFieldNumber;
const int Holiday_MemoryDataParameterProcess::kHeightFieldNumber;
const int Holiday_MemoryDataParameterProcess::kWidthFieldNumber;
const int Holiday_MemoryDataParameterProcess::kNewHeightFieldNumber;
const int Holiday_MemoryDataParameterProcess::kNewWidthFieldNumber;
const int Holiday_MemoryDataParameterProcess::kScaleFieldNumber;
const int Holiday_MemoryDataParameterProcess::kMeanFileFieldNumber;
const int Holiday_MemoryDataParameterProcess::kMeanValueFieldNumber;
const int Holiday_MemoryDataParameterProcess::kCropSizeHeightFieldNumber;
const int Holiday_MemoryDataParameterProcess::kCropSizeWidthFieldNumber;
const int Holiday_MemoryDataParameterProcess::kChannelSwapsFieldNumber;
const int Holiday_MemoryDataParameterProcess::kPrewhitenFieldNumber;
#endif  // !_MSC_VER

Holiday_MemoryDataParameterProcess::Holiday_MemoryDataParameterProcess()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Holiday_MemoryDataParameterProcess)
}

void Holiday_MemoryDataParameterProcess::InitAsDefaultInstance() {
  mean_file_ = const_cast< ::Holiday_BlobProto*>(&::Holiday_BlobProto::default_instance());
}

Holiday_MemoryDataParameterProcess::Holiday_MemoryDataParameterProcess(const Holiday_MemoryDataParameterProcess& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Holiday_MemoryDataParameterProcess)
}

void Holiday_MemoryDataParameterProcess::SharedCtor() {
  _cached_size_ = 0;
  batch_size_ = 0u;
  channels_ = 0u;
  height_ = 0u;
  width_ = 0u;
  new_height_ = 0u;
  new_width_ = 0u;
  scale_ = 1;
  mean_file_ = NULL;
  crop_size_height_ = 0u;
  crop_size_width_ = 0u;
  prewhiten_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Holiday_MemoryDataParameterProcess::~Holiday_MemoryDataParameterProcess() {
  // @@protoc_insertion_point(destructor:Holiday_MemoryDataParameterProcess)
  SharedDtor();
}

void Holiday_MemoryDataParameterProcess::SharedDtor() {
  if (this != default_instance_) {
    delete mean_file_;
  }
}

void Holiday_MemoryDataParameterProcess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Holiday_MemoryDataParameterProcess::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Holiday_MemoryDataParameterProcess_descriptor_;
}

const Holiday_MemoryDataParameterProcess& Holiday_MemoryDataParameterProcess::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HolidayCNN_5fproto_2eproto();
  return *default_instance_;
}

Holiday_MemoryDataParameterProcess* Holiday_MemoryDataParameterProcess::default_instance_ = NULL;

Holiday_MemoryDataParameterProcess* Holiday_MemoryDataParameterProcess::New() const {
  return new Holiday_MemoryDataParameterProcess;
}

void Holiday_MemoryDataParameterProcess::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Holiday_MemoryDataParameterProcess*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(batch_size_, new_width_);
    scale_ = 1;
    if (has_mean_file()) {
      if (mean_file_ != NULL) mean_file_->::Holiday_BlobProto::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 5632) {
    ZR_(crop_size_width_, prewhiten_);
    crop_size_height_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  mean_value_.Clear();
  channel_swaps_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Holiday_MemoryDataParameterProcess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Holiday_MemoryDataParameterProcess)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 batch_size = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &batch_size_)));
          set_has_batch_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_channels;
        break;
      }

      // optional uint32 channels = 2;
      case 2: {
        if (tag == 16) {
         parse_channels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channels_)));
          set_has_channels();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_height;
        break;
      }

      // optional uint32 height = 3;
      case 3: {
        if (tag == 24) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_width;
        break;
      }

      // optional uint32 width = 4;
      case 4: {
        if (tag == 32) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_new_height;
        break;
      }

      // optional uint32 new_height = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_new_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_height_)));
          set_has_new_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_new_width;
        break;
      }

      // optional uint32 new_width = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_new_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_width_)));
          set_has_new_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_scale;
        break;
      }

      // optional float scale = 7 [default = 1];
      case 7: {
        if (tag == 61) {
         parse_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
          set_has_scale();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_mean_file;
        break;
      }

      // optional .Holiday_BlobProto mean_file = 8;
      case 8: {
        if (tag == 66) {
         parse_mean_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mean_file()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_mean_value;
        break;
      }

      // repeated float mean_value = 9;
      case 9: {
        if (tag == 77) {
         parse_mean_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 77, input, this->mutable_mean_value())));
        } else if (tag == 74) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_mean_value())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_mean_value;
        if (input->ExpectTag(80)) goto parse_crop_size_height;
        break;
      }

      // optional uint32 crop_size_height = 10 [default = 0];
      case 10: {
        if (tag == 80) {
         parse_crop_size_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crop_size_height_)));
          set_has_crop_size_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_crop_size_width;
        break;
      }

      // optional uint32 crop_size_width = 11 [default = 0];
      case 11: {
        if (tag == 88) {
         parse_crop_size_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crop_size_width_)));
          set_has_crop_size_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_channel_swaps;
        break;
      }

      // repeated uint32 channel_swaps = 12;
      case 12: {
        if (tag == 96) {
         parse_channel_swaps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 96, input, this->mutable_channel_swaps())));
        } else if (tag == 98) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_channel_swaps())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_channel_swaps;
        if (input->ExpectTag(104)) goto parse_prewhiten;
        break;
      }

      // optional bool prewhiten = 13 [default = false];
      case 13: {
        if (tag == 104) {
         parse_prewhiten:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &prewhiten_)));
          set_has_prewhiten();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Holiday_MemoryDataParameterProcess)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Holiday_MemoryDataParameterProcess)
  return false;
#undef DO_
}

void Holiday_MemoryDataParameterProcess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Holiday_MemoryDataParameterProcess)
  // optional uint32 batch_size = 1;
  if (has_batch_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->batch_size(), output);
  }

  // optional uint32 channels = 2;
  if (has_channels()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->channels(), output);
  }

  // optional uint32 height = 3;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->height(), output);
  }

  // optional uint32 width = 4;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->width(), output);
  }

  // optional uint32 new_height = 5 [default = 0];
  if (has_new_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->new_height(), output);
  }

  // optional uint32 new_width = 6 [default = 0];
  if (has_new_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->new_width(), output);
  }

  // optional float scale = 7 [default = 1];
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->scale(), output);
  }

  // optional .Holiday_BlobProto mean_file = 8;
  if (has_mean_file()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->mean_file(), output);
  }

  // repeated float mean_value = 9;
  for (int i = 0; i < this->mean_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      9, this->mean_value(i), output);
  }

  // optional uint32 crop_size_height = 10 [default = 0];
  if (has_crop_size_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->crop_size_height(), output);
  }

  // optional uint32 crop_size_width = 11 [default = 0];
  if (has_crop_size_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->crop_size_width(), output);
  }

  // repeated uint32 channel_swaps = 12;
  for (int i = 0; i < this->channel_swaps_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      12, this->channel_swaps(i), output);
  }

  // optional bool prewhiten = 13 [default = false];
  if (has_prewhiten()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->prewhiten(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Holiday_MemoryDataParameterProcess)
}

::google::protobuf::uint8* Holiday_MemoryDataParameterProcess::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Holiday_MemoryDataParameterProcess)
  // optional uint32 batch_size = 1;
  if (has_batch_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->batch_size(), target);
  }

  // optional uint32 channels = 2;
  if (has_channels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->channels(), target);
  }

  // optional uint32 height = 3;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->height(), target);
  }

  // optional uint32 width = 4;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->width(), target);
  }

  // optional uint32 new_height = 5 [default = 0];
  if (has_new_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->new_height(), target);
  }

  // optional uint32 new_width = 6 [default = 0];
  if (has_new_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->new_width(), target);
  }

  // optional float scale = 7 [default = 1];
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->scale(), target);
  }

  // optional .Holiday_BlobProto mean_file = 8;
  if (has_mean_file()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->mean_file(), target);
  }

  // repeated float mean_value = 9;
  for (int i = 0; i < this->mean_value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(9, this->mean_value(i), target);
  }

  // optional uint32 crop_size_height = 10 [default = 0];
  if (has_crop_size_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->crop_size_height(), target);
  }

  // optional uint32 crop_size_width = 11 [default = 0];
  if (has_crop_size_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->crop_size_width(), target);
  }

  // repeated uint32 channel_swaps = 12;
  for (int i = 0; i < this->channel_swaps_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(12, this->channel_swaps(i), target);
  }

  // optional bool prewhiten = 13 [default = false];
  if (has_prewhiten()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->prewhiten(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Holiday_MemoryDataParameterProcess)
  return target;
}

int Holiday_MemoryDataParameterProcess::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 batch_size = 1;
    if (has_batch_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->batch_size());
    }

    // optional uint32 channels = 2;
    if (has_channels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channels());
    }

    // optional uint32 height = 3;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

    // optional uint32 width = 4;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }

    // optional uint32 new_height = 5 [default = 0];
    if (has_new_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_height());
    }

    // optional uint32 new_width = 6 [default = 0];
    if (has_new_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_width());
    }

    // optional float scale = 7 [default = 1];
    if (has_scale()) {
      total_size += 1 + 4;
    }

    // optional .Holiday_BlobProto mean_file = 8;
    if (has_mean_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mean_file());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional uint32 crop_size_height = 10 [default = 0];
    if (has_crop_size_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crop_size_height());
    }

    // optional uint32 crop_size_width = 11 [default = 0];
    if (has_crop_size_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crop_size_width());
    }

    // optional bool prewhiten = 13 [default = false];
    if (has_prewhiten()) {
      total_size += 1 + 1;
    }

  }
  // repeated float mean_value = 9;
  {
    int data_size = 0;
    data_size = 4 * this->mean_value_size();
    total_size += 1 * this->mean_value_size() + data_size;
  }

  // repeated uint32 channel_swaps = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->channel_swaps_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->channel_swaps(i));
    }
    total_size += 1 * this->channel_swaps_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Holiday_MemoryDataParameterProcess::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Holiday_MemoryDataParameterProcess* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Holiday_MemoryDataParameterProcess*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Holiday_MemoryDataParameterProcess::MergeFrom(const Holiday_MemoryDataParameterProcess& from) {
  GOOGLE_CHECK_NE(&from, this);
  mean_value_.MergeFrom(from.mean_value_);
  channel_swaps_.MergeFrom(from.channel_swaps_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_batch_size()) {
      set_batch_size(from.batch_size());
    }
    if (from.has_channels()) {
      set_channels(from.channels());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_new_height()) {
      set_new_height(from.new_height());
    }
    if (from.has_new_width()) {
      set_new_width(from.new_width());
    }
    if (from.has_scale()) {
      set_scale(from.scale());
    }
    if (from.has_mean_file()) {
      mutable_mean_file()->::Holiday_BlobProto::MergeFrom(from.mean_file());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_crop_size_height()) {
      set_crop_size_height(from.crop_size_height());
    }
    if (from.has_crop_size_width()) {
      set_crop_size_width(from.crop_size_width());
    }
    if (from.has_prewhiten()) {
      set_prewhiten(from.prewhiten());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Holiday_MemoryDataParameterProcess::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Holiday_MemoryDataParameterProcess::CopyFrom(const Holiday_MemoryDataParameterProcess& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Holiday_MemoryDataParameterProcess::IsInitialized() const {

  return true;
}

void Holiday_MemoryDataParameterProcess::Swap(Holiday_MemoryDataParameterProcess* other) {
  if (other != this) {
    std::swap(batch_size_, other->batch_size_);
    std::swap(channels_, other->channels_);
    std::swap(height_, other->height_);
    std::swap(width_, other->width_);
    std::swap(new_height_, other->new_height_);
    std::swap(new_width_, other->new_width_);
    std::swap(scale_, other->scale_);
    std::swap(mean_file_, other->mean_file_);
    mean_value_.Swap(&other->mean_value_);
    std::swap(crop_size_height_, other->crop_size_height_);
    std::swap(crop_size_width_, other->crop_size_width_);
    channel_swaps_.Swap(&other->channel_swaps_);
    std::swap(prewhiten_, other->prewhiten_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Holiday_MemoryDataParameterProcess::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Holiday_MemoryDataParameterProcess_descriptor_;
  metadata.reflection = Holiday_MemoryDataParameterProcess_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Holiday_TransformationParameter::kScaleFieldNumber;
const int Holiday_TransformationParameter::kMirrorFieldNumber;
const int Holiday_TransformationParameter::kCropHeightFieldNumber;
const int Holiday_TransformationParameter::kCropWidthFieldNumber;
const int Holiday_TransformationParameter::kMeanFileFieldNumber;
const int Holiday_TransformationParameter::kMeanValueFieldNumber;
const int Holiday_TransformationParameter::kForceColorFieldNumber;
const int Holiday_TransformationParameter::kForceGrayFieldNumber;
#endif  // !_MSC_VER

Holiday_TransformationParameter::Holiday_TransformationParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Holiday_TransformationParameter)
}

void Holiday_TransformationParameter::InitAsDefaultInstance() {
}

Holiday_TransformationParameter::Holiday_TransformationParameter(const Holiday_TransformationParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Holiday_TransformationParameter)
}

void Holiday_TransformationParameter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  scale_ = 1;
  mirror_ = false;
  crop_height_ = 0u;
  crop_width_ = 0u;
  mean_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  force_color_ = false;
  force_gray_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Holiday_TransformationParameter::~Holiday_TransformationParameter() {
  // @@protoc_insertion_point(destructor:Holiday_TransformationParameter)
  SharedDtor();
}

void Holiday_TransformationParameter::SharedDtor() {
  if (mean_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mean_file_;
  }
  if (this != default_instance_) {
  }
}

void Holiday_TransformationParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Holiday_TransformationParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Holiday_TransformationParameter_descriptor_;
}

const Holiday_TransformationParameter& Holiday_TransformationParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HolidayCNN_5fproto_2eproto();
  return *default_instance_;
}

Holiday_TransformationParameter* Holiday_TransformationParameter::default_instance_ = NULL;

Holiday_TransformationParameter* Holiday_TransformationParameter::New() const {
  return new Holiday_TransformationParameter;
}

void Holiday_TransformationParameter::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Holiday_TransformationParameter*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 223) {
    ZR_(crop_width_, force_gray_);
    scale_ = 1;
    crop_height_ = 0u;
    if (has_mean_file()) {
      if (mean_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mean_file_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  mean_value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Holiday_TransformationParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Holiday_TransformationParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float scale = 1 [default = 1];
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
          set_has_scale();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mirror;
        break;
      }

      // optional bool mirror = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_mirror:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mirror_)));
          set_has_mirror();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_crop_height;
        break;
      }

      // optional uint32 crop_height = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_crop_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crop_height_)));
          set_has_crop_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_crop_width;
        break;
      }

      // optional uint32 crop_width = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_crop_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crop_width_)));
          set_has_crop_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_mean_file;
        break;
      }

      // optional string mean_file = 5;
      case 5: {
        if (tag == 42) {
         parse_mean_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mean_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mean_file().data(), this->mean_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mean_file");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_mean_value;
        break;
      }

      // repeated float mean_value = 6;
      case 6: {
        if (tag == 53) {
         parse_mean_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 53, input, this->mutable_mean_value())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_mean_value())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_mean_value;
        if (input->ExpectTag(56)) goto parse_force_color;
        break;
      }

      // optional bool force_color = 7 [default = false];
      case 7: {
        if (tag == 56) {
         parse_force_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &force_color_)));
          set_has_force_color();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_force_gray;
        break;
      }

      // optional bool force_gray = 8 [default = false];
      case 8: {
        if (tag == 64) {
         parse_force_gray:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &force_gray_)));
          set_has_force_gray();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Holiday_TransformationParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Holiday_TransformationParameter)
  return false;
#undef DO_
}

void Holiday_TransformationParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Holiday_TransformationParameter)
  // optional float scale = 1 [default = 1];
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->scale(), output);
  }

  // optional bool mirror = 2 [default = false];
  if (has_mirror()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->mirror(), output);
  }

  // optional uint32 crop_height = 3 [default = 0];
  if (has_crop_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->crop_height(), output);
  }

  // optional uint32 crop_width = 4 [default = 0];
  if (has_crop_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->crop_width(), output);
  }

  // optional string mean_file = 5;
  if (has_mean_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mean_file().data(), this->mean_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mean_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->mean_file(), output);
  }

  // repeated float mean_value = 6;
  for (int i = 0; i < this->mean_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      6, this->mean_value(i), output);
  }

  // optional bool force_color = 7 [default = false];
  if (has_force_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->force_color(), output);
  }

  // optional bool force_gray = 8 [default = false];
  if (has_force_gray()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->force_gray(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Holiday_TransformationParameter)
}

::google::protobuf::uint8* Holiday_TransformationParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Holiday_TransformationParameter)
  // optional float scale = 1 [default = 1];
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->scale(), target);
  }

  // optional bool mirror = 2 [default = false];
  if (has_mirror()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->mirror(), target);
  }

  // optional uint32 crop_height = 3 [default = 0];
  if (has_crop_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->crop_height(), target);
  }

  // optional uint32 crop_width = 4 [default = 0];
  if (has_crop_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->crop_width(), target);
  }

  // optional string mean_file = 5;
  if (has_mean_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mean_file().data(), this->mean_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mean_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->mean_file(), target);
  }

  // repeated float mean_value = 6;
  for (int i = 0; i < this->mean_value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(6, this->mean_value(i), target);
  }

  // optional bool force_color = 7 [default = false];
  if (has_force_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->force_color(), target);
  }

  // optional bool force_gray = 8 [default = false];
  if (has_force_gray()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->force_gray(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Holiday_TransformationParameter)
  return target;
}

int Holiday_TransformationParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float scale = 1 [default = 1];
    if (has_scale()) {
      total_size += 1 + 4;
    }

    // optional bool mirror = 2 [default = false];
    if (has_mirror()) {
      total_size += 1 + 1;
    }

    // optional uint32 crop_height = 3 [default = 0];
    if (has_crop_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crop_height());
    }

    // optional uint32 crop_width = 4 [default = 0];
    if (has_crop_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crop_width());
    }

    // optional string mean_file = 5;
    if (has_mean_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mean_file());
    }

    // optional bool force_color = 7 [default = false];
    if (has_force_color()) {
      total_size += 1 + 1;
    }

    // optional bool force_gray = 8 [default = false];
    if (has_force_gray()) {
      total_size += 1 + 1;
    }

  }
  // repeated float mean_value = 6;
  {
    int data_size = 0;
    data_size = 4 * this->mean_value_size();
    total_size += 1 * this->mean_value_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Holiday_TransformationParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Holiday_TransformationParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Holiday_TransformationParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Holiday_TransformationParameter::MergeFrom(const Holiday_TransformationParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  mean_value_.MergeFrom(from.mean_value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scale()) {
      set_scale(from.scale());
    }
    if (from.has_mirror()) {
      set_mirror(from.mirror());
    }
    if (from.has_crop_height()) {
      set_crop_height(from.crop_height());
    }
    if (from.has_crop_width()) {
      set_crop_width(from.crop_width());
    }
    if (from.has_mean_file()) {
      set_mean_file(from.mean_file());
    }
    if (from.has_force_color()) {
      set_force_color(from.force_color());
    }
    if (from.has_force_gray()) {
      set_force_gray(from.force_gray());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Holiday_TransformationParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Holiday_TransformationParameter::CopyFrom(const Holiday_TransformationParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Holiday_TransformationParameter::IsInitialized() const {

  return true;
}

void Holiday_TransformationParameter::Swap(Holiday_TransformationParameter* other) {
  if (other != this) {
    std::swap(scale_, other->scale_);
    std::swap(mirror_, other->mirror_);
    std::swap(crop_height_, other->crop_height_);
    std::swap(crop_width_, other->crop_width_);
    std::swap(mean_file_, other->mean_file_);
    mean_value_.Swap(&other->mean_value_);
    std::swap(force_color_, other->force_color_);
    std::swap(force_gray_, other->force_gray_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Holiday_TransformationParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Holiday_TransformationParameter_descriptor_;
  metadata.reflection = Holiday_TransformationParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Holiday_InnerProductParameter::kNumOutputFieldNumber;
const int Holiday_InnerProductParameter::kAxisFieldNumber;
const int Holiday_InnerProductParameter::kTransposeFieldNumber;
const int Holiday_InnerProductParameter::kBiasParamFieldNumber;
const int Holiday_InnerProductParameter::kInnerParamFieldNumber;
#endif  // !_MSC_VER

Holiday_InnerProductParameter::Holiday_InnerProductParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Holiday_InnerProductParameter)
}

void Holiday_InnerProductParameter::InitAsDefaultInstance() {
  bias_param_ = const_cast< ::Holiday_BlobProto*>(&::Holiday_BlobProto::default_instance());
  inner_param_ = const_cast< ::Holiday_BlobProto*>(&::Holiday_BlobProto::default_instance());
}

Holiday_InnerProductParameter::Holiday_InnerProductParameter(const Holiday_InnerProductParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Holiday_InnerProductParameter)
}

void Holiday_InnerProductParameter::SharedCtor() {
  _cached_size_ = 0;
  num_output_ = 0u;
  axis_ = 1;
  transpose_ = false;
  bias_param_ = NULL;
  inner_param_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Holiday_InnerProductParameter::~Holiday_InnerProductParameter() {
  // @@protoc_insertion_point(destructor:Holiday_InnerProductParameter)
  SharedDtor();
}

void Holiday_InnerProductParameter::SharedDtor() {
  if (this != default_instance_) {
    delete bias_param_;
    delete inner_param_;
  }
}

void Holiday_InnerProductParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Holiday_InnerProductParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Holiday_InnerProductParameter_descriptor_;
}

const Holiday_InnerProductParameter& Holiday_InnerProductParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HolidayCNN_5fproto_2eproto();
  return *default_instance_;
}

Holiday_InnerProductParameter* Holiday_InnerProductParameter::default_instance_ = NULL;

Holiday_InnerProductParameter* Holiday_InnerProductParameter::New() const {
  return new Holiday_InnerProductParameter;
}

void Holiday_InnerProductParameter::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    num_output_ = 0u;
    axis_ = 1;
    transpose_ = false;
    if (has_bias_param()) {
      if (bias_param_ != NULL) bias_param_->::Holiday_BlobProto::Clear();
    }
    if (has_inner_param()) {
      if (inner_param_ != NULL) inner_param_->::Holiday_BlobProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Holiday_InnerProductParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Holiday_InnerProductParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num_output = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_output_)));
          set_has_num_output();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_axis;
        break;
      }

      // optional int32 axis = 2 [default = 1];
      case 2: {
        if (tag == 16) {
         parse_axis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
          set_has_axis();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_transpose;
        break;
      }

      // optional bool transpose = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_transpose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &transpose_)));
          set_has_transpose();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_bias_param;
        break;
      }

      // optional .Holiday_BlobProto bias_param = 4;
      case 4: {
        if (tag == 34) {
         parse_bias_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bias_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_Inner_param;
        break;
      }

      // optional .Holiday_BlobProto Inner_param = 5;
      case 5: {
        if (tag == 42) {
         parse_Inner_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_inner_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Holiday_InnerProductParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Holiday_InnerProductParameter)
  return false;
#undef DO_
}

void Holiday_InnerProductParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Holiday_InnerProductParameter)
  // optional uint32 num_output = 1;
  if (has_num_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_output(), output);
  }

  // optional int32 axis = 2 [default = 1];
  if (has_axis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->axis(), output);
  }

  // optional bool transpose = 3 [default = false];
  if (has_transpose()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->transpose(), output);
  }

  // optional .Holiday_BlobProto bias_param = 4;
  if (has_bias_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->bias_param(), output);
  }

  // optional .Holiday_BlobProto Inner_param = 5;
  if (has_inner_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->inner_param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Holiday_InnerProductParameter)
}

::google::protobuf::uint8* Holiday_InnerProductParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Holiday_InnerProductParameter)
  // optional uint32 num_output = 1;
  if (has_num_output()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_output(), target);
  }

  // optional int32 axis = 2 [default = 1];
  if (has_axis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->axis(), target);
  }

  // optional bool transpose = 3 [default = false];
  if (has_transpose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->transpose(), target);
  }

  // optional .Holiday_BlobProto bias_param = 4;
  if (has_bias_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->bias_param(), target);
  }

  // optional .Holiday_BlobProto Inner_param = 5;
  if (has_inner_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->inner_param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Holiday_InnerProductParameter)
  return target;
}

int Holiday_InnerProductParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 num_output = 1;
    if (has_num_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_output());
    }

    // optional int32 axis = 2 [default = 1];
    if (has_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axis());
    }

    // optional bool transpose = 3 [default = false];
    if (has_transpose()) {
      total_size += 1 + 1;
    }

    // optional .Holiday_BlobProto bias_param = 4;
    if (has_bias_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bias_param());
    }

    // optional .Holiday_BlobProto Inner_param = 5;
    if (has_inner_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->inner_param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Holiday_InnerProductParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Holiday_InnerProductParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Holiday_InnerProductParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Holiday_InnerProductParameter::MergeFrom(const Holiday_InnerProductParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num_output()) {
      set_num_output(from.num_output());
    }
    if (from.has_axis()) {
      set_axis(from.axis());
    }
    if (from.has_transpose()) {
      set_transpose(from.transpose());
    }
    if (from.has_bias_param()) {
      mutable_bias_param()->::Holiday_BlobProto::MergeFrom(from.bias_param());
    }
    if (from.has_inner_param()) {
      mutable_inner_param()->::Holiday_BlobProto::MergeFrom(from.inner_param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Holiday_InnerProductParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Holiday_InnerProductParameter::CopyFrom(const Holiday_InnerProductParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Holiday_InnerProductParameter::IsInitialized() const {

  return true;
}

void Holiday_InnerProductParameter::Swap(Holiday_InnerProductParameter* other) {
  if (other != this) {
    std::swap(num_output_, other->num_output_);
    std::swap(axis_, other->axis_);
    std::swap(transpose_, other->transpose_);
    std::swap(bias_param_, other->bias_param_);
    std::swap(inner_param_, other->inner_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Holiday_InnerProductParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Holiday_InnerProductParameter_descriptor_;
  metadata.reflection = Holiday_InnerProductParameter_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Holiday_LRNParameter_NormRegion_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Holiday_LRNParameter_NormRegion_descriptor_;
}
bool Holiday_LRNParameter_NormRegion_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Holiday_LRNParameter_NormRegion Holiday_LRNParameter::ACROSS_CHANNELS;
const Holiday_LRNParameter_NormRegion Holiday_LRNParameter::WITHIN_CHANNEL;
const Holiday_LRNParameter_NormRegion Holiday_LRNParameter::NormRegion_MIN;
const Holiday_LRNParameter_NormRegion Holiday_LRNParameter::NormRegion_MAX;
const int Holiday_LRNParameter::NormRegion_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Holiday_LRNParameter::kLocalSizeFieldNumber;
const int Holiday_LRNParameter::kAlphaFieldNumber;
const int Holiday_LRNParameter::kBetaFieldNumber;
const int Holiday_LRNParameter::kNormRegionFieldNumber;
const int Holiday_LRNParameter::kKFieldNumber;
#endif  // !_MSC_VER

Holiday_LRNParameter::Holiday_LRNParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Holiday_LRNParameter)
}

void Holiday_LRNParameter::InitAsDefaultInstance() {
}

Holiday_LRNParameter::Holiday_LRNParameter(const Holiday_LRNParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Holiday_LRNParameter)
}

void Holiday_LRNParameter::SharedCtor() {
  _cached_size_ = 0;
  local_size_ = 5u;
  alpha_ = 1;
  beta_ = 0.75f;
  norm_region_ = 0;
  k_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Holiday_LRNParameter::~Holiday_LRNParameter() {
  // @@protoc_insertion_point(destructor:Holiday_LRNParameter)
  SharedDtor();
}

void Holiday_LRNParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Holiday_LRNParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Holiday_LRNParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Holiday_LRNParameter_descriptor_;
}

const Holiday_LRNParameter& Holiday_LRNParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HolidayCNN_5fproto_2eproto();
  return *default_instance_;
}

Holiday_LRNParameter* Holiday_LRNParameter::default_instance_ = NULL;

Holiday_LRNParameter* Holiday_LRNParameter::New() const {
  return new Holiday_LRNParameter;
}

void Holiday_LRNParameter::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    local_size_ = 5u;
    alpha_ = 1;
    beta_ = 0.75f;
    norm_region_ = 0;
    k_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Holiday_LRNParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Holiday_LRNParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 local_size = 1 [default = 5];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &local_size_)));
          set_has_local_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_alpha;
        break;
      }

      // optional float alpha = 2 [default = 1];
      case 2: {
        if (tag == 21) {
         parse_alpha:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alpha_)));
          set_has_alpha();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_beta;
        break;
      }

      // optional float beta = 3 [default = 0.75];
      case 3: {
        if (tag == 29) {
         parse_beta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &beta_)));
          set_has_beta();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_norm_region;
        break;
      }

      // optional .Holiday_LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];
      case 4: {
        if (tag == 32) {
         parse_norm_region:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Holiday_LRNParameter_NormRegion_IsValid(value)) {
            set_norm_region(static_cast< ::Holiday_LRNParameter_NormRegion >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_k;
        break;
      }

      // optional float k = 5 [default = 1];
      case 5: {
        if (tag == 45) {
         parse_k:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &k_)));
          set_has_k();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Holiday_LRNParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Holiday_LRNParameter)
  return false;
#undef DO_
}

void Holiday_LRNParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Holiday_LRNParameter)
  // optional uint32 local_size = 1 [default = 5];
  if (has_local_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->local_size(), output);
  }

  // optional float alpha = 2 [default = 1];
  if (has_alpha()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->alpha(), output);
  }

  // optional float beta = 3 [default = 0.75];
  if (has_beta()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->beta(), output);
  }

  // optional .Holiday_LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];
  if (has_norm_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->norm_region(), output);
  }

  // optional float k = 5 [default = 1];
  if (has_k()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->k(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Holiday_LRNParameter)
}

::google::protobuf::uint8* Holiday_LRNParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Holiday_LRNParameter)
  // optional uint32 local_size = 1 [default = 5];
  if (has_local_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->local_size(), target);
  }

  // optional float alpha = 2 [default = 1];
  if (has_alpha()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->alpha(), target);
  }

  // optional float beta = 3 [default = 0.75];
  if (has_beta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->beta(), target);
  }

  // optional .Holiday_LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];
  if (has_norm_region()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->norm_region(), target);
  }

  // optional float k = 5 [default = 1];
  if (has_k()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->k(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Holiday_LRNParameter)
  return target;
}

int Holiday_LRNParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 local_size = 1 [default = 5];
    if (has_local_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->local_size());
    }

    // optional float alpha = 2 [default = 1];
    if (has_alpha()) {
      total_size += 1 + 4;
    }

    // optional float beta = 3 [default = 0.75];
    if (has_beta()) {
      total_size += 1 + 4;
    }

    // optional .Holiday_LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];
    if (has_norm_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->norm_region());
    }

    // optional float k = 5 [default = 1];
    if (has_k()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Holiday_LRNParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Holiday_LRNParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Holiday_LRNParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Holiday_LRNParameter::MergeFrom(const Holiday_LRNParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_local_size()) {
      set_local_size(from.local_size());
    }
    if (from.has_alpha()) {
      set_alpha(from.alpha());
    }
    if (from.has_beta()) {
      set_beta(from.beta());
    }
    if (from.has_norm_region()) {
      set_norm_region(from.norm_region());
    }
    if (from.has_k()) {
      set_k(from.k());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Holiday_LRNParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Holiday_LRNParameter::CopyFrom(const Holiday_LRNParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Holiday_LRNParameter::IsInitialized() const {

  return true;
}

void Holiday_LRNParameter::Swap(Holiday_LRNParameter* other) {
  if (other != this) {
    std::swap(local_size_, other->local_size_);
    std::swap(alpha_, other->alpha_);
    std::swap(beta_, other->beta_);
    std::swap(norm_region_, other->norm_region_);
    std::swap(k_, other->k_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Holiday_LRNParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Holiday_LRNParameter_descriptor_;
  metadata.reflection = Holiday_LRNParameter_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Holiday_PoolingParameter_PoolMethod_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Holiday_PoolingParameter_PoolMethod_descriptor_;
}
bool Holiday_PoolingParameter_PoolMethod_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Holiday_PoolingParameter_PoolMethod Holiday_PoolingParameter::MAX;
const Holiday_PoolingParameter_PoolMethod Holiday_PoolingParameter::AVE;
const Holiday_PoolingParameter_PoolMethod Holiday_PoolingParameter::STOCHASTIC;
const Holiday_PoolingParameter_PoolMethod Holiday_PoolingParameter::PoolMethod_MIN;
const Holiday_PoolingParameter_PoolMethod Holiday_PoolingParameter::PoolMethod_MAX;
const int Holiday_PoolingParameter::PoolMethod_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Holiday_PoolingParameter::kPoolFieldNumber;
const int Holiday_PoolingParameter::kPadHeightFieldNumber;
const int Holiday_PoolingParameter::kPadWidthFieldNumber;
const int Holiday_PoolingParameter::kKernelHeightFieldNumber;
const int Holiday_PoolingParameter::kKernelWidthFieldNumber;
const int Holiday_PoolingParameter::kStrideHeightFieldNumber;
const int Holiday_PoolingParameter::kStrideWidthFieldNumber;
const int Holiday_PoolingParameter::kGlobalPoolingFieldNumber;
const int Holiday_PoolingParameter::kValidFieldNumber;
const int Holiday_PoolingParameter::kTfPaddingFieldNumber;
#endif  // !_MSC_VER

Holiday_PoolingParameter::Holiday_PoolingParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Holiday_PoolingParameter)
}

void Holiday_PoolingParameter::InitAsDefaultInstance() {
}

Holiday_PoolingParameter::Holiday_PoolingParameter(const Holiday_PoolingParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Holiday_PoolingParameter)
}

void Holiday_PoolingParameter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  pool_ = 0;
  pad_height_ = 0u;
  pad_width_ = 0u;
  kernel_height_ = 0u;
  kernel_width_ = 0u;
  stride_height_ = 0u;
  stride_width_ = 0u;
  global_pooling_ = false;
  valid_ = false;
  tf_padding_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Holiday_PoolingParameter::~Holiday_PoolingParameter() {
  // @@protoc_insertion_point(destructor:Holiday_PoolingParameter)
  SharedDtor();
}

void Holiday_PoolingParameter::SharedDtor() {
  if (tf_padding_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tf_padding_;
  }
  if (this != default_instance_) {
  }
}

void Holiday_PoolingParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Holiday_PoolingParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Holiday_PoolingParameter_descriptor_;
}

const Holiday_PoolingParameter& Holiday_PoolingParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HolidayCNN_5fproto_2eproto();
  return *default_instance_;
}

Holiday_PoolingParameter* Holiday_PoolingParameter::default_instance_ = NULL;

Holiday_PoolingParameter* Holiday_PoolingParameter::New() const {
  return new Holiday_PoolingParameter;
}

void Holiday_PoolingParameter::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Holiday_PoolingParameter*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(pool_, global_pooling_);
  }
  if (_has_bits_[8 / 32] & 768) {
    valid_ = false;
    if (has_tf_padding()) {
      if (tf_padding_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tf_padding_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Holiday_PoolingParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Holiday_PoolingParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Holiday_PoolingParameter.PoolMethod pool = 1 [default = MAX];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Holiday_PoolingParameter_PoolMethod_IsValid(value)) {
            set_pool(static_cast< ::Holiday_PoolingParameter_PoolMethod >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pad_height;
        break;
      }

      // optional uint32 pad_height = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_pad_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pad_height_)));
          set_has_pad_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_pad_width;
        break;
      }

      // optional uint32 pad_width = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_pad_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pad_width_)));
          set_has_pad_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_kernel_height;
        break;
      }

      // optional uint32 kernel_height = 4;
      case 4: {
        if (tag == 32) {
         parse_kernel_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kernel_height_)));
          set_has_kernel_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_kernel_width;
        break;
      }

      // optional uint32 kernel_width = 5;
      case 5: {
        if (tag == 40) {
         parse_kernel_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kernel_width_)));
          set_has_kernel_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_stride_height;
        break;
      }

      // optional uint32 stride_height = 6;
      case 6: {
        if (tag == 48) {
         parse_stride_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stride_height_)));
          set_has_stride_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_stride_width;
        break;
      }

      // optional uint32 stride_width = 7;
      case 7: {
        if (tag == 56) {
         parse_stride_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stride_width_)));
          set_has_stride_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_global_pooling;
        break;
      }

      // optional bool global_pooling = 8 [default = false];
      case 8: {
        if (tag == 64) {
         parse_global_pooling:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &global_pooling_)));
          set_has_global_pooling();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_valid;
        break;
      }

      // optional bool valid = 9 [default = false];
      case 9: {
        if (tag == 72) {
         parse_valid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &valid_)));
          set_has_valid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_tf_padding;
        break;
      }

      // optional string tf_padding = 10;
      case 10: {
        if (tag == 82) {
         parse_tf_padding:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tf_padding()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tf_padding().data(), this->tf_padding().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tf_padding");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Holiday_PoolingParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Holiday_PoolingParameter)
  return false;
#undef DO_
}

void Holiday_PoolingParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Holiday_PoolingParameter)
  // optional .Holiday_PoolingParameter.PoolMethod pool = 1 [default = MAX];
  if (has_pool()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->pool(), output);
  }

  // optional uint32 pad_height = 2 [default = 0];
  if (has_pad_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pad_height(), output);
  }

  // optional uint32 pad_width = 3 [default = 0];
  if (has_pad_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pad_width(), output);
  }

  // optional uint32 kernel_height = 4;
  if (has_kernel_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->kernel_height(), output);
  }

  // optional uint32 kernel_width = 5;
  if (has_kernel_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->kernel_width(), output);
  }

  // optional uint32 stride_height = 6;
  if (has_stride_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->stride_height(), output);
  }

  // optional uint32 stride_width = 7;
  if (has_stride_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->stride_width(), output);
  }

  // optional bool global_pooling = 8 [default = false];
  if (has_global_pooling()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->global_pooling(), output);
  }

  // optional bool valid = 9 [default = false];
  if (has_valid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->valid(), output);
  }

  // optional string tf_padding = 10;
  if (has_tf_padding()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tf_padding().data(), this->tf_padding().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tf_padding");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->tf_padding(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Holiday_PoolingParameter)
}

::google::protobuf::uint8* Holiday_PoolingParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Holiday_PoolingParameter)
  // optional .Holiday_PoolingParameter.PoolMethod pool = 1 [default = MAX];
  if (has_pool()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->pool(), target);
  }

  // optional uint32 pad_height = 2 [default = 0];
  if (has_pad_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pad_height(), target);
  }

  // optional uint32 pad_width = 3 [default = 0];
  if (has_pad_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pad_width(), target);
  }

  // optional uint32 kernel_height = 4;
  if (has_kernel_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->kernel_height(), target);
  }

  // optional uint32 kernel_width = 5;
  if (has_kernel_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->kernel_width(), target);
  }

  // optional uint32 stride_height = 6;
  if (has_stride_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->stride_height(), target);
  }

  // optional uint32 stride_width = 7;
  if (has_stride_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->stride_width(), target);
  }

  // optional bool global_pooling = 8 [default = false];
  if (has_global_pooling()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->global_pooling(), target);
  }

  // optional bool valid = 9 [default = false];
  if (has_valid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->valid(), target);
  }

  // optional string tf_padding = 10;
  if (has_tf_padding()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tf_padding().data(), this->tf_padding().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tf_padding");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->tf_padding(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Holiday_PoolingParameter)
  return target;
}

int Holiday_PoolingParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Holiday_PoolingParameter.PoolMethod pool = 1 [default = MAX];
    if (has_pool()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pool());
    }

    // optional uint32 pad_height = 2 [default = 0];
    if (has_pad_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pad_height());
    }

    // optional uint32 pad_width = 3 [default = 0];
    if (has_pad_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pad_width());
    }

    // optional uint32 kernel_height = 4;
    if (has_kernel_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kernel_height());
    }

    // optional uint32 kernel_width = 5;
    if (has_kernel_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kernel_width());
    }

    // optional uint32 stride_height = 6;
    if (has_stride_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stride_height());
    }

    // optional uint32 stride_width = 7;
    if (has_stride_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stride_width());
    }

    // optional bool global_pooling = 8 [default = false];
    if (has_global_pooling()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool valid = 9 [default = false];
    if (has_valid()) {
      total_size += 1 + 1;
    }

    // optional string tf_padding = 10;
    if (has_tf_padding()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tf_padding());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Holiday_PoolingParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Holiday_PoolingParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Holiday_PoolingParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Holiday_PoolingParameter::MergeFrom(const Holiday_PoolingParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pool()) {
      set_pool(from.pool());
    }
    if (from.has_pad_height()) {
      set_pad_height(from.pad_height());
    }
    if (from.has_pad_width()) {
      set_pad_width(from.pad_width());
    }
    if (from.has_kernel_height()) {
      set_kernel_height(from.kernel_height());
    }
    if (from.has_kernel_width()) {
      set_kernel_width(from.kernel_width());
    }
    if (from.has_stride_height()) {
      set_stride_height(from.stride_height());
    }
    if (from.has_stride_width()) {
      set_stride_width(from.stride_width());
    }
    if (from.has_global_pooling()) {
      set_global_pooling(from.global_pooling());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_valid()) {
      set_valid(from.valid());
    }
    if (from.has_tf_padding()) {
      set_tf_padding(from.tf_padding());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Holiday_PoolingParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Holiday_PoolingParameter::CopyFrom(const Holiday_PoolingParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Holiday_PoolingParameter::IsInitialized() const {

  return true;
}

void Holiday_PoolingParameter::Swap(Holiday_PoolingParameter* other) {
  if (other != this) {
    std::swap(pool_, other->pool_);
    std::swap(pad_height_, other->pad_height_);
    std::swap(pad_width_, other->pad_width_);
    std::swap(kernel_height_, other->kernel_height_);
    std::swap(kernel_width_, other->kernel_width_);
    std::swap(stride_height_, other->stride_height_);
    std::swap(stride_width_, other->stride_width_);
    std::swap(global_pooling_, other->global_pooling_);
    std::swap(valid_, other->valid_);
    std::swap(tf_padding_, other->tf_padding_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Holiday_PoolingParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Holiday_PoolingParameter_descriptor_;
  metadata.reflection = Holiday_PoolingParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Holiday_PowerParameter::kPowerFieldNumber;
const int Holiday_PowerParameter::kScaleFieldNumber;
const int Holiday_PowerParameter::kShiftFieldNumber;
#endif  // !_MSC_VER

Holiday_PowerParameter::Holiday_PowerParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Holiday_PowerParameter)
}

void Holiday_PowerParameter::InitAsDefaultInstance() {
}

Holiday_PowerParameter::Holiday_PowerParameter(const Holiday_PowerParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Holiday_PowerParameter)
}

void Holiday_PowerParameter::SharedCtor() {
  _cached_size_ = 0;
  power_ = 1;
  scale_ = 1;
  shift_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Holiday_PowerParameter::~Holiday_PowerParameter() {
  // @@protoc_insertion_point(destructor:Holiday_PowerParameter)
  SharedDtor();
}

void Holiday_PowerParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Holiday_PowerParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Holiday_PowerParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Holiday_PowerParameter_descriptor_;
}

const Holiday_PowerParameter& Holiday_PowerParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HolidayCNN_5fproto_2eproto();
  return *default_instance_;
}

Holiday_PowerParameter* Holiday_PowerParameter::default_instance_ = NULL;

Holiday_PowerParameter* Holiday_PowerParameter::New() const {
  return new Holiday_PowerParameter;
}

void Holiday_PowerParameter::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    power_ = 1;
    scale_ = 1;
    shift_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Holiday_PowerParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Holiday_PowerParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float power = 1 [default = 1];
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_scale;
        break;
      }

      // optional float scale = 2 [default = 1];
      case 2: {
        if (tag == 21) {
         parse_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
          set_has_scale();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_shift;
        break;
      }

      // optional float shift = 3 [default = 0];
      case 3: {
        if (tag == 29) {
         parse_shift:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &shift_)));
          set_has_shift();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Holiday_PowerParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Holiday_PowerParameter)
  return false;
#undef DO_
}

void Holiday_PowerParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Holiday_PowerParameter)
  // optional float power = 1 [default = 1];
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->power(), output);
  }

  // optional float scale = 2 [default = 1];
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->scale(), output);
  }

  // optional float shift = 3 [default = 0];
  if (has_shift()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->shift(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Holiday_PowerParameter)
}

::google::protobuf::uint8* Holiday_PowerParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Holiday_PowerParameter)
  // optional float power = 1 [default = 1];
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->power(), target);
  }

  // optional float scale = 2 [default = 1];
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->scale(), target);
  }

  // optional float shift = 3 [default = 0];
  if (has_shift()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->shift(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Holiday_PowerParameter)
  return target;
}

int Holiday_PowerParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float power = 1 [default = 1];
    if (has_power()) {
      total_size += 1 + 4;
    }

    // optional float scale = 2 [default = 1];
    if (has_scale()) {
      total_size += 1 + 4;
    }

    // optional float shift = 3 [default = 0];
    if (has_shift()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Holiday_PowerParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Holiday_PowerParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Holiday_PowerParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Holiday_PowerParameter::MergeFrom(const Holiday_PowerParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_scale()) {
      set_scale(from.scale());
    }
    if (from.has_shift()) {
      set_shift(from.shift());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Holiday_PowerParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Holiday_PowerParameter::CopyFrom(const Holiday_PowerParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Holiday_PowerParameter::IsInitialized() const {

  return true;
}

void Holiday_PowerParameter::Swap(Holiday_PowerParameter* other) {
  if (other != this) {
    std::swap(power_, other->power_);
    std::swap(scale_, other->scale_);
    std::swap(shift_, other->shift_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Holiday_PowerParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Holiday_PowerParameter_descriptor_;
  metadata.reflection = Holiday_PowerParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Holiday_ReLUParameter::kNegativeSlopeFieldNumber;
const int Holiday_ReLUParameter::kMaxFieldNumber;
#endif  // !_MSC_VER

Holiday_ReLUParameter::Holiday_ReLUParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Holiday_ReLUParameter)
}

void Holiday_ReLUParameter::InitAsDefaultInstance() {
}

Holiday_ReLUParameter::Holiday_ReLUParameter(const Holiday_ReLUParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Holiday_ReLUParameter)
}

void Holiday_ReLUParameter::SharedCtor() {
  _cached_size_ = 0;
  negative_slope_ = 0;
  max_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Holiday_ReLUParameter::~Holiday_ReLUParameter() {
  // @@protoc_insertion_point(destructor:Holiday_ReLUParameter)
  SharedDtor();
}

void Holiday_ReLUParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Holiday_ReLUParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Holiday_ReLUParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Holiday_ReLUParameter_descriptor_;
}

const Holiday_ReLUParameter& Holiday_ReLUParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HolidayCNN_5fproto_2eproto();
  return *default_instance_;
}

Holiday_ReLUParameter* Holiday_ReLUParameter::default_instance_ = NULL;

Holiday_ReLUParameter* Holiday_ReLUParameter::New() const {
  return new Holiday_ReLUParameter;
}

void Holiday_ReLUParameter::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Holiday_ReLUParameter*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(negative_slope_, max_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Holiday_ReLUParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Holiday_ReLUParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float negative_slope = 1 [default = 0];
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &negative_slope_)));
          set_has_negative_slope();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_max;
        break;
      }

      // optional float max = 2;
      case 2: {
        if (tag == 21) {
         parse_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_)));
          set_has_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Holiday_ReLUParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Holiday_ReLUParameter)
  return false;
#undef DO_
}

void Holiday_ReLUParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Holiday_ReLUParameter)
  // optional float negative_slope = 1 [default = 0];
  if (has_negative_slope()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->negative_slope(), output);
  }

  // optional float max = 2;
  if (has_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->max(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Holiday_ReLUParameter)
}

::google::protobuf::uint8* Holiday_ReLUParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Holiday_ReLUParameter)
  // optional float negative_slope = 1 [default = 0];
  if (has_negative_slope()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->negative_slope(), target);
  }

  // optional float max = 2;
  if (has_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->max(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Holiday_ReLUParameter)
  return target;
}

int Holiday_ReLUParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float negative_slope = 1 [default = 0];
    if (has_negative_slope()) {
      total_size += 1 + 4;
    }

    // optional float max = 2;
    if (has_max()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Holiday_ReLUParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Holiday_ReLUParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Holiday_ReLUParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Holiday_ReLUParameter::MergeFrom(const Holiday_ReLUParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_negative_slope()) {
      set_negative_slope(from.negative_slope());
    }
    if (from.has_max()) {
      set_max(from.max());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Holiday_ReLUParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Holiday_ReLUParameter::CopyFrom(const Holiday_ReLUParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Holiday_ReLUParameter::IsInitialized() const {

  return true;
}

void Holiday_ReLUParameter::Swap(Holiday_ReLUParameter* other) {
  if (other != this) {
    std::swap(negative_slope_, other->negative_slope_);
    std::swap(max_, other->max_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Holiday_ReLUParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Holiday_ReLUParameter_descriptor_;
  metadata.reflection = Holiday_ReLUParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Holiday_SoftmaxParameter::kAxisFieldNumber;
#endif  // !_MSC_VER

Holiday_SoftmaxParameter::Holiday_SoftmaxParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Holiday_SoftmaxParameter)
}

void Holiday_SoftmaxParameter::InitAsDefaultInstance() {
}

Holiday_SoftmaxParameter::Holiday_SoftmaxParameter(const Holiday_SoftmaxParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Holiday_SoftmaxParameter)
}

void Holiday_SoftmaxParameter::SharedCtor() {
  _cached_size_ = 0;
  axis_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Holiday_SoftmaxParameter::~Holiday_SoftmaxParameter() {
  // @@protoc_insertion_point(destructor:Holiday_SoftmaxParameter)
  SharedDtor();
}

void Holiday_SoftmaxParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Holiday_SoftmaxParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Holiday_SoftmaxParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Holiday_SoftmaxParameter_descriptor_;
}

const Holiday_SoftmaxParameter& Holiday_SoftmaxParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HolidayCNN_5fproto_2eproto();
  return *default_instance_;
}

Holiday_SoftmaxParameter* Holiday_SoftmaxParameter::default_instance_ = NULL;

Holiday_SoftmaxParameter* Holiday_SoftmaxParameter::New() const {
  return new Holiday_SoftmaxParameter;
}

void Holiday_SoftmaxParameter::Clear() {
  axis_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Holiday_SoftmaxParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Holiday_SoftmaxParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 axis = 1 [default = 1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
          set_has_axis();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Holiday_SoftmaxParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Holiday_SoftmaxParameter)
  return false;
#undef DO_
}

void Holiday_SoftmaxParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Holiday_SoftmaxParameter)
  // optional int32 axis = 1 [default = 1];
  if (has_axis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->axis(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Holiday_SoftmaxParameter)
}

::google::protobuf::uint8* Holiday_SoftmaxParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Holiday_SoftmaxParameter)
  // optional int32 axis = 1 [default = 1];
  if (has_axis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->axis(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Holiday_SoftmaxParameter)
  return target;
}

int Holiday_SoftmaxParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 axis = 1 [default = 1];
    if (has_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axis());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Holiday_SoftmaxParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Holiday_SoftmaxParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Holiday_SoftmaxParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Holiday_SoftmaxParameter::MergeFrom(const Holiday_SoftmaxParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_axis()) {
      set_axis(from.axis());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Holiday_SoftmaxParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Holiday_SoftmaxParameter::CopyFrom(const Holiday_SoftmaxParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Holiday_SoftmaxParameter::IsInitialized() const {

  return true;
}

void Holiday_SoftmaxParameter::Swap(Holiday_SoftmaxParameter* other) {
  if (other != this) {
    std::swap(axis_, other->axis_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Holiday_SoftmaxParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Holiday_SoftmaxParameter_descriptor_;
  metadata.reflection = Holiday_SoftmaxParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Holiday_SliceParameter::kAxisFieldNumber;
const int Holiday_SliceParameter::kSlicePointFieldNumber;
const int Holiday_SliceParameter::kSliceDimFieldNumber;
#endif  // !_MSC_VER

Holiday_SliceParameter::Holiday_SliceParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Holiday_SliceParameter)
}

void Holiday_SliceParameter::InitAsDefaultInstance() {
}

Holiday_SliceParameter::Holiday_SliceParameter(const Holiday_SliceParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Holiday_SliceParameter)
}

void Holiday_SliceParameter::SharedCtor() {
  _cached_size_ = 0;
  axis_ = 1;
  slice_dim_ = 1u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Holiday_SliceParameter::~Holiday_SliceParameter() {
  // @@protoc_insertion_point(destructor:Holiday_SliceParameter)
  SharedDtor();
}

void Holiday_SliceParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Holiday_SliceParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Holiday_SliceParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Holiday_SliceParameter_descriptor_;
}

const Holiday_SliceParameter& Holiday_SliceParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HolidayCNN_5fproto_2eproto();
  return *default_instance_;
}

Holiday_SliceParameter* Holiday_SliceParameter::default_instance_ = NULL;

Holiday_SliceParameter* Holiday_SliceParameter::New() const {
  return new Holiday_SliceParameter;
}

void Holiday_SliceParameter::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    axis_ = 1;
    slice_dim_ = 1u;
  }
  slice_point_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Holiday_SliceParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Holiday_SliceParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 axis = 1 [default = 1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
          set_has_axis();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_slice_point;
        break;
      }

      // repeated uint32 slice_point = 2;
      case 2: {
        if (tag == 16) {
         parse_slice_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_slice_point())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_slice_point())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_slice_point;
        if (input->ExpectTag(24)) goto parse_slice_dim;
        break;
      }

      // optional uint32 slice_dim = 3 [default = 1];
      case 3: {
        if (tag == 24) {
         parse_slice_dim:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slice_dim_)));
          set_has_slice_dim();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Holiday_SliceParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Holiday_SliceParameter)
  return false;
#undef DO_
}

void Holiday_SliceParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Holiday_SliceParameter)
  // optional int32 axis = 1 [default = 1];
  if (has_axis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->axis(), output);
  }

  // repeated uint32 slice_point = 2;
  for (int i = 0; i < this->slice_point_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->slice_point(i), output);
  }

  // optional uint32 slice_dim = 3 [default = 1];
  if (has_slice_dim()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->slice_dim(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Holiday_SliceParameter)
}

::google::protobuf::uint8* Holiday_SliceParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Holiday_SliceParameter)
  // optional int32 axis = 1 [default = 1];
  if (has_axis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->axis(), target);
  }

  // repeated uint32 slice_point = 2;
  for (int i = 0; i < this->slice_point_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->slice_point(i), target);
  }

  // optional uint32 slice_dim = 3 [default = 1];
  if (has_slice_dim()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->slice_dim(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Holiday_SliceParameter)
  return target;
}

int Holiday_SliceParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 axis = 1 [default = 1];
    if (has_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axis());
    }

    // optional uint32 slice_dim = 3 [default = 1];
    if (has_slice_dim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slice_dim());
    }

  }
  // repeated uint32 slice_point = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->slice_point_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->slice_point(i));
    }
    total_size += 1 * this->slice_point_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Holiday_SliceParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Holiday_SliceParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Holiday_SliceParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Holiday_SliceParameter::MergeFrom(const Holiday_SliceParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  slice_point_.MergeFrom(from.slice_point_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_axis()) {
      set_axis(from.axis());
    }
    if (from.has_slice_dim()) {
      set_slice_dim(from.slice_dim());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Holiday_SliceParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Holiday_SliceParameter::CopyFrom(const Holiday_SliceParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Holiday_SliceParameter::IsInitialized() const {

  return true;
}

void Holiday_SliceParameter::Swap(Holiday_SliceParameter* other) {
  if (other != this) {
    std::swap(axis_, other->axis_);
    slice_point_.Swap(&other->slice_point_);
    std::swap(slice_dim_, other->slice_dim_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Holiday_SliceParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Holiday_SliceParameter_descriptor_;
  metadata.reflection = Holiday_SliceParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Holiday_SigmoidParameter::Holiday_SigmoidParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Holiday_SigmoidParameter)
}

void Holiday_SigmoidParameter::InitAsDefaultInstance() {
}

Holiday_SigmoidParameter::Holiday_SigmoidParameter(const Holiday_SigmoidParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Holiday_SigmoidParameter)
}

void Holiday_SigmoidParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Holiday_SigmoidParameter::~Holiday_SigmoidParameter() {
  // @@protoc_insertion_point(destructor:Holiday_SigmoidParameter)
  SharedDtor();
}

void Holiday_SigmoidParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Holiday_SigmoidParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Holiday_SigmoidParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Holiday_SigmoidParameter_descriptor_;
}

const Holiday_SigmoidParameter& Holiday_SigmoidParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HolidayCNN_5fproto_2eproto();
  return *default_instance_;
}

Holiday_SigmoidParameter* Holiday_SigmoidParameter::default_instance_ = NULL;

Holiday_SigmoidParameter* Holiday_SigmoidParameter::New() const {
  return new Holiday_SigmoidParameter;
}

void Holiday_SigmoidParameter::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Holiday_SigmoidParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Holiday_SigmoidParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Holiday_SigmoidParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Holiday_SigmoidParameter)
  return false;
#undef DO_
}

void Holiday_SigmoidParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Holiday_SigmoidParameter)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Holiday_SigmoidParameter)
}

::google::protobuf::uint8* Holiday_SigmoidParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Holiday_SigmoidParameter)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Holiday_SigmoidParameter)
  return target;
}

int Holiday_SigmoidParameter::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Holiday_SigmoidParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Holiday_SigmoidParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Holiday_SigmoidParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Holiday_SigmoidParameter::MergeFrom(const Holiday_SigmoidParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Holiday_SigmoidParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Holiday_SigmoidParameter::CopyFrom(const Holiday_SigmoidParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Holiday_SigmoidParameter::IsInitialized() const {

  return true;
}

void Holiday_SigmoidParameter::Swap(Holiday_SigmoidParameter* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Holiday_SigmoidParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Holiday_SigmoidParameter_descriptor_;
  metadata.reflection = Holiday_SigmoidParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Holiday_SpaceToBatchNDLayer::kBlockShapeFieldNumber;
const int Holiday_SpaceToBatchNDLayer::kPaddingsFieldNumber;
#endif  // !_MSC_VER

Holiday_SpaceToBatchNDLayer::Holiday_SpaceToBatchNDLayer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Holiday_SpaceToBatchNDLayer)
}

void Holiday_SpaceToBatchNDLayer::InitAsDefaultInstance() {
}

Holiday_SpaceToBatchNDLayer::Holiday_SpaceToBatchNDLayer(const Holiday_SpaceToBatchNDLayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Holiday_SpaceToBatchNDLayer)
}

void Holiday_SpaceToBatchNDLayer::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Holiday_SpaceToBatchNDLayer::~Holiday_SpaceToBatchNDLayer() {
  // @@protoc_insertion_point(destructor:Holiday_SpaceToBatchNDLayer)
  SharedDtor();
}

void Holiday_SpaceToBatchNDLayer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Holiday_SpaceToBatchNDLayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Holiday_SpaceToBatchNDLayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Holiday_SpaceToBatchNDLayer_descriptor_;
}

const Holiday_SpaceToBatchNDLayer& Holiday_SpaceToBatchNDLayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HolidayCNN_5fproto_2eproto();
  return *default_instance_;
}

Holiday_SpaceToBatchNDLayer* Holiday_SpaceToBatchNDLayer::default_instance_ = NULL;

Holiday_SpaceToBatchNDLayer* Holiday_SpaceToBatchNDLayer::New() const {
  return new Holiday_SpaceToBatchNDLayer;
}

void Holiday_SpaceToBatchNDLayer::Clear() {
  block_shape_.Clear();
  paddings_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Holiday_SpaceToBatchNDLayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Holiday_SpaceToBatchNDLayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 block_shape = 1;
      case 1: {
        if (tag == 8) {
         parse_block_shape:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_block_shape())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_block_shape())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_block_shape;
        if (input->ExpectTag(16)) goto parse_paddings;
        break;
      }

      // repeated int32 paddings = 2;
      case 2: {
        if (tag == 16) {
         parse_paddings:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_paddings())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_paddings())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_paddings;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Holiday_SpaceToBatchNDLayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Holiday_SpaceToBatchNDLayer)
  return false;
#undef DO_
}

void Holiday_SpaceToBatchNDLayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Holiday_SpaceToBatchNDLayer)
  // repeated int32 block_shape = 1;
  for (int i = 0; i < this->block_shape_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->block_shape(i), output);
  }

  // repeated int32 paddings = 2;
  for (int i = 0; i < this->paddings_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->paddings(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Holiday_SpaceToBatchNDLayer)
}

::google::protobuf::uint8* Holiday_SpaceToBatchNDLayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Holiday_SpaceToBatchNDLayer)
  // repeated int32 block_shape = 1;
  for (int i = 0; i < this->block_shape_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->block_shape(i), target);
  }

  // repeated int32 paddings = 2;
  for (int i = 0; i < this->paddings_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->paddings(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Holiday_SpaceToBatchNDLayer)
  return target;
}

int Holiday_SpaceToBatchNDLayer::ByteSize() const {
  int total_size = 0;

  // repeated int32 block_shape = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->block_shape_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->block_shape(i));
    }
    total_size += 1 * this->block_shape_size() + data_size;
  }

  // repeated int32 paddings = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->paddings_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->paddings(i));
    }
    total_size += 1 * this->paddings_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Holiday_SpaceToBatchNDLayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Holiday_SpaceToBatchNDLayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Holiday_SpaceToBatchNDLayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Holiday_SpaceToBatchNDLayer::MergeFrom(const Holiday_SpaceToBatchNDLayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  block_shape_.MergeFrom(from.block_shape_);
  paddings_.MergeFrom(from.paddings_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Holiday_SpaceToBatchNDLayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Holiday_SpaceToBatchNDLayer::CopyFrom(const Holiday_SpaceToBatchNDLayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Holiday_SpaceToBatchNDLayer::IsInitialized() const {

  return true;
}

void Holiday_SpaceToBatchNDLayer::Swap(Holiday_SpaceToBatchNDLayer* other) {
  if (other != this) {
    block_shape_.Swap(&other->block_shape_);
    paddings_.Swap(&other->paddings_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Holiday_SpaceToBatchNDLayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Holiday_SpaceToBatchNDLayer_descriptor_;
  metadata.reflection = Holiday_SpaceToBatchNDLayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Holiday_BatchToSpaceNDLayer::kBlockShapeFieldNumber;
const int Holiday_BatchToSpaceNDLayer::kCropsFieldNumber;
#endif  // !_MSC_VER

Holiday_BatchToSpaceNDLayer::Holiday_BatchToSpaceNDLayer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Holiday_BatchToSpaceNDLayer)
}

void Holiday_BatchToSpaceNDLayer::InitAsDefaultInstance() {
}

Holiday_BatchToSpaceNDLayer::Holiday_BatchToSpaceNDLayer(const Holiday_BatchToSpaceNDLayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Holiday_BatchToSpaceNDLayer)
}

void Holiday_BatchToSpaceNDLayer::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Holiday_BatchToSpaceNDLayer::~Holiday_BatchToSpaceNDLayer() {
  // @@protoc_insertion_point(destructor:Holiday_BatchToSpaceNDLayer)
  SharedDtor();
}

void Holiday_BatchToSpaceNDLayer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Holiday_BatchToSpaceNDLayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Holiday_BatchToSpaceNDLayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Holiday_BatchToSpaceNDLayer_descriptor_;
}

const Holiday_BatchToSpaceNDLayer& Holiday_BatchToSpaceNDLayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HolidayCNN_5fproto_2eproto();
  return *default_instance_;
}

Holiday_BatchToSpaceNDLayer* Holiday_BatchToSpaceNDLayer::default_instance_ = NULL;

Holiday_BatchToSpaceNDLayer* Holiday_BatchToSpaceNDLayer::New() const {
  return new Holiday_BatchToSpaceNDLayer;
}

void Holiday_BatchToSpaceNDLayer::Clear() {
  block_shape_.Clear();
  crops_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Holiday_BatchToSpaceNDLayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Holiday_BatchToSpaceNDLayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 block_shape = 1;
      case 1: {
        if (tag == 8) {
         parse_block_shape:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_block_shape())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_block_shape())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_block_shape;
        if (input->ExpectTag(16)) goto parse_crops;
        break;
      }

      // repeated int32 crops = 2;
      case 2: {
        if (tag == 16) {
         parse_crops:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_crops())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_crops())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_crops;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Holiday_BatchToSpaceNDLayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Holiday_BatchToSpaceNDLayer)
  return false;
#undef DO_
}

void Holiday_BatchToSpaceNDLayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Holiday_BatchToSpaceNDLayer)
  // repeated int32 block_shape = 1;
  for (int i = 0; i < this->block_shape_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->block_shape(i), output);
  }

  // repeated int32 crops = 2;
  for (int i = 0; i < this->crops_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->crops(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Holiday_BatchToSpaceNDLayer)
}

::google::protobuf::uint8* Holiday_BatchToSpaceNDLayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Holiday_BatchToSpaceNDLayer)
  // repeated int32 block_shape = 1;
  for (int i = 0; i < this->block_shape_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->block_shape(i), target);
  }

  // repeated int32 crops = 2;
  for (int i = 0; i < this->crops_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->crops(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Holiday_BatchToSpaceNDLayer)
  return target;
}

int Holiday_BatchToSpaceNDLayer::ByteSize() const {
  int total_size = 0;

  // repeated int32 block_shape = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->block_shape_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->block_shape(i));
    }
    total_size += 1 * this->block_shape_size() + data_size;
  }

  // repeated int32 crops = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->crops_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->crops(i));
    }
    total_size += 1 * this->crops_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Holiday_BatchToSpaceNDLayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Holiday_BatchToSpaceNDLayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Holiday_BatchToSpaceNDLayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Holiday_BatchToSpaceNDLayer::MergeFrom(const Holiday_BatchToSpaceNDLayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  block_shape_.MergeFrom(from.block_shape_);
  crops_.MergeFrom(from.crops_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Holiday_BatchToSpaceNDLayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Holiday_BatchToSpaceNDLayer::CopyFrom(const Holiday_BatchToSpaceNDLayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Holiday_BatchToSpaceNDLayer::IsInitialized() const {

  return true;
}

void Holiday_BatchToSpaceNDLayer::Swap(Holiday_BatchToSpaceNDLayer* other) {
  if (other != this) {
    block_shape_.Swap(&other->block_shape_);
    crops_.Swap(&other->crops_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Holiday_BatchToSpaceNDLayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Holiday_BatchToSpaceNDLayer_descriptor_;
  metadata.reflection = Holiday_BatchToSpaceNDLayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Holiday_ReshapeLayer::kShapeFieldNumber;
const int Holiday_ReshapeLayer::kPermuteFieldNumber;
#endif  // !_MSC_VER

Holiday_ReshapeLayer::Holiday_ReshapeLayer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Holiday_ReshapeLayer)
}

void Holiday_ReshapeLayer::InitAsDefaultInstance() {
}

Holiday_ReshapeLayer::Holiday_ReshapeLayer(const Holiday_ReshapeLayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Holiday_ReshapeLayer)
}

void Holiday_ReshapeLayer::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Holiday_ReshapeLayer::~Holiday_ReshapeLayer() {
  // @@protoc_insertion_point(destructor:Holiday_ReshapeLayer)
  SharedDtor();
}

void Holiday_ReshapeLayer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Holiday_ReshapeLayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Holiday_ReshapeLayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Holiday_ReshapeLayer_descriptor_;
}

const Holiday_ReshapeLayer& Holiday_ReshapeLayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HolidayCNN_5fproto_2eproto();
  return *default_instance_;
}

Holiday_ReshapeLayer* Holiday_ReshapeLayer::default_instance_ = NULL;

Holiday_ReshapeLayer* Holiday_ReshapeLayer::New() const {
  return new Holiday_ReshapeLayer;
}

void Holiday_ReshapeLayer::Clear() {
  shape_.Clear();
  permute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Holiday_ReshapeLayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Holiday_ReshapeLayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 shape = 1;
      case 1: {
        if (tag == 8) {
         parse_shape:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_shape())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_shape())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_shape;
        if (input->ExpectTag(16)) goto parse_permute;
        break;
      }

      // repeated int32 permute = 2;
      case 2: {
        if (tag == 16) {
         parse_permute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_permute())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_permute())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_permute;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Holiday_ReshapeLayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Holiday_ReshapeLayer)
  return false;
#undef DO_
}

void Holiday_ReshapeLayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Holiday_ReshapeLayer)
  // repeated int32 shape = 1;
  for (int i = 0; i < this->shape_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->shape(i), output);
  }

  // repeated int32 permute = 2;
  for (int i = 0; i < this->permute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->permute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Holiday_ReshapeLayer)
}

::google::protobuf::uint8* Holiday_ReshapeLayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Holiday_ReshapeLayer)
  // repeated int32 shape = 1;
  for (int i = 0; i < this->shape_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->shape(i), target);
  }

  // repeated int32 permute = 2;
  for (int i = 0; i < this->permute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->permute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Holiday_ReshapeLayer)
  return target;
}

int Holiday_ReshapeLayer::ByteSize() const {
  int total_size = 0;

  // repeated int32 shape = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->shape_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->shape(i));
    }
    total_size += 1 * this->shape_size() + data_size;
  }

  // repeated int32 permute = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->permute_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->permute(i));
    }
    total_size += 1 * this->permute_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Holiday_ReshapeLayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Holiday_ReshapeLayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Holiday_ReshapeLayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Holiday_ReshapeLayer::MergeFrom(const Holiday_ReshapeLayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  shape_.MergeFrom(from.shape_);
  permute_.MergeFrom(from.permute_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Holiday_ReshapeLayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Holiday_ReshapeLayer::CopyFrom(const Holiday_ReshapeLayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Holiday_ReshapeLayer::IsInitialized() const {

  return true;
}

void Holiday_ReshapeLayer::Swap(Holiday_ReshapeLayer* other) {
  if (other != this) {
    shape_.Swap(&other->shape_);
    permute_.Swap(&other->permute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Holiday_ReshapeLayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Holiday_ReshapeLayer_descriptor_;
  metadata.reflection = Holiday_ReshapeLayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Holiday_RealMulLayer::kYFieldNumber;
#endif  // !_MSC_VER

Holiday_RealMulLayer::Holiday_RealMulLayer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Holiday_RealMulLayer)
}

void Holiday_RealMulLayer::InitAsDefaultInstance() {
  y_ = const_cast< ::Holiday_BlobProto*>(&::Holiday_BlobProto::default_instance());
}

Holiday_RealMulLayer::Holiday_RealMulLayer(const Holiday_RealMulLayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Holiday_RealMulLayer)
}

void Holiday_RealMulLayer::SharedCtor() {
  _cached_size_ = 0;
  y_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Holiday_RealMulLayer::~Holiday_RealMulLayer() {
  // @@protoc_insertion_point(destructor:Holiday_RealMulLayer)
  SharedDtor();
}

void Holiday_RealMulLayer::SharedDtor() {
  if (this != default_instance_) {
    delete y_;
  }
}

void Holiday_RealMulLayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Holiday_RealMulLayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Holiday_RealMulLayer_descriptor_;
}

const Holiday_RealMulLayer& Holiday_RealMulLayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HolidayCNN_5fproto_2eproto();
  return *default_instance_;
}

Holiday_RealMulLayer* Holiday_RealMulLayer::default_instance_ = NULL;

Holiday_RealMulLayer* Holiday_RealMulLayer::New() const {
  return new Holiday_RealMulLayer;
}

void Holiday_RealMulLayer::Clear() {
  if (has_y()) {
    if (y_ != NULL) y_->::Holiday_BlobProto::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Holiday_RealMulLayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Holiday_RealMulLayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Holiday_BlobProto y = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_y()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Holiday_RealMulLayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Holiday_RealMulLayer)
  return false;
#undef DO_
}

void Holiday_RealMulLayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Holiday_RealMulLayer)
  // optional .Holiday_BlobProto y = 1;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Holiday_RealMulLayer)
}

::google::protobuf::uint8* Holiday_RealMulLayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Holiday_RealMulLayer)
  // optional .Holiday_BlobProto y = 1;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Holiday_RealMulLayer)
  return target;
}

int Holiday_RealMulLayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Holiday_BlobProto y = 1;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->y());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Holiday_RealMulLayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Holiday_RealMulLayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Holiday_RealMulLayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Holiday_RealMulLayer::MergeFrom(const Holiday_RealMulLayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_y()) {
      mutable_y()->::Holiday_BlobProto::MergeFrom(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Holiday_RealMulLayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Holiday_RealMulLayer::CopyFrom(const Holiday_RealMulLayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Holiday_RealMulLayer::IsInitialized() const {

  return true;
}

void Holiday_RealMulLayer::Swap(Holiday_RealMulLayer* other) {
  if (other != this) {
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Holiday_RealMulLayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Holiday_RealMulLayer_descriptor_;
  metadata.reflection = Holiday_RealMulLayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Holiday_LayerParameter::kBottomFieldNumber;
const int Holiday_LayerParameter::kTopFieldNumber;
const int Holiday_LayerParameter::kNameFieldNumber;
const int Holiday_LayerParameter::kTypeFieldNumber;
const int Holiday_LayerParameter::kTopIndexFieldNumber;
const int Holiday_LayerParameter::kBottomIndexFieldNumber;
const int Holiday_LayerParameter::kConcatParamFieldNumber;
const int Holiday_LayerParameter::kConvolutionParamFieldNumber;
const int Holiday_LayerParameter::kEltwiseParamFieldNumber;
const int Holiday_LayerParameter::kExpParamFieldNumber;
const int Holiday_LayerParameter::kInnerProductParamFieldNumber;
const int Holiday_LayerParameter::kLrnParamFieldNumber;
const int Holiday_LayerParameter::kMemoryDataParamFieldNumber;
const int Holiday_LayerParameter::kPoolingParamFieldNumber;
const int Holiday_LayerParameter::kPowerParamFieldNumber;
const int Holiday_LayerParameter::kReluParamFieldNumber;
const int Holiday_LayerParameter::kSoftmaxParamFieldNumber;
const int Holiday_LayerParameter::kSliceParamFieldNumber;
const int Holiday_LayerParameter::kTransformParamFieldNumber;
const int Holiday_LayerParameter::kBatchNormliseParamFieldNumber;
const int Holiday_LayerParameter::kScaleParamFieldNumber;
const int Holiday_LayerParameter::kPreluParamFieldNumber;
const int Holiday_LayerParameter::kCropParameterFieldNumber;
const int Holiday_LayerParameter::kSigmoidParamFieldNumber;
const int Holiday_LayerParameter::kSpaceToBatchNDParamFieldNumber;
const int Holiday_LayerParameter::kBatchToSpaceNDParamFieldNumber;
const int Holiday_LayerParameter::kReshapeParamFieldNumber;
const int Holiday_LayerParameter::kRealMulParamFieldNumber;
const int Holiday_LayerParameter::kLayerIndexFieldNumber;
#endif  // !_MSC_VER

Holiday_LayerParameter::Holiday_LayerParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Holiday_LayerParameter)
}

void Holiday_LayerParameter::InitAsDefaultInstance() {
  concat_param_ = const_cast< ::Holiday_ConcatParameter*>(&::Holiday_ConcatParameter::default_instance());
  convolution_param_ = const_cast< ::Holiday_ConvolutionParameter*>(&::Holiday_ConvolutionParameter::default_instance());
  eltwise_param_ = const_cast< ::Holiday_EltwiseParameter*>(&::Holiday_EltwiseParameter::default_instance());
  exp_param_ = const_cast< ::Holiday_ExpParameter*>(&::Holiday_ExpParameter::default_instance());
  inner_product_param_ = const_cast< ::Holiday_InnerProductParameter*>(&::Holiday_InnerProductParameter::default_instance());
  lrn_param_ = const_cast< ::Holiday_LRNParameter*>(&::Holiday_LRNParameter::default_instance());
  memory_data_param_ = const_cast< ::Holiday_MemoryDataParameterProcess*>(&::Holiday_MemoryDataParameterProcess::default_instance());
  pooling_param_ = const_cast< ::Holiday_PoolingParameter*>(&::Holiday_PoolingParameter::default_instance());
  power_param_ = const_cast< ::Holiday_PowerParameter*>(&::Holiday_PowerParameter::default_instance());
  relu_param_ = const_cast< ::Holiday_ReLUParameter*>(&::Holiday_ReLUParameter::default_instance());
  softmax_param_ = const_cast< ::Holiday_SoftmaxParameter*>(&::Holiday_SoftmaxParameter::default_instance());
  slice_param_ = const_cast< ::Holiday_SliceParameter*>(&::Holiday_SliceParameter::default_instance());
  transform_param_ = const_cast< ::Holiday_TransformationParameter*>(&::Holiday_TransformationParameter::default_instance());
  batchnormlise_param_ = const_cast< ::Holiday_BatchNormliseParameter*>(&::Holiday_BatchNormliseParameter::default_instance());
  scale_param_ = const_cast< ::Holiday_ScaleParameter*>(&::Holiday_ScaleParameter::default_instance());
  prelu_param_ = const_cast< ::Holiday_PreluParameter*>(&::Holiday_PreluParameter::default_instance());
  crop_parameter_ = const_cast< ::Holiday_CropParameter*>(&::Holiday_CropParameter::default_instance());
  sigmoid_param_ = const_cast< ::Holiday_SigmoidParameter*>(&::Holiday_SigmoidParameter::default_instance());
  spacetobatchnd_param_ = const_cast< ::Holiday_SpaceToBatchNDLayer*>(&::Holiday_SpaceToBatchNDLayer::default_instance());
  batchtospacend_param_ = const_cast< ::Holiday_BatchToSpaceNDLayer*>(&::Holiday_BatchToSpaceNDLayer::default_instance());
  reshape_param_ = const_cast< ::Holiday_ReshapeLayer*>(&::Holiday_ReshapeLayer::default_instance());
  real_mul_param_ = const_cast< ::Holiday_RealMulLayer*>(&::Holiday_RealMulLayer::default_instance());
}

Holiday_LayerParameter::Holiday_LayerParameter(const Holiday_LayerParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Holiday_LayerParameter)
}

void Holiday_LayerParameter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0u;
  concat_param_ = NULL;
  convolution_param_ = NULL;
  eltwise_param_ = NULL;
  exp_param_ = NULL;
  inner_product_param_ = NULL;
  lrn_param_ = NULL;
  memory_data_param_ = NULL;
  pooling_param_ = NULL;
  power_param_ = NULL;
  relu_param_ = NULL;
  softmax_param_ = NULL;
  slice_param_ = NULL;
  transform_param_ = NULL;
  batchnormlise_param_ = NULL;
  scale_param_ = NULL;
  prelu_param_ = NULL;
  crop_parameter_ = NULL;
  sigmoid_param_ = NULL;
  spacetobatchnd_param_ = NULL;
  batchtospacend_param_ = NULL;
  reshape_param_ = NULL;
  real_mul_param_ = NULL;
  layer_index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Holiday_LayerParameter::~Holiday_LayerParameter() {
  // @@protoc_insertion_point(destructor:Holiday_LayerParameter)
  SharedDtor();
}

void Holiday_LayerParameter::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
    delete concat_param_;
    delete convolution_param_;
    delete eltwise_param_;
    delete exp_param_;
    delete inner_product_param_;
    delete lrn_param_;
    delete memory_data_param_;
    delete pooling_param_;
    delete power_param_;
    delete relu_param_;
    delete softmax_param_;
    delete slice_param_;
    delete transform_param_;
    delete batchnormlise_param_;
    delete scale_param_;
    delete prelu_param_;
    delete crop_parameter_;
    delete sigmoid_param_;
    delete spacetobatchnd_param_;
    delete batchtospacend_param_;
    delete reshape_param_;
    delete real_mul_param_;
  }
}

void Holiday_LayerParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Holiday_LayerParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Holiday_LayerParameter_descriptor_;
}

const Holiday_LayerParameter& Holiday_LayerParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HolidayCNN_5fproto_2eproto();
  return *default_instance_;
}

Holiday_LayerParameter* Holiday_LayerParameter::default_instance_ = NULL;

Holiday_LayerParameter* Holiday_LayerParameter::New() const {
  return new Holiday_LayerParameter;
}

void Holiday_LayerParameter::Clear() {
  if (_has_bits_[0 / 32] & 204) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    type_ = 0u;
    if (has_concat_param()) {
      if (concat_param_ != NULL) concat_param_->::Holiday_ConcatParameter::Clear();
    }
    if (has_convolution_param()) {
      if (convolution_param_ != NULL) convolution_param_->::Holiday_ConvolutionParameter::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    if (has_eltwise_param()) {
      if (eltwise_param_ != NULL) eltwise_param_->::Holiday_EltwiseParameter::Clear();
    }
    if (has_exp_param()) {
      if (exp_param_ != NULL) exp_param_->::Holiday_ExpParameter::Clear();
    }
    if (has_inner_product_param()) {
      if (inner_product_param_ != NULL) inner_product_param_->::Holiday_InnerProductParameter::Clear();
    }
    if (has_lrn_param()) {
      if (lrn_param_ != NULL) lrn_param_->::Holiday_LRNParameter::Clear();
    }
    if (has_memory_data_param()) {
      if (memory_data_param_ != NULL) memory_data_param_->::Holiday_MemoryDataParameterProcess::Clear();
    }
    if (has_pooling_param()) {
      if (pooling_param_ != NULL) pooling_param_->::Holiday_PoolingParameter::Clear();
    }
    if (has_power_param()) {
      if (power_param_ != NULL) power_param_->::Holiday_PowerParameter::Clear();
    }
    if (has_relu_param()) {
      if (relu_param_ != NULL) relu_param_->::Holiday_ReLUParameter::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 16711680) {
    if (has_softmax_param()) {
      if (softmax_param_ != NULL) softmax_param_->::Holiday_SoftmaxParameter::Clear();
    }
    if (has_slice_param()) {
      if (slice_param_ != NULL) slice_param_->::Holiday_SliceParameter::Clear();
    }
    if (has_transform_param()) {
      if (transform_param_ != NULL) transform_param_->::Holiday_TransformationParameter::Clear();
    }
    if (has_batchnormlise_param()) {
      if (batchnormlise_param_ != NULL) batchnormlise_param_->::Holiday_BatchNormliseParameter::Clear();
    }
    if (has_scale_param()) {
      if (scale_param_ != NULL) scale_param_->::Holiday_ScaleParameter::Clear();
    }
    if (has_prelu_param()) {
      if (prelu_param_ != NULL) prelu_param_->::Holiday_PreluParameter::Clear();
    }
    if (has_crop_parameter()) {
      if (crop_parameter_ != NULL) crop_parameter_->::Holiday_CropParameter::Clear();
    }
    if (has_sigmoid_param()) {
      if (sigmoid_param_ != NULL) sigmoid_param_->::Holiday_SigmoidParameter::Clear();
    }
  }
  if (_has_bits_[24 / 32] & 520093696) {
    if (has_spacetobatchnd_param()) {
      if (spacetobatchnd_param_ != NULL) spacetobatchnd_param_->::Holiday_SpaceToBatchNDLayer::Clear();
    }
    if (has_batchtospacend_param()) {
      if (batchtospacend_param_ != NULL) batchtospacend_param_->::Holiday_BatchToSpaceNDLayer::Clear();
    }
    if (has_reshape_param()) {
      if (reshape_param_ != NULL) reshape_param_->::Holiday_ReshapeLayer::Clear();
    }
    if (has_real_mul_param()) {
      if (real_mul_param_ != NULL) real_mul_param_->::Holiday_RealMulLayer::Clear();
    }
    layer_index_ = 0u;
  }
  bottom_.Clear();
  top_.Clear();
  top_index_.Clear();
  bottom_index_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Holiday_LayerParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Holiday_LayerParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string bottom = 1;
      case 1: {
        if (tag == 10) {
         parse_bottom:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_bottom()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bottom(this->bottom_size() - 1).data(),
            this->bottom(this->bottom_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bottom");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_bottom;
        if (input->ExpectTag(18)) goto parse_top;
        break;
      }

      // repeated string top = 2;
      case 2: {
        if (tag == 18) {
         parse_top:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_top()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->top(this->top_size() - 1).data(),
            this->top(this->top_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "top");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_top;
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional uint32 type = 4;
      case 4: {
        if (tag == 32) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_top_index;
        break;
      }

      // repeated uint32 top_index = 5;
      case 5: {
        if (tag == 40) {
         parse_top_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_top_index())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_top_index())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_top_index;
        if (input->ExpectTag(48)) goto parse_bottom_index;
        break;
      }

      // repeated uint32 bottom_index = 6;
      case 6: {
        if (tag == 48) {
         parse_bottom_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_bottom_index())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_bottom_index())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_bottom_index;
        if (input->ExpectTag(58)) goto parse_concat_param;
        break;
      }

      // optional .Holiday_ConcatParameter concat_param = 7;
      case 7: {
        if (tag == 58) {
         parse_concat_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_concat_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_convolution_param;
        break;
      }

      // optional .Holiday_ConvolutionParameter convolution_param = 8;
      case 8: {
        if (tag == 66) {
         parse_convolution_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_convolution_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_eltwise_param;
        break;
      }

      // optional .Holiday_EltwiseParameter eltwise_param = 9;
      case 9: {
        if (tag == 74) {
         parse_eltwise_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_eltwise_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_exp_param;
        break;
      }

      // optional .Holiday_ExpParameter exp_param = 10;
      case 10: {
        if (tag == 82) {
         parse_exp_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exp_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_inner_product_param;
        break;
      }

      // optional .Holiday_InnerProductParameter inner_product_param = 11;
      case 11: {
        if (tag == 90) {
         parse_inner_product_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_inner_product_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_lrn_param;
        break;
      }

      // optional .Holiday_LRNParameter lrn_param = 12;
      case 12: {
        if (tag == 98) {
         parse_lrn_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lrn_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_memory_data_param;
        break;
      }

      // optional .Holiday_MemoryDataParameterProcess memory_data_param = 13;
      case 13: {
        if (tag == 106) {
         parse_memory_data_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_memory_data_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_pooling_param;
        break;
      }

      // optional .Holiday_PoolingParameter pooling_param = 14;
      case 14: {
        if (tag == 114) {
         parse_pooling_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pooling_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_power_param;
        break;
      }

      // optional .Holiday_PowerParameter power_param = 15;
      case 15: {
        if (tag == 122) {
         parse_power_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_power_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_relu_param;
        break;
      }

      // optional .Holiday_ReLUParameter relu_param = 16;
      case 16: {
        if (tag == 130) {
         parse_relu_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_relu_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_softmax_param;
        break;
      }

      // optional .Holiday_SoftmaxParameter softmax_param = 17;
      case 17: {
        if (tag == 138) {
         parse_softmax_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_softmax_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_slice_param;
        break;
      }

      // optional .Holiday_SliceParameter slice_param = 18;
      case 18: {
        if (tag == 146) {
         parse_slice_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slice_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_transform_param;
        break;
      }

      // optional .Holiday_TransformationParameter transform_param = 19;
      case 19: {
        if (tag == 154) {
         parse_transform_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transform_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_batchNormlise_param;
        break;
      }

      // optional .Holiday_BatchNormliseParameter batchNormlise_param = 20;
      case 20: {
        if (tag == 162) {
         parse_batchNormlise_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_batchnormlise_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_scale_param;
        break;
      }

      // optional .Holiday_ScaleParameter scale_param = 21;
      case 21: {
        if (tag == 170) {
         parse_scale_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scale_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_prelu_param;
        break;
      }

      // optional .Holiday_PreluParameter prelu_param = 22;
      case 22: {
        if (tag == 178) {
         parse_prelu_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_prelu_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_crop_parameter;
        break;
      }

      // optional .Holiday_CropParameter crop_parameter = 23;
      case 23: {
        if (tag == 186) {
         parse_crop_parameter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_crop_parameter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_sigmoid_param;
        break;
      }

      // optional .Holiday_SigmoidParameter sigmoid_param = 24;
      case 24: {
        if (tag == 194) {
         parse_sigmoid_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sigmoid_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_spaceToBatchND_param;
        break;
      }

      // optional .Holiday_SpaceToBatchNDLayer spaceToBatchND_param = 25;
      case 25: {
        if (tag == 202) {
         parse_spaceToBatchND_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_spacetobatchnd_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_batchToSpaceND_param;
        break;
      }

      // optional .Holiday_BatchToSpaceNDLayer batchToSpaceND_param = 26;
      case 26: {
        if (tag == 210) {
         parse_batchToSpaceND_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_batchtospacend_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_reshape_param;
        break;
      }

      // optional .Holiday_ReshapeLayer reshape_param = 27;
      case 27: {
        if (tag == 218) {
         parse_reshape_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reshape_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(226)) goto parse_real_mul_param;
        break;
      }

      // optional .Holiday_RealMulLayer real_mul_param = 28;
      case 28: {
        if (tag == 226) {
         parse_real_mul_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_real_mul_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_layer_index;
        break;
      }

      // optional uint32 layer_index = 30;
      case 30: {
        if (tag == 240) {
         parse_layer_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &layer_index_)));
          set_has_layer_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Holiday_LayerParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Holiday_LayerParameter)
  return false;
#undef DO_
}

void Holiday_LayerParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Holiday_LayerParameter)
  // repeated string bottom = 1;
  for (int i = 0; i < this->bottom_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->bottom(i).data(), this->bottom(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "bottom");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->bottom(i), output);
  }

  // repeated string top = 2;
  for (int i = 0; i < this->top_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->top(i).data(), this->top(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "top");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->top(i), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional uint32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->type(), output);
  }

  // repeated uint32 top_index = 5;
  for (int i = 0; i < this->top_index_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->top_index(i), output);
  }

  // repeated uint32 bottom_index = 6;
  for (int i = 0; i < this->bottom_index_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->bottom_index(i), output);
  }

  // optional .Holiday_ConcatParameter concat_param = 7;
  if (has_concat_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->concat_param(), output);
  }

  // optional .Holiday_ConvolutionParameter convolution_param = 8;
  if (has_convolution_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->convolution_param(), output);
  }

  // optional .Holiday_EltwiseParameter eltwise_param = 9;
  if (has_eltwise_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->eltwise_param(), output);
  }

  // optional .Holiday_ExpParameter exp_param = 10;
  if (has_exp_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->exp_param(), output);
  }

  // optional .Holiday_InnerProductParameter inner_product_param = 11;
  if (has_inner_product_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->inner_product_param(), output);
  }

  // optional .Holiday_LRNParameter lrn_param = 12;
  if (has_lrn_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->lrn_param(), output);
  }

  // optional .Holiday_MemoryDataParameterProcess memory_data_param = 13;
  if (has_memory_data_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->memory_data_param(), output);
  }

  // optional .Holiday_PoolingParameter pooling_param = 14;
  if (has_pooling_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->pooling_param(), output);
  }

  // optional .Holiday_PowerParameter power_param = 15;
  if (has_power_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->power_param(), output);
  }

  // optional .Holiday_ReLUParameter relu_param = 16;
  if (has_relu_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->relu_param(), output);
  }

  // optional .Holiday_SoftmaxParameter softmax_param = 17;
  if (has_softmax_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->softmax_param(), output);
  }

  // optional .Holiday_SliceParameter slice_param = 18;
  if (has_slice_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->slice_param(), output);
  }

  // optional .Holiday_TransformationParameter transform_param = 19;
  if (has_transform_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->transform_param(), output);
  }

  // optional .Holiday_BatchNormliseParameter batchNormlise_param = 20;
  if (has_batchnormlise_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->batchnormlise_param(), output);
  }

  // optional .Holiday_ScaleParameter scale_param = 21;
  if (has_scale_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->scale_param(), output);
  }

  // optional .Holiday_PreluParameter prelu_param = 22;
  if (has_prelu_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->prelu_param(), output);
  }

  // optional .Holiday_CropParameter crop_parameter = 23;
  if (has_crop_parameter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->crop_parameter(), output);
  }

  // optional .Holiday_SigmoidParameter sigmoid_param = 24;
  if (has_sigmoid_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->sigmoid_param(), output);
  }

  // optional .Holiday_SpaceToBatchNDLayer spaceToBatchND_param = 25;
  if (has_spacetobatchnd_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->spacetobatchnd_param(), output);
  }

  // optional .Holiday_BatchToSpaceNDLayer batchToSpaceND_param = 26;
  if (has_batchtospacend_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->batchtospacend_param(), output);
  }

  // optional .Holiday_ReshapeLayer reshape_param = 27;
  if (has_reshape_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->reshape_param(), output);
  }

  // optional .Holiday_RealMulLayer real_mul_param = 28;
  if (has_real_mul_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, this->real_mul_param(), output);
  }

  // optional uint32 layer_index = 30;
  if (has_layer_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->layer_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Holiday_LayerParameter)
}

::google::protobuf::uint8* Holiday_LayerParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Holiday_LayerParameter)
  // repeated string bottom = 1;
  for (int i = 0; i < this->bottom_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bottom(i).data(), this->bottom(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bottom");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->bottom(i), target);
  }

  // repeated string top = 2;
  for (int i = 0; i < this->top_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->top(i).data(), this->top(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "top");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->top(i), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional uint32 type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->type(), target);
  }

  // repeated uint32 top_index = 5;
  for (int i = 0; i < this->top_index_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->top_index(i), target);
  }

  // repeated uint32 bottom_index = 6;
  for (int i = 0; i < this->bottom_index_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->bottom_index(i), target);
  }

  // optional .Holiday_ConcatParameter concat_param = 7;
  if (has_concat_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->concat_param(), target);
  }

  // optional .Holiday_ConvolutionParameter convolution_param = 8;
  if (has_convolution_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->convolution_param(), target);
  }

  // optional .Holiday_EltwiseParameter eltwise_param = 9;
  if (has_eltwise_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->eltwise_param(), target);
  }

  // optional .Holiday_ExpParameter exp_param = 10;
  if (has_exp_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->exp_param(), target);
  }

  // optional .Holiday_InnerProductParameter inner_product_param = 11;
  if (has_inner_product_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->inner_product_param(), target);
  }

  // optional .Holiday_LRNParameter lrn_param = 12;
  if (has_lrn_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->lrn_param(), target);
  }

  // optional .Holiday_MemoryDataParameterProcess memory_data_param = 13;
  if (has_memory_data_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->memory_data_param(), target);
  }

  // optional .Holiday_PoolingParameter pooling_param = 14;
  if (has_pooling_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->pooling_param(), target);
  }

  // optional .Holiday_PowerParameter power_param = 15;
  if (has_power_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->power_param(), target);
  }

  // optional .Holiday_ReLUParameter relu_param = 16;
  if (has_relu_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->relu_param(), target);
  }

  // optional .Holiday_SoftmaxParameter softmax_param = 17;
  if (has_softmax_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->softmax_param(), target);
  }

  // optional .Holiday_SliceParameter slice_param = 18;
  if (has_slice_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->slice_param(), target);
  }

  // optional .Holiday_TransformationParameter transform_param = 19;
  if (has_transform_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->transform_param(), target);
  }

  // optional .Holiday_BatchNormliseParameter batchNormlise_param = 20;
  if (has_batchnormlise_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->batchnormlise_param(), target);
  }

  // optional .Holiday_ScaleParameter scale_param = 21;
  if (has_scale_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->scale_param(), target);
  }

  // optional .Holiday_PreluParameter prelu_param = 22;
  if (has_prelu_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->prelu_param(), target);
  }

  // optional .Holiday_CropParameter crop_parameter = 23;
  if (has_crop_parameter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->crop_parameter(), target);
  }

  // optional .Holiday_SigmoidParameter sigmoid_param = 24;
  if (has_sigmoid_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->sigmoid_param(), target);
  }

  // optional .Holiday_SpaceToBatchNDLayer spaceToBatchND_param = 25;
  if (has_spacetobatchnd_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->spacetobatchnd_param(), target);
  }

  // optional .Holiday_BatchToSpaceNDLayer batchToSpaceND_param = 26;
  if (has_batchtospacend_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->batchtospacend_param(), target);
  }

  // optional .Holiday_ReshapeLayer reshape_param = 27;
  if (has_reshape_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        27, this->reshape_param(), target);
  }

  // optional .Holiday_RealMulLayer real_mul_param = 28;
  if (has_real_mul_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        28, this->real_mul_param(), target);
  }

  // optional uint32 layer_index = 30;
  if (has_layer_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->layer_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Holiday_LayerParameter)
  return target;
}

int Holiday_LayerParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional .Holiday_ConcatParameter concat_param = 7;
    if (has_concat_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->concat_param());
    }

    // optional .Holiday_ConvolutionParameter convolution_param = 8;
    if (has_convolution_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->convolution_param());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .Holiday_EltwiseParameter eltwise_param = 9;
    if (has_eltwise_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->eltwise_param());
    }

    // optional .Holiday_ExpParameter exp_param = 10;
    if (has_exp_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->exp_param());
    }

    // optional .Holiday_InnerProductParameter inner_product_param = 11;
    if (has_inner_product_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->inner_product_param());
    }

    // optional .Holiday_LRNParameter lrn_param = 12;
    if (has_lrn_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lrn_param());
    }

    // optional .Holiday_MemoryDataParameterProcess memory_data_param = 13;
    if (has_memory_data_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->memory_data_param());
    }

    // optional .Holiday_PoolingParameter pooling_param = 14;
    if (has_pooling_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pooling_param());
    }

    // optional .Holiday_PowerParameter power_param = 15;
    if (has_power_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->power_param());
    }

    // optional .Holiday_ReLUParameter relu_param = 16;
    if (has_relu_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->relu_param());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .Holiday_SoftmaxParameter softmax_param = 17;
    if (has_softmax_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->softmax_param());
    }

    // optional .Holiday_SliceParameter slice_param = 18;
    if (has_slice_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->slice_param());
    }

    // optional .Holiday_TransformationParameter transform_param = 19;
    if (has_transform_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transform_param());
    }

    // optional .Holiday_BatchNormliseParameter batchNormlise_param = 20;
    if (has_batchnormlise_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->batchnormlise_param());
    }

    // optional .Holiday_ScaleParameter scale_param = 21;
    if (has_scale_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scale_param());
    }

    // optional .Holiday_PreluParameter prelu_param = 22;
    if (has_prelu_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->prelu_param());
    }

    // optional .Holiday_CropParameter crop_parameter = 23;
    if (has_crop_parameter()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->crop_parameter());
    }

    // optional .Holiday_SigmoidParameter sigmoid_param = 24;
    if (has_sigmoid_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sigmoid_param());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .Holiday_SpaceToBatchNDLayer spaceToBatchND_param = 25;
    if (has_spacetobatchnd_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->spacetobatchnd_param());
    }

    // optional .Holiday_BatchToSpaceNDLayer batchToSpaceND_param = 26;
    if (has_batchtospacend_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->batchtospacend_param());
    }

    // optional .Holiday_ReshapeLayer reshape_param = 27;
    if (has_reshape_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reshape_param());
    }

    // optional .Holiday_RealMulLayer real_mul_param = 28;
    if (has_real_mul_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->real_mul_param());
    }

    // optional uint32 layer_index = 30;
    if (has_layer_index()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->layer_index());
    }

  }
  // repeated string bottom = 1;
  total_size += 1 * this->bottom_size();
  for (int i = 0; i < this->bottom_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->bottom(i));
  }

  // repeated string top = 2;
  total_size += 1 * this->top_size();
  for (int i = 0; i < this->top_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->top(i));
  }

  // repeated uint32 top_index = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->top_index_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->top_index(i));
    }
    total_size += 1 * this->top_index_size() + data_size;
  }

  // repeated uint32 bottom_index = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->bottom_index_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->bottom_index(i));
    }
    total_size += 1 * this->bottom_index_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Holiday_LayerParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Holiday_LayerParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Holiday_LayerParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Holiday_LayerParameter::MergeFrom(const Holiday_LayerParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  bottom_.MergeFrom(from.bottom_);
  top_.MergeFrom(from.top_);
  top_index_.MergeFrom(from.top_index_);
  bottom_index_.MergeFrom(from.bottom_index_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_concat_param()) {
      mutable_concat_param()->::Holiday_ConcatParameter::MergeFrom(from.concat_param());
    }
    if (from.has_convolution_param()) {
      mutable_convolution_param()->::Holiday_ConvolutionParameter::MergeFrom(from.convolution_param());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_eltwise_param()) {
      mutable_eltwise_param()->::Holiday_EltwiseParameter::MergeFrom(from.eltwise_param());
    }
    if (from.has_exp_param()) {
      mutable_exp_param()->::Holiday_ExpParameter::MergeFrom(from.exp_param());
    }
    if (from.has_inner_product_param()) {
      mutable_inner_product_param()->::Holiday_InnerProductParameter::MergeFrom(from.inner_product_param());
    }
    if (from.has_lrn_param()) {
      mutable_lrn_param()->::Holiday_LRNParameter::MergeFrom(from.lrn_param());
    }
    if (from.has_memory_data_param()) {
      mutable_memory_data_param()->::Holiday_MemoryDataParameterProcess::MergeFrom(from.memory_data_param());
    }
    if (from.has_pooling_param()) {
      mutable_pooling_param()->::Holiday_PoolingParameter::MergeFrom(from.pooling_param());
    }
    if (from.has_power_param()) {
      mutable_power_param()->::Holiday_PowerParameter::MergeFrom(from.power_param());
    }
    if (from.has_relu_param()) {
      mutable_relu_param()->::Holiday_ReLUParameter::MergeFrom(from.relu_param());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_softmax_param()) {
      mutable_softmax_param()->::Holiday_SoftmaxParameter::MergeFrom(from.softmax_param());
    }
    if (from.has_slice_param()) {
      mutable_slice_param()->::Holiday_SliceParameter::MergeFrom(from.slice_param());
    }
    if (from.has_transform_param()) {
      mutable_transform_param()->::Holiday_TransformationParameter::MergeFrom(from.transform_param());
    }
    if (from.has_batchnormlise_param()) {
      mutable_batchnormlise_param()->::Holiday_BatchNormliseParameter::MergeFrom(from.batchnormlise_param());
    }
    if (from.has_scale_param()) {
      mutable_scale_param()->::Holiday_ScaleParameter::MergeFrom(from.scale_param());
    }
    if (from.has_prelu_param()) {
      mutable_prelu_param()->::Holiday_PreluParameter::MergeFrom(from.prelu_param());
    }
    if (from.has_crop_parameter()) {
      mutable_crop_parameter()->::Holiday_CropParameter::MergeFrom(from.crop_parameter());
    }
    if (from.has_sigmoid_param()) {
      mutable_sigmoid_param()->::Holiday_SigmoidParameter::MergeFrom(from.sigmoid_param());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_spacetobatchnd_param()) {
      mutable_spacetobatchnd_param()->::Holiday_SpaceToBatchNDLayer::MergeFrom(from.spacetobatchnd_param());
    }
    if (from.has_batchtospacend_param()) {
      mutable_batchtospacend_param()->::Holiday_BatchToSpaceNDLayer::MergeFrom(from.batchtospacend_param());
    }
    if (from.has_reshape_param()) {
      mutable_reshape_param()->::Holiday_ReshapeLayer::MergeFrom(from.reshape_param());
    }
    if (from.has_real_mul_param()) {
      mutable_real_mul_param()->::Holiday_RealMulLayer::MergeFrom(from.real_mul_param());
    }
    if (from.has_layer_index()) {
      set_layer_index(from.layer_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Holiday_LayerParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Holiday_LayerParameter::CopyFrom(const Holiday_LayerParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Holiday_LayerParameter::IsInitialized() const {

  return true;
}

void Holiday_LayerParameter::Swap(Holiday_LayerParameter* other) {
  if (other != this) {
    bottom_.Swap(&other->bottom_);
    top_.Swap(&other->top_);
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    top_index_.Swap(&other->top_index_);
    bottom_index_.Swap(&other->bottom_index_);
    std::swap(concat_param_, other->concat_param_);
    std::swap(convolution_param_, other->convolution_param_);
    std::swap(eltwise_param_, other->eltwise_param_);
    std::swap(exp_param_, other->exp_param_);
    std::swap(inner_product_param_, other->inner_product_param_);
    std::swap(lrn_param_, other->lrn_param_);
    std::swap(memory_data_param_, other->memory_data_param_);
    std::swap(pooling_param_, other->pooling_param_);
    std::swap(power_param_, other->power_param_);
    std::swap(relu_param_, other->relu_param_);
    std::swap(softmax_param_, other->softmax_param_);
    std::swap(slice_param_, other->slice_param_);
    std::swap(transform_param_, other->transform_param_);
    std::swap(batchnormlise_param_, other->batchnormlise_param_);
    std::swap(scale_param_, other->scale_param_);
    std::swap(prelu_param_, other->prelu_param_);
    std::swap(crop_parameter_, other->crop_parameter_);
    std::swap(sigmoid_param_, other->sigmoid_param_);
    std::swap(spacetobatchnd_param_, other->spacetobatchnd_param_);
    std::swap(batchtospacend_param_, other->batchtospacend_param_);
    std::swap(reshape_param_, other->reshape_param_);
    std::swap(real_mul_param_, other->real_mul_param_);
    std::swap(layer_index_, other->layer_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Holiday_LayerParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Holiday_LayerParameter_descriptor_;
  metadata.reflection = Holiday_LayerParameter_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
