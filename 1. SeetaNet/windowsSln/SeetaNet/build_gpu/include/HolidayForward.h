#ifndef _HOLIDAY_FORWARD_H__
#define _HOLIDAY_FORWARD_H__

// @todo define int64_t before VS2010
#include <stdint.h>
#include <stdlib.h>
#include "HolidayStruct.h"

#define SEETANET_MAJOR_VERSION 0
#define SEETANET_MINOR_VERSION 7
#define SEETANET_SINOR_VERSION 7

#ifdef __cplusplus
extern "C" {
#endif

/**
* @brief Read all content from the given file, into an binary memory buffer
* @param [in] file_name The file ready to read.
* @param [out] pbuffer A pointer pointing a binary memory buffer.
* @param [out] file_length Returning the size of the read buffer.
* @return Return 0 only if everything is OK.
* @note Required to call @c SeetaFreeBuffer with the unused memory buffer, free the memory.
* @see SeetaFreeBuffer
*/
HOLIDAY_C_API int SeetaReadAllContentFromFile(const char* file_name, char** pbuffer, int64_t *file_length);

/**
* @brief Free a binary memory buffer.
* @param [in] buffer the buffer generated by @c SeetaReadAllContentFromFile, ready to finalize.
* @see SeetaReadAllContentFromFile
*/
HOLIDAY_C_API void SeetaFreeBuffer(char *buffer);

/**
* @brief Init the model configuration from the given memory buffer (with length).
* @param [in] buffer Pointing to a binary protobuf object in memory.
* @param [in] buffer_length The size of the `buffer`.
* @param [out] pmodel A pointer pointing a @c SeetaCNN_Model pointer. Returning an inner model structure.
* @return Return 0 only if everything is OK.
* @note Required to call @c SeetaReleaseModel with `model`, finalizing the inner model structure.
* @see SeetaCNN_Model SeetaReleaseModel
*/
HOLIDAY_C_API int SeetaReadModelFromBuffer(const char* buffer, size_t buffer_length, struct SeetaCNN_Model** pmodel);

/**
 * @brief Set input image width and height in FCN net
 * @param [in] model The model generated by @c SeetaReadModelFromBuffer.
 * @param [in] width new width of forward net
 * @param [in] height new height of forward net
 * @return Return 0 only if everything is OK.
 * @note width and heigth can be 0, means using default size
 */
HOLIDAY_C_API int SeetaModelResetInput(struct SeetaCNN_Model *model, int width, int height);

/**
* @brief Finalize the inner model structure.
* @param [in] model A pointer pointing a @c SeetaCNN_Model, ready to finalize.
* @see SeetaCNN_Model
*/
HOLIDAY_C_API void SeetaReleaseModel(struct SeetaCNN_Model *model);

/**
* @brief Get the default device, @c HOLIDAY_CNN_GPU_DEVICE only returned in gpu version 
* @return Return 0 only if everything is OK.
* @see SeetaCNN_DEVICE_TYPE HOLIDAY_CNN_GPU_DEVICE
*/
HOLIDAY_C_API enum SeetaCNN_DEVICE_TYPE SeetaDefaultDevice();

HOLIDAY_C_API int SeetaGPUDeviceCount();

/**
* @brief Create the net from the given model configuration.
* @param [in] model The model generated by @c SeetaReadModelFromBuffer.
* @param [in] max_batch_size The max batch size you can feed.
* @param [in] process_device_type Chose the device running net. See @see SeetaCNN_DEVICE_TYPE.
* @param [out] pnet A pointer pointing a @c SeetaCNN_Net pointer. Returning an inner net structure.
* @return Return 0 only if everything is OK. May return error UNIDENTIFIED_LAYER
* @note Required to call @c SeetaReleaseNet with `net`, finalizing the inner net structure.
* @see SeetaReadModelFromBuffer SeetaCNN_Net SeetaReleaseNet
*/
HOLIDAY_C_API int SeetaCreateNet(struct SeetaCNN_Model* model, int max_batch_size, enum SeetaCNN_DEVICE_TYPE process_device_type, struct SeetaCNN_Net** pnet);


/**
* @brief Create the net from the given model configuration.
* @param [in] model The model generated by @c SeetaReadModelFromBuffer.
* @param [in] max_batch_size The max batch size you can feed.
* @param [in] process_device_type Chose the device running net. See @see SeetaCNN_DEVICE_TYPE.
* @param [out] pnet A pointer pointing a @c SeetaCNN_Net pointer. Returning an inner net structure.
* @param [out] pparam A pointer pointing a @c SeetaCNN_SharedParam pointer. Returning an inner param structure.
* @return Return 0 only if everything is OK. May return error UNIDENTIFIED_LAYER
* @note Required to call @c SeetaReleaseNet with `net`, finalizing the inner net structure.
* @see SeetaReadModelFromBuffer SeetaCNN_Net SeetaReleaseNet
*/
HOLIDAY_C_API  int SeetaCreateNetSharedParam(struct SeetaCNN_Model* model, int max_batch_size, enum SeetaCNN_DEVICE_TYPE process_device_type, struct SeetaCNN_Net** pnet, struct SeetaCNN_SharedParam** pparam);

/**
* @brief Create the net from the given model configuration. on GPU.
* @param [in] model The model generated by @c SeetaReadModelFromBuffer.
* @param [in] max_batch_size The max batch size you can feed.
* @param [in] device_id Chose an device to create net.
* @param [out] pnet A pointer pointing a @c SeetaCNN_Net pointer. Returning an inner net structure.
* @return Return 0 only if everything is OK. May return error UNIDENTIFIED_LAYER
* @note Required to call @c SeetaReleaseNet with `net`, finalizing the inner net structure.
* @see SeetaReadModelFromBuffer SeetaCNN_Net SeetaReleaseNet
*/
HOLIDAY_C_API int SeetaCreateNetGPU(struct SeetaCNN_Model* model, int max_batch_size, int device_id, struct SeetaCNN_Net** pnet);

/**
* @brief Create the net from the given model configuration.
* @param [in] model The model generated by @c SeetaReadModelFromBuffer.
* @param [in] max_batch_size The max batch size you can feed.
* @param [in] device_id Chose an device to create net. If device_id < 1, it will be same as SharedParam
* @param [out] pnet A pointer pointing a @c SeetaCNN_Net pointer. Returning an inner net structure.
* @param [out] pparam A pointer pointing a @c SeetaCNN_SharedParam pointer. Returning an inner param structure.
* @return Return 0 only if everything is OK. May return error UNIDENTIFIED_LAYER
* @note Required to call @c SeetaReleaseNet with `net`, finalizing the inner net structure.
* @see SeetaReadModelFromBuffer SeetaCNN_Net SeetaReleaseNet
* @note not really use this time
*/
HOLIDAY_C_API  int SeetaCreateNetGPUSharedParam(struct SeetaCNN_Model* model, int max_batch_size, int device_id, struct SeetaCNN_Net** pnet, struct SeetaCNN_SharedParam** pparam);


/**
 * @brief Get net shared param
 * @param [in] net The net generated by @c SeetaCreateNet.
 * @return A pointer pointing a @c SeetaCNN_SharedParam pointer.
 */
HOLIDAY_C_API struct SeetaCNN_SharedParam *SeetaGetSharedParam(struct SeetaCNN_Net* net);

/**
 * @brief Keep blob by name, so that @c SeetaGetFeatureMap can get
 * @param [in] net The net generated by @c SeetaCreateNet.
 * @param [in] blob_name The blob's name ready to keep
 */
HOLIDAY_C_API void SeetaNetKeepBlob(struct SeetaCNN_Net* net, const char *blob_name);

/**
 * @brief Do not keep any blob when compling.
 * @param [in] net The net generated by @c SeetaCreateNet.
 */
HOLIDAY_C_API void SeetaNetKeepNoBlob(struct SeetaCNN_Net *net);

/**
 * @brief Keep all blob when compling.
 * @param [in] net The net generated by @c SeetaCreateNet.
 */
HOLIDAY_C_API void SeetaNetKeepAllBlob(struct SeetaCNN_Net *net);

/**
 * @brief Return the `blob_name` if kept
 * @param [in] net The net generated by @c SeetaCreateNet.
 * @return return non-zero if the `blob_name` is kept
 */
HOLIDAY_C_API int SeetaNetHasKeptBlob(struct SeetaCNN_Net* net, const char *blob_name);

/**
* @brief Finalize the inner net structure.
* @param [in] net A pointer pointing a @c SeetaCNN_Net, ready to finalize.
* @see SeetaCNN_Net
*/
HOLIDAY_C_API void SeetaReleaseNet(struct SeetaCNN_Net* net);

/**
* @brief Feed the data @c SeetaCNN_InputOutputData into the net, and do "Forward Propagation"
* @param [in] net The net generated by @c SeetaCreateNet.
* @param [in] counts Not used reserve parameter, 1 fro default.
* @param [in] pinput_data The data feed the `net`
* @return Return 0 only if everything is OK.
* @note The `pinput_data->data_point_char` means the input data
* @see SeetaCNN_InputOutputData SeetaCreateNet
*/
HOLIDAY_C_API int SeetaRunNetChar(struct SeetaCNN_Net* net, int counts, struct SeetaCNN_InputOutputData* pinput_data);

/**
* @brief Feed the data @c SeetaCNN_InputOutputData into the net, and do "Forward Propagation"
* @param [in] net The net generated by @c SeetaCreateNet.
* @param [in] counts Not used reserve parameter, 1 fro default.
* @param [in] pinput_data The data feed the `net`
* @return Return 0 only if everything is OK.
* @note The `pinput_data->data_point_float` means the input data
* @see SeetaCNN_InputOutputData SeetaCreateNet
*/
HOLIDAY_C_API int SeetaRunNetFloat(struct SeetaCNN_Net* net, int counts, struct SeetaCNN_InputOutputData* pinput_data);

/**
* @brief Get the output @c SeetaCNN_InputOutputData data after last time @c SeetaRunNetChar
* @param [in] net The net generated by @c SeetaCreateNet.
* @param [in] blob_name Which blob you want get.
* @param [out] poutput_data The gotten data.
* @return Return 0 only if everything is OK.
* @see SeetaCNN_InputOutputData SeetaRunNetChar SeetaCreateNet
*/
HOLIDAY_C_API int SeetaGetFeatureMap(struct SeetaCNN_Net* net, const char* blob_name, struct SeetaCNN_InputOutputData* poutput_data);

HOLIDAY_C_API int SeetaGetAllFeatureMap(struct SeetaCNN_Net* net, int* number, struct SeetaCNN_InputOutputData** poutput_data);

HOLIDAY_C_API void SeetaFreeAllFeatureMap(struct SeetaCNN_Net* net, const struct SeetaCNN_InputOutputData* poutput_data);

/**
 * @biref free all temp, after no API of seetanet could be called
 */
HOLIDAY_C_API void SeetaFinalizeLibrary();

/**
 * @biref return an string contain the version, like 0.7.4
 * @return library version string
 * @note the memory is kept in library, no need to free
 */
HOLIDAY_C_API const char *SeetaLibraryVersionString();

/**
* @brief Set number of threads computing
* @param [in] num Number of threads.
* @note This is an global setting.
*/
HOLIDAY_C_API void SeetaSetNumThreads(int num);

/**
* @brief Set number of threads computing
* @param [net] net The object ready to set threads.
* @param [in] num Number of threads.
* @note This is an global setting.
*/
HOLIDAY_C_API void SeetaSetNumThreadsEx(struct SeetaCNN_Net* net, int num);

#ifdef __cplusplus
}
#endif

#endif